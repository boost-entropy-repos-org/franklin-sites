!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=377)}([function(t,e,n){var r=n(5),o=n(30),i=n(17),a=n(16),u=n(24),l=function(t,e,n){var c,s,f,p,d=t&l.F,h=t&l.G,v=t&l.S,m=t&l.P,y=t&l.B,g=h?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=h?o:o[e]||(o[e]={}),w=b.prototype||(b.prototype={});for(c in h&&(n=e),n)f=((s=!d&&g&&void 0!==g[c])?g:n)[c],p=y&&s?u(f,r):m&&"function"==typeof f?u(Function.call,f):f,g&&a(g,c,f,t&l.U),b[c]!=f&&i(b,c,p),m&&w[c]!=f&&(w[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},function(t,e,n){t.exports=n(162)()},function(t,e,n){"use strict";t.exports=n(173)},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){var r=n(7);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(67)("wks"),o=n(45),i=n(5).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(27),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(4),o=n(140),i=n(29),a=Object.defineProperty;e.f=n(11)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(6)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,a,u){if(!t){var l;if(void 0===e)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(e.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(t,e,n){var r=n(28);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(0),o=n(6),i=n(28),a=/"/g,u=function(t,e,n,r){var o=String(i(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(u),r(r.P+r.F*o(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){var r=n(5),o=n(17),i=n(21),a=n(45)("src"),u=Function.toString,l=(""+u).split("toString");n(30).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(c&&(i(n,a)||o(n,a,t[e]?""+t[e]:l.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,e,n){var r=n(10),o=n(46);t.exports=n(11)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(21),o=n(13),i=n(97)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(52),o=n(46),i=n(20),a=n(29),u=n(21),l=n(140),c=Object.getOwnPropertyDescriptor;e.f=n(11)?c:function(t,e){if(t=i(t),e=a(e,!0),l)try{return c(t,e)}catch(t){}if(u(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(53),o=n(28);t.exports=function(t){return r(o(t))}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";var r=n(6);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(14);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(24),o=n(53),i=n(13),a=n(9),u=n(80);t.exports=function(t,e){var n=1==t,l=2==t,c=3==t,s=4==t,f=6==t,p=5==t||f,d=e||u;return function(e,u,h){for(var v,m,y=i(e),g=o(y),b=r(u,h,3),w=a(g.length),x=0,E=n?d(e,w):l?d(e,0):void 0;w>x;x++)if((p||x in g)&&(m=b(v=g[x],x,y),t))if(n)E[x]=m;else if(m)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:E.push(v)}else if(s)return!1;return f?-1:c||s?s:E}}},function(t,e,n){var r=n(0),o=n(30),i=n(6);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(7);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";e.__esModule=!0;e.addLeadingSlash=function(t){return"/"===t.charAt(0)?t:"/"+t},e.stripLeadingSlash=function(t){return"/"===t.charAt(0)?t.substr(1):t};var r=e.hasBasename=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)};e.stripBasename=function(t,e){return r(t,e)?t.substr(e.length):t},e.stripTrailingSlash=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},e.parsePath=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}},e.createPath=function(t){var e=t.pathname,n=t.search,r=t.hash,o=e||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(t,e,n){var r=n(119),o=n(0),i=n(67)("metadata"),a=i.store||(i.store=new(n(116))),u=function(t,e,n){var o=a.get(t);if(!o){if(!n)return;a.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:a,map:u,has:function(t,e,n){var r=u(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=u(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){u(n,r,!0).set(t,e)},keys:function(t,e){var n=u(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e,n){"use strict";if(n(11)){var r=n(44),o=n(5),i=n(6),a=n(0),u=n(57),l=n(74),c=n(24),s=n(38),f=n(46),p=n(17),d=n(36),h=n(27),v=n(9),m=n(114),y=n(42),g=n(29),b=n(21),w=n(51),x=n(7),E=n(13),_=n(83),S=n(41),P=n(18),C=n(40).f,k=n(81),T=n(45),O=n(8),M=n(25),N=n(66),R=n(59),I=n(78),j=n(48),F=n(62),L=n(39),A=n(79),D=n(124),U=n(10),z=n(19),H=U.f,W=z.f,B=o.RangeError,V=o.TypeError,q=o.Uint8Array,K=Array.prototype,$=l.ArrayBuffer,G=l.DataView,Y=M(0),Q=M(2),X=M(3),J=M(4),Z=M(5),tt=M(6),et=N(!0),nt=N(!1),rt=I.values,ot=I.keys,it=I.entries,at=K.lastIndexOf,ut=K.reduce,lt=K.reduceRight,ct=K.join,st=K.sort,ft=K.slice,pt=K.toString,dt=K.toLocaleString,ht=O("iterator"),vt=O("toStringTag"),mt=T("typed_constructor"),yt=T("def_constructor"),gt=u.CONSTR,bt=u.TYPED,wt=u.VIEW,xt=M(1,function(t,e){return Ct(R(t,t[yt]),e)}),Et=i(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),_t=!!q&&!!q.prototype.set&&i(function(){new q(1).set({})}),St=function(t,e){var n=h(t);if(n<0||n%e)throw B("Wrong offset!");return n},Pt=function(t){if(x(t)&&bt in t)return t;throw V(t+" is not a typed array!")},Ct=function(t,e){if(!(x(t)&&mt in t))throw V("It is not a typed array constructor!");return new t(e)},kt=function(t,e){return Tt(R(t,t[yt]),e)},Tt=function(t,e){for(var n=0,r=e.length,o=Ct(t,r);r>n;)o[n]=e[n++];return o},Ot=function(t,e,n){H(t,e,{get:function(){return this._d[n]}})},Mt=function(t){var e,n,r,o,i,a,u=E(t),l=arguments.length,s=l>1?arguments[1]:void 0,f=void 0!==s,p=k(u);if(void 0!=p&&!_(p)){for(a=p.call(u),r=[],e=0;!(i=a.next()).done;e++)r.push(i.value);u=r}for(f&&l>2&&(s=c(s,arguments[2],2)),e=0,n=v(u.length),o=Ct(this,n);n>e;e++)o[e]=f?s(u[e],e):u[e];return o},Nt=function(){for(var t=0,e=arguments.length,n=Ct(this,e);e>t;)n[t]=arguments[t++];return n},Rt=!!q&&i(function(){dt.call(new q(1))}),It=function(){return dt.apply(Rt?ft.call(Pt(this)):Pt(this),arguments)},jt={copyWithin:function(t,e){return D.call(Pt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(Pt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return A.apply(Pt(this),arguments)},filter:function(t){return kt(this,Q(Pt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(Pt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Y(Pt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Pt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Pt(this),arguments)},lastIndexOf:function(t){return at.apply(Pt(this),arguments)},map:function(t){return xt(Pt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Pt(this),arguments)},reduceRight:function(t){return lt.apply(Pt(this),arguments)},reverse:function(){for(var t,e=Pt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(Pt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Pt(this),t)},subarray:function(t,e){var n=Pt(this),r=n.length,o=y(t,r);return new(R(n,n[yt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:y(e,r))-o))}},Ft=function(t,e){return kt(this,ft.call(Pt(this),t,e))},Lt=function(t){Pt(this);var e=St(arguments[1],1),n=this.length,r=E(t),o=v(r.length),i=0;if(o+e>n)throw B("Wrong length!");for(;i<o;)this[e+i]=r[i++]},At={entries:function(){return it.call(Pt(this))},keys:function(){return ot.call(Pt(this))},values:function(){return rt.call(Pt(this))}},Dt=function(t,e){return x(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Ut=function(t,e){return Dt(t,e=g(e,!0))?f(2,t[e]):W(t,e)},zt=function(t,e,n){return!(Dt(t,e=g(e,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?H(t,e,n):(t[e]=n.value,t)};gt||(z.f=Ut,U.f=zt),a(a.S+a.F*!gt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:zt}),i(function(){pt.call({})})&&(pt=dt=function(){return ct.call(this)});var Ht=d({},jt);d(Ht,At),p(Ht,ht,At.values),d(Ht,{slice:Ft,set:Lt,constructor:function(){},toString:pt,toLocaleString:It}),Ot(Ht,"buffer","b"),Ot(Ht,"byteOffset","o"),Ot(Ht,"byteLength","l"),Ot(Ht,"length","e"),H(Ht,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,n,l){var c=t+((l=!!l)?"Clamped":"")+"Array",f="get"+t,d="set"+t,h=o[c],y=h||{},g=h&&P(h),b=!h||!u.ABV,E={},_=h&&h.prototype,k=function(t,n){H(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,Et)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*e+o.o,r,Et)}(this,n,t)},enumerable:!0})};b?(h=n(function(t,n,r,o){s(t,h,c,"_d");var i,a,u,l,f=0,d=0;if(x(n)){if(!(n instanceof $||"ArrayBuffer"==(l=w(n))||"SharedArrayBuffer"==l))return bt in n?Tt(h,n):Mt.call(h,n);i=n,d=St(r,e);var y=n.byteLength;if(void 0===o){if(y%e)throw B("Wrong length!");if((a=y-d)<0)throw B("Wrong length!")}else if((a=v(o)*e)+d>y)throw B("Wrong length!");u=a/e}else u=m(n),i=new $(a=u*e);for(p(t,"_d",{b:i,o:d,l:a,e:u,v:new G(i)});f<u;)k(t,f++)}),_=h.prototype=S(Ht),p(_,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&F(function(t){new h,new h(null),new h(1.5),new h(t)},!0)||(h=n(function(t,n,r,o){var i;return s(t,h,c),x(n)?n instanceof $||"ArrayBuffer"==(i=w(n))||"SharedArrayBuffer"==i?void 0!==o?new y(n,St(r,e),o):void 0!==r?new y(n,St(r,e)):new y(n):bt in n?Tt(h,n):Mt.call(h,n):new y(m(n))}),Y(g!==Function.prototype?C(y).concat(C(g)):C(y),function(t){t in h||p(h,t,y[t])}),h.prototype=_,r||(_.constructor=h));var T=_[ht],O=!!T&&("values"==T.name||void 0==T.name),M=At.values;p(h,mt,!0),p(_,bt,c),p(_,wt,!0),p(_,yt,h),(l?new h(1)[vt]==c:vt in _)||H(_,vt,{get:function(){return c}}),E[c]=h,a(a.G+a.W+a.F*(h!=y),E),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*i(function(){y.of.call(h,1)}),c,{from:Mt,of:Nt}),"BYTES_PER_ELEMENT"in _||p(_,"BYTES_PER_ELEMENT",e),a(a.P,c,jt),L(c),a(a.P+a.F*_t,c,{set:Lt}),a(a.P+a.F*!O,c,At),r||_.toString==pt||(_.toString=pt),a(a.P+a.F*i(function(){new h(1).slice()}),c,{slice:Ft}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){_.toLocaleString.call([1,2])})),c,{toLocaleString:It}),j[c]=O?T:M,r||O||p(_,ht,M)}}else t.exports=function(){}},function(t,e,n){var r=n(8)("unscopables"),o=Array.prototype;void 0==o[r]&&n(17)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e,n){var r=n(45)("meta"),o=n(7),i=n(21),a=n(10).f,u=0,l=Object.isExtensible||function(){return!0},c=!n(6)(function(){return l(Object.preventExtensions({}))}),s=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!l(t))return"F";if(!e)return"E";s(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!l(t))return!0;if(!e)return!1;s(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&l(t)&&!i(t,r)&&s(t),t}}},function(t,e,n){var r=n(16);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(24),o=n(126),i=n(83),a=n(4),u=n(9),l=n(81),c={},s={};(e=t.exports=function(t,e,n,f,p){var d,h,v,m,y=p?function(){return t}:l(t),g=r(n,f,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(d=u(t.length);d>b;b++)if((m=e?g(a(h=t[b])[0],h[1]):g(t[b]))===c||m===s)return m}else for(v=y.call(t);!(h=v.next()).done;)if((m=o(v,g,h.value,e))===c||m===s)return m}).BREAK=c,e.RETURN=s},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r=n(5),o=n(10),i=n(11),a=n(8)("species");t.exports=function(t){var e=r[t];i&&e&&!e[a]&&o.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(138),o=n(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(4),o=n(137),i=n(96),a=n(97)("IE_PROTO"),u=function(){},l=function(){var t,e=n(99)("iframe"),r=i.length;for(e.style.display="none",n(95).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;r--;)delete l.prototype[i[r]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=l(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(27),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(138),o=n(96);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=!1},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(7);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(28),i=n(6),a=n(93),u="["+a+"]",l=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),s=function(t,e,n){var o={},u=i(function(){return!!a[t]()||"​"!="​"[t]()}),l=o[t]=u?e(f):a[t];n&&(o[n]=l),r(r.P+r.F*u,"String",o)},f=s.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(l,"")),2&e&&(t=t.replace(c,"")),t};t.exports=s},function(t,e,n){var r=n(10).f,o=n(21),i=n(8)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(23),o=n(8)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(23);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(0),o=n(14),i=n(24),a=n(37);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,u,l=arguments[1];return o(this),(e=void 0!==l)&&o(l),void 0==t?new this:(n=[],e?(r=0,u=i(l,arguments[2],2),a(t,!1,function(t){n.push(u(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";t.exports=n(44)||!n(6)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(5)[t]})},function(t,e,n){for(var r,o=n(5),i=n(17),a=n(45),u=a("typed_array"),l=a("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,u,!0),i(r.prototype,l,!0)):s=!1;t.exports={ABV:c,CONSTR:s,TYPED:u,VIEW:l}},function(t,e,n){"use strict";var r=n(5),o=n(0),i=n(16),a=n(36),u=n(35),l=n(37),c=n(38),s=n(7),f=n(6),p=n(62),d=n(50),h=n(92);t.exports=function(t,e,n,v,m,y){var g=r[t],b=g,w=m?"set":"add",x=b&&b.prototype,E={},_=function(t){var e=x[t];i(x,t,"delete"==t?function(t){return!(y&&!s(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!s(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!s(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(y||x.forEach&&!f(function(){(new b).entries().next()}))){var S=new b,P=S[w](y?{}:-0,1)!=S,C=f(function(){S.has(1)}),k=p(function(t){new b(t)}),T=!y&&f(function(){for(var t=new b,e=5;e--;)t[w](e,e);return!t.has(-0)});k||((b=e(function(e,n){c(e,b,t);var r=h(new g,e,b);return void 0!=n&&l(n,m,r[w],r),r})).prototype=x,x.constructor=b),(C||T)&&(_("delete"),_("has"),m&&_("get")),(T||P)&&_(w),y&&x.clear&&delete x.clear}else b=v.getConstructor(e,t,m,w),a(b.prototype,n),u.NEED=!0;return d(b,t),E[t]=b,o(o.G+o.W+o.F*(b!=g),E),y||v.setStrong(b,t,m),b}},function(t,e,n){var r=n(4),o=n(14),i=n(8)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||void 0==(n=r(a)[i])?e:o(n)}},function(t,e,n){"use strict";var r=n(17),o=n(16),i=n(6),a=n(28),u=n(8);t.exports=function(t,e,n){var l=u(t),c=n(a,l,""[t]),s=c[0],f=c[1];i(function(){var e={};return e[l]=function(){return 7},7!=""[t](e)})&&(o(String.prototype,t,s),r(RegExp.prototype,l,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(8)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},t(i)}catch(t){}return n}},function(t,e,n){var r=n(7),o=n(23),i=n(8)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(23);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(20),o=n(9),i=n(42);t.exports=function(t){return function(e,n,a){var u,l=r(e),c=o(l.length),s=i(a,c);if(t&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((t||s in l)&&l[s]===n)return t||s||0;return!t&&-1}}},function(t,e,n){var r=n(5),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=l(r),i=l(n(1)),a=l(n(158)),u=l(n(157));function l(t){return t&&t.__esModule?t:{default:t}}var c=function(t){return o.default.createElement(r.Fragment,null,o.default.createElement(u.default,null),o.default.createElement("div",{className:"default-page-layout grid-container"},o.default.createElement(a.default,null,t.content)))};c.propTypes={title:i.default.string,content:i.default.element},c.defaultProps={title:"Page Title",content:function(){return o.default.createElement("h3",null,"Page Content")}},e.default=c},function(t,e,n){"use strict";e.__esModule=!0;var r,o=n(3),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(){var t=null,e=[];return{setPrompt:function(e){return(0,i.default)(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,n,r,o){if(null!=t){var a="function"==typeof t?t(e,n):t;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(t){var n=!0,r=function(){n&&t.apply(void 0,arguments)};return e.push(r),function(){n=!1,e=e.filter(function(t){return t!==r})}},notifyListeners:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach(function(t){return t.apply(void 0,n)})}}}},function(t,e,n){"use strict";e.__esModule=!0,e.locationsAreEqual=e.createLocation=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=u(n(101)),i=u(n(100)),a=n(31);function u(t){return t&&t.__esModule?t:{default:t}}e.createLocation=function(t,e,n,i){var u=void 0;"string"==typeof t?(u=(0,a.parsePath)(t)).state=e:(void 0===(u=r({},t)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==e&&void 0===u.state&&(u.state=e));try{u.pathname=decodeURI(u.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(u.key=n),i?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,i.pathname)):u.pathname=i.pathname:u.pathname||(u.pathname="/"),u},e.locationsAreEqual=function(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&(0,i.default)(t.state,e.state)}},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,l){if(r(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,i,a,u,l],f=0;(c=new Error(e.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){var r=n(5).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(5),o=n(11),i=n(44),a=n(57),u=n(17),l=n(36),c=n(6),s=n(38),f=n(27),p=n(9),d=n(114),h=n(40).f,v=n(10).f,m=n(79),y=n(50),g="prototype",b="Wrong index!",w=r.ArrayBuffer,x=r.DataView,E=r.Math,_=r.RangeError,S=r.Infinity,P=w,C=E.abs,k=E.pow,T=E.floor,O=E.log,M=E.LN2,N=o?"_b":"buffer",R=o?"_l":"byteLength",I=o?"_o":"byteOffset";function j(t,e,n){var r,o,i,a=new Array(n),u=8*n-e-1,l=(1<<u)-1,c=l>>1,s=23===e?k(2,-24)-k(2,-77):0,f=0,p=t<0||0===t&&1/t<0?1:0;for((t=C(t))!=t||t===S?(o=t!=t?1:0,r=l):(r=T(O(t)/M),t*(i=k(2,-r))<1&&(r--,i*=2),(t+=r+c>=1?s/i:s*k(2,1-c))*i>=2&&(r++,i/=2),r+c>=l?(o=0,r=l):r+c>=1?(o=(t*i-1)*k(2,e),r+=c):(o=t*k(2,c-1)*k(2,e),r=0));e>=8;a[f++]=255&o,o/=256,e-=8);for(r=r<<e|o,u+=e;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*p,a}function F(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,a=i>>1,u=o-7,l=n-1,c=t[l--],s=127&c;for(c>>=7;u>0;s=256*s+t[l],l--,u-=8);for(r=s&(1<<-u)-1,s>>=-u,u+=e;u>0;r=256*r+t[l],l--,u-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:c?-S:S;r+=k(2,e),s-=a}return(c?-1:1)*r*k(2,s-e)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function A(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function z(t){return j(t,52,8)}function H(t){return j(t,23,4)}function W(t,e,n){v(t[g],e,{get:function(){return this[n]}})}function B(t,e,n,r){var o=d(+n);if(o+e>t[R])throw _(b);var i=t[N]._b,a=o+t[I],u=i.slice(a,a+e);return r?u:u.reverse()}function V(t,e,n,r,o,i){var a=d(+n);if(a+e>t[R])throw _(b);for(var u=t[N]._b,l=a+t[I],c=r(+o),s=0;s<e;s++)u[l+s]=c[i?s:e-s-1]}if(a.ABV){if(!c(function(){w(1)})||!c(function(){new w(-1)})||c(function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name})){for(var q,K=(w=function(t){return s(this,w),new P(d(t))})[g]=P[g],$=h(P),G=0;$.length>G;)(q=$[G++])in w||u(w,q,P[q]);i||(K.constructor=w)}var Y=new x(new w(2)),Q=x[g].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||l(x[g],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else w=function(t){s(this,w,"ArrayBuffer");var e=d(t);this._b=m.call(new Array(e),0),this[R]=e},x=function(t,e,n){s(this,x,"DataView"),s(t,w,"DataView");var r=t[R],o=f(e);if(o<0||o>r)throw _("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw _("Wrong length!");this[N]=t,this[I]=o,this[R]=n},o&&(W(w,"byteLength","_l"),W(x,"buffer","_b"),W(x,"byteLength","_l"),W(x,"byteOffset","_o")),l(x[g],{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var e=B(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=B(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return L(B(this,4,t,arguments[1]))},getUint32:function(t){return L(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return F(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return F(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){V(this,1,t,A,e)},setUint8:function(t,e){V(this,1,t,A,e)},setInt16:function(t,e){V(this,2,t,D,e,arguments[2])},setUint16:function(t,e){V(this,2,t,D,e,arguments[2])},setInt32:function(t,e){V(this,4,t,U,e,arguments[2])},setUint32:function(t,e){V(this,4,t,U,e,arguments[2])},setFloat32:function(t,e){V(this,4,t,H,e,arguments[2])},setFloat64:function(t,e){V(this,8,t,z,e,arguments[2])}});y(w,"ArrayBuffer"),y(x,"DataView"),u(x[g],a.VIEW,!0),e.ArrayBuffer=w,e.DataView=x},function(t,e,n){"use strict";var r=n(14);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){var r=n(5),o=n(77).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,l="process"==n(23)(a);t.exports=function(){var t,e,n,c=function(){var r,o;for(l&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(l)n=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve();n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r,o,i,a=n(24),u=n(133),l=n(95),c=n(99),s=n(5),f=s.process,p=s.setImmediate,d=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,m=0,y={},g=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){g.call(t.data)};p&&d||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++m]=function(){u("function"==typeof t?t:Function(t),e)},r(m),m},d=function(t){delete y[t]},"process"==n(23)(f)?r=function(t){f.nextTick(a(g,t,1))}:v&&v.now?r=function(t){v.now(a(g,t,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(t){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),g.call(t)}}:function(t){setTimeout(a(g,t,1),0)}),t.exports={set:p,clear:d}},function(t,e,n){"use strict";var r=n(34),o=n(123),i=n(48),a=n(20);t.exports=n(87)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r=n(13),o=n(42),i=n(9);t.exports=function(t){for(var e=r(this),n=i(e.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>u;)e[u++]=t;return e}},function(t,e,n){var r=n(284);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(51),o=n(8)("iterator"),i=n(48);t.exports=n(30).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(10),o=n(46);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(48),o=n(8)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(8)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(63),o=n(28);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){"use strict";var r=n(41),o=n(46),i=n(50),a={};n(17)(a,n(8)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(44),o=n(0),i=n(16),a=n(17),u=n(48),l=n(86),c=n(50),s=n(18),f=n(8)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,h,v,m,y){l(n,e,h);var g,b,w,x=function(t){if(!p&&t in P)return P[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},E=e+" Iterator",_="values"==v,S=!1,P=t.prototype,C=P[f]||P["@@iterator"]||v&&P[v],k=C||x(v),T=v?_?x("entries"):k:void 0,O="Array"==e&&P.entries||C;if(O&&(w=s(O.call(new t)))!==Object.prototype&&w.next&&(c(w,E,!0),r||"function"==typeof w[f]||a(w,f,d)),_&&C&&"values"!==C.name&&(S=!0,k=function(){return C.call(this)}),r&&!y||!p&&!S&&P[f]||a(P,f,k),u[e]=k,u[E]=d,v)if(g={values:_?k:x("values"),keys:m?k:x("keys"),entries:T},y)for(b in g)b in P||i(P,b,g[b]);else o(o.P+o.F*(p||S),e,g);return g}},function(t,e,n){var r=n(27),o=n(28);t.exports=function(t){return function(e,n){var i,a,u=String(o(e)),l=r(n),c=u.length;return l<0||l>=c?t?"":void 0:(i=u.charCodeAt(l))<55296||i>56319||l+1===c||(a=u.charCodeAt(l+1))<56320||a>57343?t?u.charAt(l):i:t?u.slice(l,l+2):a-56320+(i-55296<<10)+65536}}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){"use strict";var r=n(27),o=n(28);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e,n){var r=n(7),o=n(94).set;t.exports=function(t,e,n){var i,a=e.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(7),o=n(4),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(24)(Function.call,n(19).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(5).document;t.exports=r&&r.documentElement},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(67)("keys"),o=n(45);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(5),o=n(30),i=n(44),a=n(139),u=n(10).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(7),o=n(5).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){"use strict";n.r(e);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function t(e,n){if(e===n)return!0;if(null==e||null==n)return!1;if(Array.isArray(e))return Array.isArray(n)&&e.length===n.length&&e.every(function(e,r){return t(e,n[r])});var o=void 0===e?"undefined":r(e);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=e.valueOf(),a=n.valueOf();if(i!==e||a!==n)return t(i,a);var u=Object.keys(e),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return t(e[r],n[r])})}return!1}},function(t,e,n){"use strict";function r(t){return"/"===t.charAt(0)}function o(t,e){for(var n=e,r=n+1,o=t.length;r<o;n+=1,r+=1)t[n]=t[r];t.pop()}n.r(e),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t&&t.split("/")||[],i=e&&e.split("/")||[],a=t&&r(t),u=e&&r(e),l=a||u;if(t&&r(t)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var c=void 0;if(i.length){var s=i[i.length-1];c="."===s||".."===s||""===s}else c=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h}},function(t,e,n){"use strict";n.r(e);var r=n(3),o=n.n(r),i=n(2),a=n.n(i),u=n(1),l=n.n(u),c=n(146),s=n.n(c),f=n(12),p=n.n(f),d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var v=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=h(this,t.call.apply(t,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},e.prototype.computeMatch=function(t){return{path:"/",url:"/",params:{},isExact:"/"===t}},e.prototype.componentWillMount=function(){var t=this,e=this.props,n=e.children,r=e.history;p()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){t.setState({match:t.computeMatch(r.location.pathname)})})},e.prototype.componentWillReceiveProps=function(t){o()(this.props.history===t.history,"You cannot change <Router history>")},e.prototype.componentWillUnmount=function(){this.unlisten()},e.prototype.render=function(){var t=this.props.children;return t?a.a.Children.only(t):null},e}(a.a.Component);v.propTypes={history:l.a.object.isRequired,children:l.a.node},v.contextTypes={router:l.a.object},v.childContextTypes={router:l.a.object.isRequired};var m=v,y=m;function g(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var b=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=g(this,t.call.apply(t,[this].concat(i))),r.history=s()(r.props),g(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},e.prototype.render=function(){return a.a.createElement(y,{history:this.history,children:this.props.children})},e}(a.a.Component);b.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var w=b,x=n(145),E=n.n(x);function _(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var S=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=_(this,t.call.apply(t,[this].concat(i))),r.history=E()(r.props),_(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},e.prototype.render=function(){return a.a.createElement(y,{history:this.history,children:this.props.children})},e}(a.a.Component);S.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var P=S,C=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function k(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var T=function(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)},O=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=k(this,t.call.apply(t,[this].concat(i))),r.handleClick=function(t){if(r.props.onClick&&r.props.onClick(t),!t.defaultPrevented&&0===t.button&&!r.props.target&&!T(t)){t.preventDefault();var e=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?e.replace(i):e.push(i)}},k(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.render=function(){var t=this.props,e=(t.replace,t.to),n=t.innerRef,r=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof e?{pathname:e}:e);return a.a.createElement("a",C({},r,{onClick:this.handleClick,href:o,ref:n}))},e}(a.a.Component);O.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},O.defaultProps={replace:!1},O.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var M=O,N=n(144),R=n.n(N);function I(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var j=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=I(this,t.call.apply(t,[this].concat(i))),r.history=R()(r.props),I(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},e.prototype.render=function(){return a.a.createElement(m,{history:this.history,children:this.props.children})},e}(a.a.Component);j.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var F=j,L=n(143),A=n.n(L),D={},U=0,z=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof e&&(e={path:e});var n=e,r=n.path,o=void 0===r?"/":r,i=n.exact,a=void 0!==i&&i,u=n.strict,l=void 0!==u&&u,c=n.sensitive,s=function(t,e){var n=""+e.end+e.strict+e.sensitive,r=D[n]||(D[n]={});if(r[t])return r[t];var o=[],i={re:A()(t,o,e),keys:o};return U<1e4&&(r[t]=i,U++),i}(o,{end:a,strict:l,sensitive:void 0!==c&&c}),f=s.re,p=s.keys,d=f.exec(t);if(!d)return null;var h=d[0],v=d.slice(1),m=t===h;return a&&!m?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:m,params:p.reduce(function(t,e,n){return t[e.name]=v[n],t},{})}},H=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function W(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var B=function(t){return 0===a.a.Children.count(t)},V=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=W(this,t.call.apply(t,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},W(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getChildContext=function(){return{router:H({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},e.prototype.computeMatch=function(t,e){var n=t.computedMatch,r=t.location,o=t.path,i=t.strict,a=t.exact,u=t.sensitive;if(n)return n;p()(e,"You should not use <Route> or withRouter() outside a <Router>");var l=e.route,c=(r||l.location).pathname;return o?z(c,{path:o,strict:i,exact:a,sensitive:u}):l.match},e.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!B(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!B(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},e.prototype.componentWillReceiveProps=function(t,e){o()(!(t.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!t.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(t,e.router)})},e.prototype.render=function(){var t=this.state.match,e=this.props,n=e.children,r=e.component,o=e.render,i=this.context.router,u=i.history,l=i.route,c=i.staticContext,s={match:t,location:this.props.location||l.location,history:u,staticContext:c};return r?t?a.a.createElement(r,s):null:o?t?o(s):null:n?"function"==typeof n?n(s):B(n)?null:a.a.Children.only(n):null},e}(a.a.Component);V.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},V.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},V.childContextTypes={router:l.a.object.isRequired};var q=V,K=q,$=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var Y=function(t){var e=t.to,n=t.exact,r=t.strict,o=t.location,i=t.activeClassName,u=t.className,l=t.activeStyle,c=t.style,s=t.isActive,f=t.ariaCurrent,p=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return a.a.createElement(K,{path:"object"===(void 0===e?"undefined":G(e))?e.pathname:e,exact:n,strict:r,location:o,children:function(t){var n=t.location,r=t.match,o=!!(s?s(r,n):r);return a.a.createElement(M,$({to:e,className:o?[u,i].filter(function(t){return t}).join(" "):u,style:o?$({},c,l):c,"aria-current":o&&f},p))}})};Y.propTypes={to:M.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},Y.defaultProps={activeClassName:"active",ariaCurrent:"true"};var Q=Y;var X=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.enable=function(t){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(t)},e.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},e.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},e.prototype.componentWillReceiveProps=function(t){t.when?this.props.when&&this.props.message===t.message||this.enable(t.message):this.disable()},e.prototype.componentWillUnmount=function(){this.disable()},e.prototype.render=function(){return null},e}(a.a.Component);X.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},X.defaultProps={when:!0},X.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var J=X,Z=n(101),tt=n(100),et=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},nt=function(t,e,n,r){var o=void 0;"string"==typeof t?(o=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}}(t)).state=e:(void 0===(o=et({},t)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==e&&void 0===o.state&&(o.state=e));try{o.pathname=decodeURI(o.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},rt=function(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&Object(tt.default)(t.state,e.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var ot=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},e.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},e.prototype.componentDidMount=function(){this.isStatic()||this.perform()},e.prototype.componentDidUpdate=function(t){var e=nt(t.to),n=nt(this.props.to);rt(e,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},e.prototype.perform=function(){var t=this.context.router.history,e=this.props,n=e.push,r=e.to;n?t.push(r):t.replace(r)},e.prototype.render=function(){return null},e}(a.a.Component);ot.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},ot.defaultProps={push:!1},ot.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var it=ot,at=n(31),ut=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function lt(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var ct=function(t,e){return t?ut({},e,{pathname:Object(at.addLeadingSlash)(t)+e.pathname}):e},st=function(t){return"string"==typeof t?Object(at.parsePath)(t):(n=(e=t).pathname,r=void 0===n?"/":n,o=e.search,i=void 0===o?"":o,a=e.hash,u=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===u?"":u});var e,n,r,o,i,a,u},ft=function(t){return"string"==typeof t?t:Object(at.createPath)(t)},pt=function(t){return function(){p()(!1,"You cannot %s with <StaticRouter>",t)}},dt=function(){},ht=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=lt(this,t.call.apply(t,[this].concat(i))),r.createHref=function(t){return Object(at.addLeadingSlash)(r.props.basename+ft(t))},r.handlePush=function(t){var e=r.props,n=e.basename,o=e.context;o.action="PUSH",o.location=ct(n,st(t)),o.url=ft(o.location)},r.handleReplace=function(t){var e=r.props,n=e.basename,o=e.context;o.action="REPLACE",o.location=ct(n,st(t)),o.url=ft(o.location)},r.handleListen=function(){return dt},r.handleBlock=function(){return dt},lt(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},e.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},e.prototype.render=function(){var t=this.props,e=t.basename,n=(t.context,t.location),r=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(t,e){if(!t)return e;var n=Object(at.addLeadingSlash)(t);return 0!==e.pathname.indexOf(n)?e:ut({},e,{pathname:e.pathname.substr(n.length)})}(e,st(n)),push:this.handlePush,replace:this.handleReplace,go:pt("go"),goBack:pt("goBack"),goForward:pt("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(m,ut({},r,{history:o}))},e}(a.a.Component);ht.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},ht.defaultProps={basename:"",location:"/"},ht.childContextTypes={router:l.a.object.isRequired};var vt=ht;var mt=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},e.prototype.componentWillReceiveProps=function(t){o()(!(t.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!t.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},e.prototype.render=function(){var t=this.context.router.route,e=this.props.children,n=this.props.location||t.location,r=void 0,o=void 0;return a.a.Children.forEach(e,function(e){if(a.a.isValidElement(e)){var i=e.props,u=i.path,l=i.exact,c=i.strict,s=i.sensitive,f=i.from,p=u||f;null==r&&(o=e,r=p?z(n.pathname,{path:p,exact:l,strict:c,sensitive:s}):t.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},e}(a.a.Component);mt.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},mt.propTypes={children:l.a.node,location:l.a.object};var yt=mt,gt=z,bt=n(142),wt=n.n(bt),xt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var Et=function(t){var e=function(e){var n=e.wrappedComponentRef,r=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(e,["wrappedComponentRef"]);return a.a.createElement(q,{render:function(e){return a.a.createElement(t,xt({},r,e,{ref:n}))}})};return e.displayName="withRouter("+(t.displayName||t.name)+")",e.WrappedComponent=t,e.propTypes={wrappedComponentRef:l.a.func},wt()(e,t)};n.d(e,"BrowserRouter",function(){return w}),n.d(e,"HashRouter",function(){return P}),n.d(e,"Link",function(){return M}),n.d(e,"MemoryRouter",function(){return F}),n.d(e,"NavLink",function(){return Q}),n.d(e,"Prompt",function(){return J}),n.d(e,"Redirect",function(){return it}),n.d(e,"Route",function(){return K}),n.d(e,"Router",function(){return y}),n.d(e,"StaticRouter",function(){return vt}),n.d(e,"Switch",function(){return yt}),n.d(e,"matchPath",function(){return gt}),n.d(e,"withRouter",function(){return Et})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(2),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){t.styles;var e=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(t,["styles"]);return a.default.createElement("svg",o({width:"64",height:"64",viewBox:"0 0 64 64",xmlns:"http://www.w3.org/2000/svg"},e),a.default.createElement("title",null,"Artboard Copy 2"),a.default.createElement("g",{fill:"none",fillRule:"evenodd"},a.default.createElement("circle",{stroke:"#004864",strokeWidth:"4",cx:"32",cy:"32",r:"30"}),a.default.createElement("path",{d:"M35.17 22.896l-4.3 24.532c-.36 2.1-.99 3.6-1.89 4.5-.9.901-2.22 1.351-3.961 1.351-1.53 0-3.203-.187-5.019-.562l.788-3.489c1.485.33 2.618.495 3.398.495.885 0 1.527-.24 1.924-.72.398-.48.71-1.388.934-2.723l4.029-23.384h-4.524l.495-3.128h4.57l.562-3.039c.345-2.175.878-3.743 1.598-4.703C34.914 10.676 36.55 10 38.68 10c.6 0 1.485.15 2.656.45l1.62.383.405.09-.765 3.466c-1.62-.375-2.776-.563-3.466-.563-.945 0-1.609.236-1.992.709-.382.473-.701 1.437-.956 2.892l-.405 2.34h4.546l-.54 3.129h-4.614z",fill:"#004864"})))}},function(t,e,n){"use strict";e.__esModule=!0;e.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),e.addEventListener=function(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)},e.removeEventListener=function(t,e,n){return t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent("on"+e,n)},e.getConfirmation=function(t,e){return e(window.confirm(t))},e.supportsHistory=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},e.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},e.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},e.isExtraneousPopstateEvent=function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){var r=n(37);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e,n){var r=n(51),o=n(108);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(43),o=n(20),i=n(52).f;t.exports=function(t){return function(e){for(var n,a=o(e),u=r(a),l=u.length,c=0,s=[];l>c;)i.call(a,n=u[c++])&&s.push(t?[n,a[n]]:a[n]);return s}}},function(t,e,n){var r=n(9),o=n(91),i=n(28);t.exports=function(t,e,n,a){var u=String(i(t)),l=u.length,c=void 0===n?" ":String(n),s=r(e);if(s<=l||""==c)return u;var f=s-l,p=o.call(c,Math.ceil(f/c.length));return p.length>f&&(p=p.slice(0,f)),a?p+u:u+p}},function(t,e,n){"use strict";var r=n(64),o=n(7),i=n(9),a=n(24),u=n(8)("isConcatSpreadable");t.exports=function t(e,n,l,c,s,f,p,d){for(var h,v,m=s,y=0,g=!!p&&a(p,d,3);y<c;){if(y in l){if(h=g?g(l[y],y,n):l[y],v=!1,o(h)&&(v=void 0!==(v=h[u])?!!v:r(h)),v&&f>0)m=t(e,n,h,i(h.length),m,f-1)-1;else{if(m>=9007199254740991)throw TypeError();e[m]=h}m++}y++}return m}},function(t,e,n){var r=n(40),o=n(65),i=n(4),a=n(5).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(27),o=n(9);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){"use strict";var r=n(36),o=n(35).getWeak,i=n(4),a=n(7),u=n(38),l=n(37),c=n(25),s=n(21),f=n(47),p=c(5),d=c(6),h=0,v=function(t){return t._l||(t._l=new m)},m=function(){this.a=[]},y=function(t,e){return p(t.a,function(t){return t[0]===e})};m.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=d(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var c=t(function(t,r){u(t,c,e,"_i"),t._t=e,t._i=h++,t._l=void 0,void 0!=r&&l(r,n,t[i],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).delete(t):n&&s(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).has(t):n&&s(n,this._i)}}),c},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){"use strict";var r,o=n(25)(0),i=n(16),a=n(35),u=n(135),l=n(115),c=n(7),s=n(6),f=n(47),p=a.getWeak,d=Object.isExtensible,h=l.ufstore,v={},m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(c(t)){var e=p(t);return!0===e?h(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return l.def(f(this,"WeakMap"),t,e)}},g=t.exports=n(58)("WeakMap",m,y,l,!0,!0);s(function(){return 7!=(new g).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=l.getConstructor(m,"WeakMap")).prototype,y),a.NEED=!0,o(["delete","has","get","set"],function(t){var e=g.prototype,n=e[t];i(e,t,function(e,o){if(c(e)&&!d(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)})}))},function(t,e,n){"use strict";var r=n(118),o=n(47);t.exports=n(58)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r=n(10).f,o=n(41),i=n(36),a=n(24),u=n(38),l=n(37),c=n(87),s=n(123),f=n(39),p=n(11),d=n(35).fastKey,h=n(47),v=p?"_s":"size",m=function(t,e){var n,r=d(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var s=t(function(t,r){u(t,s,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&l(r,n,t[c],t)});return i(s.prototype,{clear:function(){for(var t=h(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=h(this,e),r=m(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){h(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!m(h(this,e),t)}}),p&&r(s.prototype,"size",{get:function(){return h(this,e)[v]}}),s},def:function(t,e,n){var r,o,i=m(t,e);return i?i.v=n:(t._l=i={i:o=d(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:m,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=h(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?s(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(118),o=n(47);t.exports=n(58)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){var r=n(4),o=n(7),i=n(75);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){n(11)&&"g"!=/./g.flags&&n(10).f(RegExp.prototype,"flags",{configurable:!0,get:n(61)})},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(13),o=n(42),i=n(9);t.exports=[].copyWithin||function(t,e){var n=r(this),a=i(n.length),u=o(t,a),l=o(e,a),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?a:o(c,a))-l,a-u),f=1;for(l<u&&u<l+s&&(f=-1,l+=s-1,u+=s-1);s-- >0;)l in n?n[u]=n[l]:delete n[u],u+=f,l+=f;return n}},function(t,e,n){var r=n(14),o=n(13),i=n(53),a=n(9);t.exports=function(t,e,n,u,l){r(e);var c=o(t),s=i(c),f=a(c.length),p=l?f-1:0,d=l?-1:1;if(n<2)for(;;){if(p in s){u=s[p],p+=d;break}if(p+=d,l?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;l?p>=0:f>p;p+=d)p in s&&(u=e(u,s[p],p,c));return u}},function(t,e,n){var r=n(4);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(90),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),l=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),c=r(t);return o<l?c*(o/l/a+1/i-1/i)*l*a:(n=(e=(1+a/i)*o)-(e-o))>u||n!=n?c*(1/0):c*n}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(7),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e,n){var r=n(23);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(5).parseFloat,o=n(49).trim;t.exports=1/r(n(93)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(5).parseInt,o=n(49).trim,i=n(93),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){"use strict";var r=n(14),o=n(7),i=n(133),a=[].slice,u={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),l=function(){var r=n.concat(a.call(arguments));return this instanceof l?function(t,e,n){if(!(e in u)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";u[e]=Function("F,a","return new F("+r.join(",")+")")}return u[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(l.prototype=e.prototype),l}},function(t,e,n){"use strict";var r=n(43),o=n(65),i=n(52),a=n(13),u=n(53),l=Object.assign;t.exports=!l||n(6)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=l({},t)[n]||Object.keys(l({},e)).join("")!=r})?function(t,e){for(var n=a(t),l=arguments.length,c=1,s=o.f,f=i.f;l>c;)for(var p,d=u(arguments[c++]),h=s?r(d).concat(s(d)):r(d),v=h.length,m=0;v>m;)f.call(d,p=h[m++])&&(n[p]=d[p]);return n}:l},function(t,e,n){var r=n(20),o=n(40).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(10),o=n(4),i=n(43);t.exports=n(11)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),u=a.length,l=0;u>l;)r.f(t,n=a[l++],e[n]);return t}},function(t,e,n){var r=n(21),o=n(20),i=n(66)(!1),a=n(97)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),l=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;e.length>l;)r(u,n=e[l++])&&(~i(c,n)||c.push(n));return c}},function(t,e,n){e.f=n(8)},function(t,e,n){t.exports=!n(11)&&!n(6)(function(){return 7!=Object.defineProperty(n(99)("div"),"a",{get:function(){return 7}}).a})},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){t.exports=function(){"use strict";var t={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function l(c,s,f){if("string"!=typeof s){if(u){var p=a(s);p&&p!==u&&l(c,p,f)}var d=r(s);o&&(d=d.concat(o(s)));for(var h=0;h<d.length;++h){var v=d[h];if(!(t[v]||e[v]||f&&f[v])){var m=i(s,v);try{n(c,v,m)}catch(t){}}}return c}return c}}()},function(t,e,n){var r=n(160);t.exports=d,t.exports.parse=i,t.exports.compile=function(t,e){return u(i(t,e))},t.exports.tokensToFunction=u,t.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(t,e){for(var n,r=[],i=0,a=0,u="",s=e&&e.delimiter||"/";null!=(n=o.exec(t));){var f=n[0],p=n[1],d=n.index;if(u+=t.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=t[a],v=n[2],m=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===b||"*"===b,_="?"===b||"*"===b,S=n[2]||s,P=y||g;r.push({name:m||i++,prefix:v||"",delimiter:S,optional:_,repeat:E,partial:x,asterisk:!!w,pattern:P?c(P):w?".*":"[^"+l(S)+"]+?"})}}return a<t.length&&(u+=t.substr(a)),u&&r.push(u),r}function a(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function u(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"==typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<t.length;c++){var s=t[c];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!e[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}):l(p),!e[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function s(t,e){return t.keys=e,t}function f(t){return t.sensitive?"":"i"}function p(t,e,n){r(e)||(n=e||n,e=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<t.length;u++){var c=t[u];if("string"==typeof c)a+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";e.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),e)}function d(t,e,n){return r(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(t,e)}(t,e):r(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(d(t[o],e,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),e)}(t,e,n):function(t,e,n){return p(i(t,n),e,n)}(t,e,n)}},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=c(n(3)),a=n(31),u=n(70),l=c(n(69));function c(t){return t&&t.__esModule?t:{default:t}}var s=function(t,e,n){return Math.min(Math.max(t,e),n)};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.getUserConfirmation,n=t.initialEntries,c=void 0===n?["/"]:n,f=t.initialIndex,p=void 0===f?0:f,d=t.keyLength,h=void 0===d?6:d,v=(0,l.default)(),m=function(t){o(E,t),E.length=E.entries.length,v.notifyListeners(E.location,E.action)},y=function(){return Math.random().toString(36).substr(2,h)},g=s(p,0,c.length-1),b=c.map(function(t){return"string"==typeof t?(0,u.createLocation)(t,void 0,y()):(0,u.createLocation)(t,void 0,t.key||y())}),w=a.createPath,x=function(t){var n=s(E.index+t,0,E.entries.length-1),r=E.entries[n];v.confirmTransitionTo(r,"POP",e,function(t){t?m({action:"POP",location:r,index:n}):m()})},E={length:b.length,action:"POP",location:b[g],index:g,entries:b,createHref:w,push:function(t,n){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(t,n,y(),E.location);v.confirmTransitionTo(o,"PUSH",e,function(t){if(t){var e=E.index+1,n=E.entries.slice(0);n.length>e?n.splice(e,n.length-e,o):n.push(o),m({action:"PUSH",location:o,index:e,entries:n})}})},replace:function(t,n){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(t,n,y(),E.location);v.confirmTransitionTo(o,"REPLACE",e,function(t){t&&(E.entries[E.index]=o,m({action:"REPLACE",location:o}))})},go:x,goBack:function(){return x(-1)},goForward:function(){return x(1)},canGo:function(t){var e=E.index+t;return e>=0&&e<E.entries.length},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return v.setPrompt(t)},listen:function(t){return v.appendListener(t)}};return E}},function(t,e,n){"use strict";e.__esModule=!0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=s(n(3)),i=s(n(12)),a=n(70),u=n(31),l=s(n(69)),c=n(104);function s(t){return t&&t.__esModule?t:{default:t}}var f={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+(0,u.stripLeadingSlash)(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},p=function(){var t=window.location.href,e=t.indexOf("#");return-1===e?"":t.substring(e+1)},d=function(t){var e=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,e>=0?e:0)+"#"+t)};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var e=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),s=t.getUserConfirmation,h=void 0===s?c.getConfirmation:s,v=t.hashType,m=void 0===v?"slash":v,y=t.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(t.basename)):"",g=f[m],b=g.encodePath,w=g.decodePath,x=function(){var t=w(p());return(0,o.default)(!y||(0,u.hasBasename)(t,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+t+'" to begin with "'+y+'".'),y&&(t=(0,u.stripBasename)(t,y)),(0,a.createLocation)(t)},E=(0,l.default)(),_=function(t){r(A,t),A.length=e.length,E.notifyListeners(A.location,A.action)},S=!1,P=null,C=function(){var t=p(),e=b(t);if(t!==e)d(e);else{var n=x(),r=A.location;if(!S&&(0,a.locationsAreEqual)(r,n))return;if(P===(0,u.createPath)(n))return;P=null,k(n)}},k=function(t){S?(S=!1,_()):E.confirmTransitionTo(t,"POP",h,function(e){e?_({action:"POP",location:t}):T(t)})},T=function(t){var e=A.location,n=R.lastIndexOf((0,u.createPath)(e));-1===n&&(n=0);var r=R.lastIndexOf((0,u.createPath)(t));-1===r&&(r=0);var o=n-r;o&&(S=!0,I(o))},O=p(),M=b(O);O!==M&&d(M);var N=x(),R=[(0,u.createPath)(N)],I=function(t){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),e.go(t)},j=0,F=function(t){1===(j+=t)?(0,c.addEventListener)(window,"hashchange",C):0===j&&(0,c.removeEventListener)(window,"hashchange",C)},L=!1,A={length:e.length,action:"POP",location:N,createHref:function(t){return"#"+b(y+(0,u.createPath)(t))},push:function(t,e){(0,o.default)(void 0===e,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(t,void 0,void 0,A.location);E.confirmTransitionTo(n,"PUSH",h,function(t){if(t){var e=(0,u.createPath)(n),r=b(y+e);if(p()!==r){P=e,function(t){window.location.hash=t}(r);var i=R.lastIndexOf((0,u.createPath)(A.location)),a=R.slice(0,-1===i?0:i+1);a.push(e),R=a,_({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),_()}})},replace:function(t,e){(0,o.default)(void 0===e,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(t,void 0,void 0,A.location);E.confirmTransitionTo(n,"REPLACE",h,function(t){if(t){var e=(0,u.createPath)(n),r=b(y+e);p()!==r&&(P=e,d(r));var o=R.indexOf((0,u.createPath)(A.location));-1!==o&&(R[o]=e),_({action:"REPLACE",location:n})}})},go:I,goBack:function(){return I(-1)},goForward:function(){return I(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=E.setPrompt(t);return L||(F(1),L=!0),function(){return L&&(L=!1,F(-1)),e()}},listen:function(t){var e=E.appendListener(t);return F(1),function(){F(-1),e()}}};return A}},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=f(n(3)),a=f(n(12)),u=n(70),l=n(31),c=f(n(69)),s=n(104);function f(t){return t&&t.__esModule?t:{default:t}}var p=function(){try{return window.history.state||{}}catch(t){return{}}};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(s.canUseDOM,"Browser history needs a DOM");var e=window.history,n=(0,s.supportsHistory)(),f=!(0,s.supportsPopStateOnHashChange)(),d=t.forceRefresh,h=void 0!==d&&d,v=t.getUserConfirmation,m=void 0===v?s.getConfirmation:v,y=t.keyLength,g=void 0===y?6:y,b=t.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(t.basename)):"",w=function(t){var e=t||{},n=e.key,r=e.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!b||(0,l.hasBasename)(a,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+b+'".'),b&&(a=(0,l.stripBasename)(a,b)),(0,u.createLocation)(a,r,n)},x=function(){return Math.random().toString(36).substr(2,g)},E=(0,c.default)(),_=function(t){o(L,t),L.length=e.length,E.notifyListeners(L.location,L.action)},S=function(t){(0,s.isExtraneousPopstateEvent)(t)||k(w(t.state))},P=function(){k(w(p()))},C=!1,k=function(t){C?(C=!1,_()):E.confirmTransitionTo(t,"POP",m,function(e){e?_({action:"POP",location:t}):T(t)})},T=function(t){var e=L.location,n=M.indexOf(e.key);-1===n&&(n=0);var r=M.indexOf(t.key);-1===r&&(r=0);var o=n-r;o&&(C=!0,R(o))},O=w(p()),M=[O.key],N=function(t){return b+(0,l.createPath)(t)},R=function(t){e.go(t)},I=0,j=function(t){1===(I+=t)?((0,s.addEventListener)(window,"popstate",S),f&&(0,s.addEventListener)(window,"hashchange",P)):0===I&&((0,s.removeEventListener)(window,"popstate",S),f&&(0,s.removeEventListener)(window,"hashchange",P))},F=!1,L={length:e.length,action:"POP",location:O,createHref:N,push:function(t,o){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(t,o,x(),L.location);E.confirmTransitionTo(a,"PUSH",m,function(t){if(t){var r=N(a),o=a.key,u=a.state;if(n)if(e.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var l=M.indexOf(L.location.key),c=M.slice(0,-1===l?0:l+1);c.push(a.key),M=c,_({action:"PUSH",location:a})}else(0,i.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(t,o){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(t,o,x(),L.location);E.confirmTransitionTo(a,"REPLACE",m,function(t){if(t){var r=N(a),o=a.key,u=a.state;if(n)if(e.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var l=M.indexOf(L.location.key);-1!==l&&(M[l]=a.key),_({action:"REPLACE",location:a})}else(0,i.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=E.setPrompt(t);return F||(j(1),F=!0),function(){return F&&(F=!1,j(-1)),e()}},listen:function(t){var e=E.appendListener(t);return j(1),function(){j(-1),e()}}};return L}},function(t,e,n){"use strict";var r,o,i=(r=regeneratorRuntime.mark(function t(e,n){var r,o,i,a,u;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!((o=(r=27)<e*n?r%n:n)<1)){t.next=4;break}return t.abrupt("return",null);case 4:return i=Array(o).fill(null).map(function(t,r){return{a:(e-1)*n+r+1,b:e+2*r}}),a={total:r,items:i},u=new Promise(function(t){setTimeout(function(){return t(a)},1e3)}),t.abrupt("return",u);case 8:case"end":return t.stop()}},t,this)}),o=function(){var t=r.apply(this,arguments);return new Promise(function(e,n){return function r(o,i){try{var a=t[o](i),u=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});e(u)}("next")})},function(t,e){return o.apply(this,arguments)});t.exports={fetchPage:i}},function(t,e,n){"use strict";var r,o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(2),u=(r=a)&&r.__esModule?r:{default:r};var l=function(){return null},c=function(){return null},s=function(){return null},f=function(){return null},p=function(){return null},d=function(){return null},h=function(){return null},v=function(){return null},m=function(){return null},y=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));g.call(n);var r=t.loader;return"undefined"!=typeof loader&&(n.loadingComponent=u.default.createElement(r,null)),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.Component),i(e,[{key:"componentWillMount",value:function(){var t=this;this.addPropsToState().then(function(){var e=t.state,n=e.currentPage,r=e.itemsPerPage;t.fetchPage(n,r)})}},{key:"componentDidMount",value:function(){this.prepareChildren()}},{key:"pageWillLoad",value:function(){var t=this,e=this.props.beforeLoad;this.setState({loading:!0},function(){"function"==typeof e&&e(),t.prepareChildren()})}},{key:"pageDidLoad",value:function(){var t=this,e=this.props.afterLoad;this.setState({loading:!1},function(){"function"==typeof e&&e(),t.prepareChildren()})}},{key:"addPropsToState",value:function(){var t,e=(t=regeneratorRuntime.mark(function t(){var e,n,r,o,i=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=this.props,n=e.currentPage,r=e.itemsPerPage,o={currentPage:parseInt(n),itemsPerPage:parseInt(r)},t.abrupt("return",new Promise(function(t){return i.setState(o,t)}));case 3:case"end":return t.stop()}},t,this)}),function(){var e=t.apply(this,arguments);return new Promise(function(t,n){return function r(o,i){try{var a=e[o](i),u=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});t(u)}("next")})});return function(){return e.apply(this,arguments)}}()},{key:"render",value:function(){return u.default.createElement(a.Fragment,null,this.innerComponents)}}]),e}(),g=function(){var t=this;this.state={currentPage:null,itemsPerPage:null,totalItems:null,items:null,loading:!1},this.innerComponents=null,this.loadingComponent=u.default.createElement("h3",null,"Loading..."),this.buttonsTemplate=function(t){return function(){return u.default.createElement("button",null,t.label)}},this.fetchPage=function(e,n){var r=t.props.fetchPage||function(){return[]};t.pageWillLoad(),r(e,n).then(function(n){t.setState({currentPage:parseInt(e),items:n.items,totalItems:n.total},t.pageDidLoad)})},this.prepareChildren=function(){var e=t.state.loading,n=t.props.empty||function(){return null};if(e)return t.innerComponents=t.loadingComponent,void t.forceUpdate();t.innerComponents=a.Children.map(t.props.children,function e(r){var i=r.props&&r.props.children,y=null,g=null;if("string"==typeof r)return r;if(void 0===i&&l===r.type&&s===r.type)return r;switch(r.type){case s:(y=r.props.template)&&(t.buttonsTemplate=y);case l:case s:return g=function(t){return u.default.createElement(a.Fragment,null,t.children)},(0,a.cloneElement)(u.default.createElement(g,null),o({},r.props,{children:a.Children.map(i,e)}));case c:var b=t.state.items;return y=r.props.template,g=null!==b&&0<b.length?b.map(function(t){return y(t)}):u.default.createElement(n,null);case f:return y=r.props.template||t.buttonsTemplate,t.generateSteps(y);case p:case d:case h:case v:return g=(y=r.props.template||t.buttonsTemplate)({label:void 0!==i?i:r.type.name,onClick:function(){switch(r.type.name){case"Next":return t.nextPage;case"Previous":return t.previousPage;case"First":return t.firstPage;case"Last":return t.lastPage}}()}),u.default.createElement(g,null);case m:var w=r.props.options;return y=r.props.template||t.buttonsTemplate,"string"==typeof w&&(w=w.split(",").map(function(t){return parseInt(t)})),t.generatePageSizeOptions(w,y);default:return(0,a.cloneElement)(r,o({},r.props,{children:a.Children.map(i,e)}))}}),t.forceUpdate()},this.generateSteps=function(e){var n=t.state,r=n.itemsPerPage,o=n.totalItems,i=n.currentPage;if("number"!=typeof o||0>o)return null;if("number"!=typeof r||0>r)return null;var a=parseInt(o/r)+1,l=null;return 0>a||isNaN(a)?null:Array(a).fill(null).map(function(n,r){return l=e({label:r+1,classes:r+1===i?"success":"",onClick:function(){return t.setPage(r+1)}}),u.default.createElement(l,null)})},this.setPage=function(e){var n=t.state.itemsPerPage;t.fetchPage(e,n)},this.nextPage=function(){var e=t.state,n=e.currentPage,r=e.itemsPerPage;if(e.totalItems<n*r)return!1;t.setPage(++n)},this.previousPage=function(){var e=t.state,n=e.currentPage,r=e.itemsPerPage;e.totalItems;if(0>=(n-1)*r)return!1;t.setPage(--n)},this.firstPage=function(){t.setPage(1)},this.lastPage=function(){var e=t.state,n=e.totalItems/e.itemsPerPage+1;t.setPage(n)},this.generatePageSizeOptions=function(e,n){var r=t.state.itemsPerPage,o=null;return(e=e||[5,10,25]).map(function(e,i){return o=n({label:e,classes:e===r?"success":"",onClick:function(){return t.setPageSize(e)}}),u.default.createElement(o,null)})},this.setPageSize=function(e){var n=t.state,r=n.currentPage,o=n.totalItems,i=o<r*e?parseInt(o/e+1):r;t.setState({itemsPerPage:parseInt(e)},function(){null!==i&&t.setPage(i),t.prepareChildren()})}};t.exports={Pagination:y,Page:l,Item:c,Pager:s,Steps:f,Next:p,Previous:d,First:h,Last:v,PageSizes:m}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(2)),o=a(n(148)),i=n(147);function a(t){return t&&t.__esModule?t:{default:t}}console.log(o.default);e.default=function(){return r.default.createElement(o.default.Pagination,{fetchPage:i.fetchPage,currentPage:"3",itemsPerPage:"5"},r.default.createElement("table",{className:"hover",styles:{margin:"10px"}},r.default.createElement("thead",null,r.default.createElement("tr",null,r.default.createElement("th",null,"Column A"),r.default.createElement("th",null,"Column B"))),r.default.createElement("tbody",null,r.default.createElement(o.default.Page,null,r.default.createElement(o.default.Item,{template:function(t){return r.default.createElement("tr",null,r.default.createElement("td",null,"A: ",t.a),r.default.createElement("td",null,"B: ",t.b))}})))),r.default.createElement(o.default.Pager,{template:function(t){return function(){return r.default.createElement("button",{className:"button "+t.classes,onClick:t.onClick},t.label)}}},r.default.createElement(o.default.Previous,null),r.default.createElement(o.default.Steps,null),r.default.createElement(o.default.Next,null)))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){if(t.name&&t.purpose&&t.function)return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(2)),o=a(n(1)),i=a(n(150));function a(t){return t&&t.__esModule?t:{default:t}}n(379);var u=function(t){return r.default.createElement("div",{className:"tile"},r.default.createElement("h3",{className:"tile__header"},t.title),r.default.createElement("p",{className:"tile__content"},t.description))};u.propTypes={title:o.default.string,description:o.default.string},u.defaultProps={title:"Tile title",description:"This is a short description of what the resource is/provides."},u.title="Tile",u.function="Provide a sneak peak and navigate to a searchable data section of the website.",u.purpose="Advertise a specific dataset of the website and provide searchable access to it.",e.default=(0,i.default)(u)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=o(n(151));o(n(149));function o(t){return t&&t.__esModule?t:{default:t}}var i=[{name:"Tile",component:r.default,function:"Provide a sneak peak and navigate to a searchable data section of the website.",purpose:"Advertise a specific dataset of the website and provide searchable access to it."}];e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=u(r),i=u(n(152)),a=u(n(68));function u(t){return t&&t.__esModule?t:{default:t}}var l=function(){return o.default.createElement(r.Fragment,null,i.default.map(function(t){return e=t,o.default.createElement("div",{key:e.name},o.default.createElement("h2",null,e.name),o.default.createElement("div",{className:"grid-x"},o.default.createElement("div",{className:"cell small-6 component-wrapper"},o.default.createElement(e.component,null)),o.default.createElement("div",{className:"cell small-6"},o.default.createElement("h5",null,"Purpose"),o.default.createElement("p",null,e.purpose),o.default.createElement("h5",null,"Function"),o.default.createElement("p",null,e.function))),o.default.createElement("hr",null));var e}))};e.default=function(){return o.default.createElement(a.default,{title:"Franklin - UI Components",content:o.default.createElement(l,null)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(){return i.default.createElement(o.Fragment,null,i.default.createElement("h1",null,"Colours"),i.default.createElement("div",null,i.default.createElement("h4",null,"Primary palette"),i.default.createElement("div",{className:"box-colour box-colour-dark-blue","data-name":"$colour-dark-blue"}),i.default.createElement("div",{className:"box-colour box-colour-uniprot-blue","data-name":"$colour-uniprot-blue"}),i.default.createElement("div",{className:"box-colour box-colour-medium-blue","data-name":"$colour-medium-blue"}),i.default.createElement("div",{className:"box-colour box-colour-light-blue","data-name":"$colour-light-blue"})),i.default.createElement("div",null,i.default.createElement("h4",null,"Grey palette"),i.default.createElement("div",{className:"box-colour box-colour-black","data-name":"$colour-black"}),i.default.createElement("div",{className:"box-colour box-colour-dark-grey","data-name":"$colour-dark-grey"}),i.default.createElement("div",{className:"box-colour box-colour-cool-grey","data-name":"$colour-cool-grey"}),i.default.createElement("div",{className:"box-colour box-colour-medium-grey","data-name":"$colour-medium-grey"}),i.default.createElement("div",{className:"box-colour box-colour-light-grey","data-name":"$colour-light-grey"}),i.default.createElement("div",{className:"box-colour box-colour-seashell-grey","data-name":"$colour-seashell-grey"})),i.default.createElement("div",null,i.default.createElement("h4",null,"Curation palette"),i.default.createElement("div",{className:"box-colour box-colour-reviewed","data-name":"$colour-reviewed"}),i.default.createElement("div",{className:"box-colour box-colour-unreviewed","data-name":"$colour-unreviewed"})),i.default.createElement("div",null,i.default.createElement("h4",null,"Namespace palette"),i.default.createElement("div",{className:"box-colour box-colour-uniref","data-name":"$colour-uniref"}),i.default.createElement("div",{className:"box-colour box-colour-uniparc","data-name":"$colour-uniparc"}),i.default.createElement("div",{className:"box-colour box-colour-proteomes","data-name":"$colour-proteomes"}),i.default.createElement("div",{className:"box-colour box-colour-supporting-data","data-name":"$colour-supporting-data"}),i.default.createElement("div",{className:"box-colour box-colour-help","data-name":"$colour-help"}),i.default.createElement("div",{className:"box-colour box-colour-annotation-systems","data-name":"$colour-annotation-systems"})))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(){return i.default.createElement(o.Fragment,null,i.default.createElement("h1",null,"Typography"),i.default.createElement("section",null,i.default.createElement("p",null,"The chosen type is a sans-serif, Lato, designed by Warsaw-based designer",i.default.createElement("a",{href:"http://www.lukaszdziedzic.eu/"},"Łukasz Dziedzic"),". We use 2 variants of the font, normal and bold:"),i.default.createElement("div",null,i.default.createElement("span",{className:"font-style font-style-normal"},i.default.createElement("span",{className:"font-style-title"},"Aa"),i.default.createElement("span",{className:"font-style-description"},"Normal")),i.default.createElement("span",{className:"font-style font-style-bold"},i.default.createElement("span",{className:"font-style-title"},"Aa"),i.default.createElement("span",{className:"font-style-description"},"Bold"))),i.default.createElement("div",null,"‌",i.default.createElement("p",null,"ABCDEFGHIJKLMNOPQRSTUVWXYZ",i.default.createElement("br",null),"a​‌b​‌c​‌d​‌e​‌f​‌g​‌h​‌i​‌j​‌k​‌l​‌m​‌n​‌o​‌p​‌q​‌r​‌s​‌t​‌u​‌v​‌w​‌x​‌y​‌z​‌",i.default.createElement("br",null),"1​‌2​‌3​‌4​‌5​‌6​‌7​‌8​‌9​‌0​‌")),i.default.createElement("hr",null)),i.default.createElement("section",null,i.default.createElement("h1",null,"Headers"),i.default.createElement("h1",null,"H1. This is a title"),i.default.createElement("h2",null,"H2. This is a title"),i.default.createElement("h3",null,"H3. This is a title"),i.default.createElement("h4",null,"H4. This is a title"),i.default.createElement("h5",null,"H5. This is a title"),i.default.createElement("h6",null,"H6. This is a title"),i.default.createElement("hr",null)),i.default.createElement("section",null,i.default.createElement("h1",null,"Paragraphs"),i.default.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",i.default.createElement("a",{href:"www.uniprot.org"},"Click me")),i.default.createElement("hr",null)),i.default.createElement("section",null,i.default.createElement("h1",null,"Lists"),i.default.createElement("h2",null,"Unordered"),i.default.createElement("ul",null,i.default.createElement("li",null,"Item 1"),i.default.createElement("li",null,"Item 2"),i.default.createElement("li",null,"Item 3"),i.default.createElement("li",null,"Item 4"),i.default.createElement("li",null,"Item 5")),i.default.createElement("h2",null,"Ordered"),i.default.createElement("ol",null,i.default.createElement("li",null,"Item 1"),i.default.createElement("li",null,"Item 2"),i.default.createElement("li",null,"Item 3"),i.default.createElement("li",null,"Item 4"),i.default.createElement("li",null,"Item 5")),i.default.createElement("h2",null,"Description list"),i.default.createElement("dl",null,i.default.createElement("dt",null,"Item 1"),i.default.createElement("dd",null,"Description 1 is about item 1"),i.default.createElement("dt",null,"Item 2"),i.default.createElement("dd",null,"Description 2 is about item 2"),i.default.createElement("dt",null,"Item 3"),i.default.createElement("dd",null,"Description 3 is about item 3")),i.default.createElement("h2",null,".no-bullet"),i.default.createElement("ul",{className:"no-bullet"},i.default.createElement("li",null,"Item 1"),i.default.createElement("li",null,"Item 2"),i.default.createElement("li",null,"Item 3"),i.default.createElement("li",null,"Item 4"),i.default.createElement("li",null,"Item 5")),i.default.createElement("hr",null)))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=l(r),i=l(n(68)),a=l(n(155)),u=l(n(154));function l(t){return t&&t.__esModule?t:{default:t}}var c=function(){return o.default.createElement(r.Fragment,null,o.default.createElement(u.default,null),o.default.createElement(a.default,null))};e.default=function(){return o.default.createElement(i.default,{title:"Home Page",content:o.default.createElement(c,null)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(2)),o=n(102),i=a(n(103));function a(t){return t&&t.__esModule?t:{default:t}}n(381);e.default=function(){return r.default.createElement("div",{className:"header"},r.default.createElement("a",{className:"header__logo",href:"/franklin"},r.default.createElement(i.default,{width:50,height:50})),r.default.createElement("ul",{className:"header__navigation"},r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/"},"Home")," "),r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/atoms"},"Atoms")," "),r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/ui-components"},"UI components")," ")))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(2)),o=i(n(1));function i(t){return t&&t.__esModule?t:{default:t}}n(383);var a=function(t){return r.default.createElement("div",{className:"default-page-content"},t.children)};a.propTypes={children:o.default.node},a.defaultProps={children:"Default Page Content"},e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=u(r),i=u(n(68)),a=u(n(103));function u(t){return t&&t.__esModule?t:{default:t}}var l=function(){return o.default.createElement(r.Fragment,null,o.default.createElement("div",{className:"text-center"},o.default.createElement("h1",null,"Franklin"),o.default.createElement(a.default,{width:200,height:200}),o.default.createElement("h4",null,"The UniProt design system")),o.default.createElement("h2",null,"Introduction"),o.default.createElement("p",null,'Franklin provides all user interface components required to build the UniProt website. It is based on the foundation framework, which is used for all "atomic level" components (Typography, forms, lists etc...).'))};e.default=function(){return o.default.createElement(i.default,{title:"Home Page",content:o.default.createElement(l,null)})}},function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var r=n(71),o=n(72),i=n(161);t.exports=function(){function t(t,e,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=r,n.PropTypes=n,n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=c(r),i=n(102),a=c(n(159)),u=c(n(156)),l=c(n(153));function c(t){return t&&t.__esModule?t:{default:t}}e.default=function(){return o.default.createElement(i.BrowserRouter,{basename:"/franklin"},o.default.createElement(r.Fragment,null,o.default.createElement(i.Route,{path:"/",exact:!0,component:a.default}),o.default.createElement(i.Route,{path:"/atoms",component:u.default}),o.default.createElement(i.Route,{path:"/ui-components",component:l.default})))}},function(t,e,n){t.exports=n.p+"favicon.ico"},function(t,e,n){"use strict";t.exports=function(t){var e=(t?t.ownerDocument||t:document).defaultView||window;return!(!t||!("function"==typeof e.Node?t instanceof e.Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}},function(t,e,n){"use strict";var r=n(165);t.exports=function(t){return r(t)&&3==t.nodeType}},function(t,e,n){"use strict";var r=n(166);t.exports=function t(e,n){return!(!e||!n)&&(e===n||!r(e)&&(r(n)?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}t.exports=function(t,e){if(o(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(e,n[a])||!o(t[n[a]],e[n[a]]))return!1;return!0}},function(t,e,n){"use strict";t.exports=function(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}},function(t,e,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},function(t,e,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(72),o=n(2),i=n(170),a=n(106),u=n(71),l=n(169),c=n(168),s=n(167),f=n(105);function p(t){for(var e=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+t,o=0;o<e;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(t,e,n,r,o,i,a,u,l){(function(t,e,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this._caughtError=t,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(t,e,n,r,o,i,a,u,l){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var c=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var t=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,t}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var t=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,t}p("198")}};var h=null,v={};function m(){if(h)for(var t in v){var e=v[t],n=h.indexOf(t);if(-1<n||p("96",t),!g[n])for(var r in e.extractEvents||p("97",t),g[n]=e,n=e.eventTypes){var o=void 0,i=n[r],a=e,u=r;b.hasOwnProperty(u)&&p("99",u),b[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],a,u);o=!0}else i.registrationName?(y(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,t)}}}function y(t,e,n){w[t]&&p("100",t),w[t]=e,x[t]=e.eventTypes[n].dependencies}var g=[],b={},w={},x={};function E(t){h&&p("101"),h=Array.prototype.slice.call(t),m()}function _(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];v.hasOwnProperty(e)&&v[e]===r||(v[e]&&p("102",e),v[e]=r,n=!0)}n&&m()}var S=Object.freeze({plugins:g,eventNameDispatchConfigs:b,registrationNameModules:w,registrationNameDependencies:x,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:_}),P=null,C=null,k=null;function T(t,e,n,r){e=t.type||"unknown-event",t.currentTarget=k(r),d.invokeGuardedCallbackAndCatchFirstError(e,n,void 0,t),t.currentTarget=null}function O(t,e){return null==e&&p("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function M(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var N=null;function R(t,e){if(t){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)T(t,e,n[o],r[o]);else n&&T(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}function I(t){return R(t,!0)}function j(t){return R(t,!1)}var F={injectEventPluginOrder:E,injectEventPluginsByName:_};function L(t,e){var n=t.stateNode;if(!n)return null;var r=P(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}return t?null:(n&&"function"!=typeof n&&p("231",e,typeof n),n)}function A(t,e){null!==t&&(N=O(N,t)),t=N,N=null,t&&(M(t,e?I:j),N&&p("95"),d.rethrowCaughtError())}function D(t,e,n,r){for(var o=null,i=0;i<g.length;i++){var a=g[i];a&&(a=a.extractEvents(t,e,n,r))&&(o=O(o,a))}A(o,!1)}var U=Object.freeze({injection:F,getListener:L,runEventsInBatch:A,runExtractedEventsInBatch:D}),z=Math.random().toString(36).slice(2),H="__reactInternalInstance$"+z,W="__reactEventHandlers$"+z;function B(t){if(t[H])return t[H];for(;!t[H];){if(!t.parentNode)return null;t=t.parentNode}return 5===(t=t[H]).tag||6===t.tag?t:null}function V(t){if(5===t.tag||6===t.tag)return t.stateNode;p("33")}function q(t){return t[W]||null}var K=Object.freeze({precacheFiberNode:function(t,e){e[H]=t},getClosestInstanceFromNode:B,getInstanceFromNode:function(t){return!(t=t[H])||5!==t.tag&&6!==t.tag?null:t},getNodeFromInstance:V,getFiberCurrentPropsFromNode:q,updateFiberProps:function(t,e){t[W]=e}});function $(t){do{t=t.return}while(t&&5!==t.tag);return t||null}function G(t,e,n){for(var r=[];t;)r.push(t),t=$(t);for(t=r.length;0<t--;)e(r[t],"captured",n);for(t=0;t<r.length;t++)e(r[t],"bubbled",n)}function Y(t,e,n){(e=L(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=O(n._dispatchListeners,e),n._dispatchInstances=O(n._dispatchInstances,t))}function Q(t){t&&t.dispatchConfig.phasedRegistrationNames&&G(t._targetInst,Y,t)}function X(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst;G(e=e?$(e):null,Y,t)}}function J(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=L(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,e),n._dispatchInstances=O(n._dispatchInstances,t))}function Z(t){t&&t.dispatchConfig.registrationName&&J(t._targetInst,null,t)}function tt(t){M(t,Q)}function et(t,e,n,r){if(n&&r)t:{for(var o=n,i=r,a=0,u=o;u;u=$(u))a++;u=0;for(var l=i;l;l=$(l))u++;for(;0<a-u;)o=$(o),a--;for(;0<u-a;)i=$(i),u--;for(;a--;){if(o===i||o===i.alternate)break t;o=$(o),i=$(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=$(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=$(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",t);for(t=n.length;0<t--;)J(n[t],"captured",e)}var nt=Object.freeze({accumulateTwoPhaseDispatches:tt,accumulateTwoPhaseDispatchesSkipTarget:function(t){M(t,X)},accumulateEnterLeaveDispatches:et,accumulateDirectDispatches:function(t){M(t,Z)}}),rt=null;function ot(){return!rt&&i.canUseDOM&&(rt="textContent"in document.documentElement?"textContent":"innerText"),rt}var it={_root:null,_startText:null,_fallbackText:null};function at(){if(it._fallbackText)return it._fallbackText;var t,e,n=it._startText,r=n.length,o=ut(),i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);return it._fallbackText=o.slice(t,1<e?1-e:void 0),it._fallbackText}function ut(){return"value"in it._root?it._root.value:it._root[ot()]}var lt="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ct={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function st(t,e,n,r){for(var o in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(o)&&((e=t[o])?this[o]=e(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function ft(t,e,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}function pt(t){t instanceof this||p("223"),t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function dt(t){t.eventPool=[],t.getPooled=ft,t.release=pt}a(st.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;for(e=0;e<lt.length;e++)this[lt[e]]=null}}),st.Interface=ct,st.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var o=new e;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,t),n.extend=r.extend,dt(n),n},dt(st);var ht=st.extend({data:null}),vt=st.extend({data:null}),mt=[9,13,27,32],yt=i.canUseDOM&&"CompositionEvent"in window,gt=null;i.canUseDOM&&"documentMode"in document&&(gt=document.documentMode);var bt=i.canUseDOM&&"TextEvent"in window&&!gt,wt=i.canUseDOM&&(!yt||gt&&8<gt&&11>=gt),xt=String.fromCharCode(32),Et={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},_t=!1;function St(t,e){switch(t){case"topKeyUp":return-1!==mt.indexOf(e.keyCode);case"topKeyDown":return 229!==e.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Pt(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Ct=!1;var kt={eventTypes:Et,extractEvents:function(t,e,n,r){var o=void 0,i=void 0;if(yt)t:{switch(t){case"topCompositionStart":o=Et.compositionStart;break t;case"topCompositionEnd":o=Et.compositionEnd;break t;case"topCompositionUpdate":o=Et.compositionUpdate;break t}o=void 0}else Ct?St(t,n)&&(o=Et.compositionEnd):"topKeyDown"===t&&229===n.keyCode&&(o=Et.compositionStart);return o?(wt&&(Ct||o!==Et.compositionStart?o===Et.compositionEnd&&Ct&&(i=at()):(it._root=r,it._startText=ut(),Ct=!0)),o=ht.getPooled(o,e,n,r),i?o.data=i:null!==(i=Pt(n))&&(o.data=i),tt(o),i=o):i=null,(t=bt?function(t,e){switch(t){case"topCompositionEnd":return Pt(e);case"topKeyPress":return 32!==e.which?null:(_t=!0,xt);case"topTextInput":return(t=e.data)===xt&&_t?null:t;default:return null}}(t,n):function(t,e){if(Ct)return"topCompositionEnd"===t||!yt&&St(t,e)?(t=at(),it._root=null,it._startText=null,it._fallbackText=null,Ct=!1,t):null;switch(t){case"topPaste":return null;case"topKeyPress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"topCompositionEnd":return wt?null:e.data;default:return null}}(t,n))?((e=vt.getPooled(Et.beforeInput,e,n,r)).data=t,tt(e)):e=null,null===i?e:null===e?i:[i,e]}},Tt=null,Ot={injectFiberControlledHostComponent:function(t){Tt=t}},Mt=null,Nt=null;function Rt(t){if(t=C(t)){Tt&&"function"==typeof Tt.restoreControlledState||p("194");var e=P(t.stateNode);Tt.restoreControlledState(t.stateNode,t.type,e)}}function It(t){Mt?Nt?Nt.push(t):Nt=[t]:Mt=t}function jt(){return null!==Mt||null!==Nt}function Ft(){if(Mt){var t=Mt,e=Nt;if(Nt=Mt=null,Rt(t),e)for(t=0;t<e.length;t++)Rt(e[t])}}var Lt=Object.freeze({injection:Ot,enqueueStateRestore:It,needsStateRestore:jt,restoreStateIfNeeded:Ft});function At(t,e){return t(e)}function Dt(t,e,n){return t(e,n)}function Ut(){}var zt=!1;function Ht(t,e){if(zt)return t(e);zt=!0;try{return At(t,e)}finally{zt=!1,jt()&&(Ut(),Ft())}}var Wt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bt(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Wt[t.type]:"textarea"===e}function Vt(t){return(t=t.target||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function qt(t,e){return!(!i.canUseDOM||e&&!("addEventListener"in document))&&((e=(t="on"+t)in document)||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e)}function Kt(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function $t(t){t._valueTracker||(t._valueTracker=function(t){var e=Kt(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(t,e,{configurable:!0,get:function(){return n.get.call(this)},set:function(t){r=""+t,n.set.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}(t))}function Gt(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Kt(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}var Yt=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qt="function"==typeof Symbol&&Symbol.for,Xt=Qt?Symbol.for("react.element"):60103,Jt=Qt?Symbol.for("react.call"):60104,Zt=Qt?Symbol.for("react.return"):60105,te=Qt?Symbol.for("react.portal"):60106,ee=Qt?Symbol.for("react.fragment"):60107,ne=Qt?Symbol.for("react.strict_mode"):60108,re=Qt?Symbol.for("react.provider"):60109,oe=Qt?Symbol.for("react.context"):60110,ie=Qt?Symbol.for("react.async_mode"):60111,ae=Qt?Symbol.for("react.forward_ref"):60112,ue="function"==typeof Symbol&&Symbol.iterator;function le(t){return null===t||void 0===t?null:"function"==typeof(t=ue&&t[ue]||t["@@iterator"])?t:null}function ce(t){if("function"==typeof(t=t.type))return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ee:return"ReactFragment";case te:return"ReactPortal";case Jt:return"ReactCall";case Zt:return"ReactReturn"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case ae:return""!==(t=t.render.displayName||t.render.name||"")?"ForwardRef("+t+")":"ForwardRef"}return null}function se(t){var e="";do{t:switch(t.tag){case 0:case 1:case 2:case 5:var n=t._debugOwner,r=t._debugSource,o=ce(t),i=null;n&&(i=ce(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break t;default:o=""}e+=o,t=t.return}while(t);return e}var fe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pe={},de={};function he(t,e,n,r,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e}var ve={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){ve[t]=new he(t,0,!1,t,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];ve[e]=new he(e,1,!1,t[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){ve[t]=new he(t,2,!1,t.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(t){ve[t]=new he(t,2,!1,t,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){ve[t]=new he(t,3,!1,t.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(t){ve[t]=new he(t,3,!0,t.toLowerCase(),null)}),["capture","download"].forEach(function(t){ve[t]=new he(t,4,!1,t.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(t){ve[t]=new he(t,6,!1,t.toLowerCase(),null)}),["rowSpan","start"].forEach(function(t){ve[t]=new he(t,5,!1,t.toLowerCase(),null)});var me=/[\-:]([a-z])/g;function ye(t){return t[1].toUpperCase()}function ge(t,e,n,r){var o=ve.hasOwnProperty(e)?ve[e]:null;(null!==o?0===o.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null===e||void 0===e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,o,r)&&(n=null),r||null===o?function(t){return!!de.hasOwnProperty(t)||!pe.hasOwnProperty(t)&&(fe.test(t)?de[t]=!0:(pe[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=null===n?3!==o.type&&"":n:(e=o.attributeName,r=o.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function be(t,e){var n=e.checked;return a({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function we(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=Pe(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function xe(t,e){null!=(e=e.checked)&&ge(t,"checked",e,!1)}function Ee(t,e){xe(t,e);var n=Pe(e.value);null!=n&&("number"===e.type?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n)),e.hasOwnProperty("value")?Se(t,e.type,n):e.hasOwnProperty("defaultValue")&&Se(t,e.type,Pe(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function _e(t,e){(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue"))&&(""===t.value&&(t.value=""+t._wrapperState.initialValue),t.defaultValue=""+t._wrapperState.initialValue),""!==(e=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!t.defaultChecked,""!==e&&(t.name=e)}function Se(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function Pe(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(me,ye);ve[e]=new he(e,1,!1,t,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(me,ye);ve[e]=new he(e,1,!1,t,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(me,ye);ve[e]=new he(e,1,!1,t,"http://www.w3.org/XML/1998/namespace")}),ve.tabIndex=new he("tabIndex",1,!1,"tabindex",null);var Ce={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function ke(t,e,n){return(t=st.getPooled(Ce.change,t,e,n)).type="change",It(n),tt(t),t}var Te=null,Oe=null;function Me(t){A(t,!1)}function Ne(t){if(Gt(V(t)))return t}function Re(t,e){if("topChange"===t)return e}var Ie=!1;function je(){Te&&(Te.detachEvent("onpropertychange",Fe),Oe=Te=null)}function Fe(t){"value"===t.propertyName&&Ne(Oe)&&Ht(Me,t=ke(Oe,t,Vt(t)))}function Le(t,e,n){"topFocus"===t?(je(),Oe=n,(Te=e).attachEvent("onpropertychange",Fe)):"topBlur"===t&&je()}function Ae(t){if("topSelectionChange"===t||"topKeyUp"===t||"topKeyDown"===t)return Ne(Oe)}function De(t,e){if("topClick"===t)return Ne(e)}function Ue(t,e){if("topInput"===t||"topChange"===t)return Ne(e)}i.canUseDOM&&(Ie=qt("input")&&(!document.documentMode||9<document.documentMode));var ze={eventTypes:Ce,_isInputEventSupported:Ie,extractEvents:function(t,e,n,r){var o=e?V(e):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Re:Bt(o)?Ie?i=Ue:(i=Ae,a=Le):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=De),i&&(i=i(t,e)))return ke(i,n,r);a&&a(t,o,e),"topBlur"===t&&null!=e&&(t=e._wrapperState||o._wrapperState)&&t.controlled&&"number"===o.type&&Se(o,"number",o.value)}},He=st.extend({view:null,detail:null}),We={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Be(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=We[t])&&!!e[t]}function Ve(){return Be}var qe=He.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ve,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)}}),Ke={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},$e={eventTypes:Ke,extractEvents:function(t,e,n,r){if("topMouseOver"===t&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==t&&"topMouseOver"!==t)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===t?(t=e,e=(e=n.relatedTarget||n.toElement)?B(e):null):t=null,t===e)return null;var i=null==t?o:V(t);o=null==e?o:V(e);var a=qe.getPooled(Ke.mouseLeave,t,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=qe.getPooled(Ke.mouseEnter,e,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,et(a,n,t,e),[a,n]}};function Ge(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 3===e.tag?2:3}function Ye(t){return!!(t=t._reactInternalFiber)&&2===Ge(t)}function Qe(t){2!==Ge(t)&&p("188")}function Xe(t){var e=t.alternate;if(!e)return 3===(e=Ge(t))&&p("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Qe(o),t;if(a===r)return Qe(o),e;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?t:e}function Je(t){if(!(t=Xe(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var Ze=st.extend({animationName:null,elapsedTime:null,pseudoElement:null}),tn=st.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),en=He.extend({relatedTarget:null});function nn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=He.extend({key:function(t){if(t.key){var e=rn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=nn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?on[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ve,charCode:function(t){return"keypress"===t.type?nn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?nn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),un=qe.extend({dataTransfer:null}),ln=He.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ve}),cn=st.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),sn=qe.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},pn={};function dn(t,e){var n=t[0].toUpperCase()+t.slice(1),r="on"+n;e={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:e},fn[t]=e,pn[n]=e}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(t){dn(t,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(t){dn(t,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(t){return void 0!==(t=pn[t])&&!0===t.isInteractive},extractEvents:function(t,e,n,r){var o=pn[t];if(!o)return null;switch(t){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":t=an;break;case"topBlur":case"topFocus":t=en;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":t=qe;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":t=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":t=ln;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":t=Ze;break;case"topTransitionEnd":t=cn;break;case"topScroll":t=He;break;case"topWheel":t=sn;break;case"topCopy":case"topCut":case"topPaste":t=tn;break;default:t=st}return tt(e=t.getPooled(o,e,n,r)),e}},vn=hn.isInteractiveTopLevelEventType,mn=[];function yn(t){var e=t.targetInst;do{if(!e){t.ancestors.push(e);break}var n;for(n=e;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;t.ancestors.push(e),e=B(n)}while(e);for(n=0;n<t.ancestors.length;n++)e=t.ancestors[n],D(t.topLevelType,e,t.nativeEvent,Vt(t.nativeEvent))}var gn=!0;function bn(t){gn=!!t}function wn(t,e,n){if(!n)return null;t=(vn(t)?En:_n).bind(null,t),n.addEventListener(e,t,!1)}function xn(t,e,n){if(!n)return null;t=(vn(t)?En:_n).bind(null,t),n.addEventListener(e,t,!0)}function En(t,e){Dt(_n,t,e)}function _n(t,e){if(gn){var n=Vt(e);if(null!==(n=B(n))&&"number"==typeof n.tag&&2!==Ge(n)&&(n=null),mn.length){var r=mn.pop();r.topLevelType=t,r.nativeEvent=e,r.targetInst=n,t=r}else t={topLevelType:t,nativeEvent:e,targetInst:n,ancestors:[]};try{Ht(yn,t)}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,10>mn.length&&mn.push(t)}}}var Sn=Object.freeze({get _enabled(){return gn},setEnabled:bn,isEnabled:function(){return gn},trapBubbledEvent:wn,trapCapturedEvent:xn,dispatchEvent:_n});function Pn(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}var Cn={animationend:Pn("Animation","AnimationEnd"),animationiteration:Pn("Animation","AnimationIteration"),animationstart:Pn("Animation","AnimationStart"),transitionend:Pn("Transition","TransitionEnd")},kn={},Tn={};function On(t){if(kn[t])return kn[t];if(!Cn[t])return t;var e,n=Cn[t];for(e in n)if(n.hasOwnProperty(e)&&e in Tn)return kn[t]=n[e];return t}i.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete Cn.animationend.animation,delete Cn.animationiteration.animation,delete Cn.animationstart.animation),"TransitionEvent"in window||delete Cn.transitionend.transition);var Mn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},Nn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Rn={},In=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Fn(t){return Object.prototype.hasOwnProperty.call(t,jn)||(t[jn]=In++,Rn[t[jn]]={}),Rn[t[jn]]}function Ln(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function An(t,e){var n,r=Ln(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=Ln(r)}}function Dn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)}var Un=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Hn=null,Wn=null,Bn=null,Vn=!1;function qn(t,e){if(Vn||null==Hn||Hn!==l())return null;var n=Hn;return"selectionStart"in n&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Bn&&c(Bn,n)?null:(Bn=n,(t=st.getPooled(zn.select,Wn,t,e)).type="select",t.target=Hn,tt(t),t)}var Kn={eventTypes:zn,extractEvents:function(t,e,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){t:{i=Fn(i),o=x.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break t}}i=!0}o=!i}if(o)return null;switch(i=e?V(e):window,t){case"topFocus":(Bt(i)||"true"===i.contentEditable)&&(Hn=i,Wn=e,Bn=null);break;case"topBlur":Bn=Wn=Hn=null;break;case"topMouseDown":Vn=!0;break;case"topContextMenu":case"topMouseUp":return Vn=!1,qn(n,r);case"topSelectionChange":if(Un)break;case"topKeyDown":case"topKeyUp":return qn(n,r)}return null}};function $n(t,e,n,r){this.tag=t,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=e,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Gn(t,e,n){var r=t.alternate;return null===r?((r=new $n(t.tag,e,t.key,t.mode)).type=t.type,r.stateNode=t.stateNode,r.alternate=t,t.alternate=r):(r.pendingProps=e,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=t.child,r.memoizedProps=t.memoizedProps,r.memoizedState=t.memoizedState,r.updateQueue=t.updateQueue,r.sibling=t.sibling,r.index=t.index,r.ref=t.ref,r}function Yn(t,e,n){var r=t.type,o=t.key;t=t.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case ee:return Qn(t.children,e,n,o);case ie:i=11,e|=3;break;case ne:i=11,e|=2;break;case Jt:i=7;break;case Zt:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case re:i=13;break;case oe:i=12;break;case ae:i=14;break;default:if("number"==typeof r.tag)return(e=r).pendingProps=t,e.expirationTime=n,e;p("130",null==r?r:typeof r,"")}else p("130",null==r?r:typeof r,"")}return(e=new $n(i,t,o,e)).type=r,e.expirationTime=n,e}function Qn(t,e,n,r){return(t=new $n(10,t,r,e)).expirationTime=n,t}function Xn(t,e,n){return(t=new $n(6,t,null,e)).expirationTime=n,t}function Jn(t,e,n){return(e=new $n(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}F.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),P=K.getFiberCurrentPropsFromNode,C=K.getInstanceFromNode,k=K.getNodeFromInstance,F.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:$e,ChangeEventPlugin:ze,SelectEventPlugin:Kn,BeforeInputEventPlugin:kt});var Zn=null,tr=null;function er(t){return function(e){try{return t(e)}catch(t){}}}function nr(t){"function"==typeof Zn&&Zn(t)}function rr(t){"function"==typeof tr&&tr(t)}function or(t){return{baseState:t,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(t,e){null===t.last?t.first=t.last=e:(t.last.next=e,t.last=e),(0===t.expirationTime||t.expirationTime>e.expirationTime)&&(t.expirationTime=e.expirationTime)}new Set;var ar=void 0,ur=void 0;function lr(t){ar=ur=null;var e=t.alternate,n=t.updateQueue;null===n&&(n=t.updateQueue=or(null)),null!==e?null===(t=e.updateQueue)&&(t=e.updateQueue=or(null)):t=null,ar=n,ur=t!==n?t:null}function cr(t,e){lr(t),t=ar;var n=ur;null===n?ir(t,e):null===t.last||null===n.last?(ir(t,e),ir(n,e)):(ir(t,e),n.last=e)}function sr(t,e,n,r){return"function"==typeof(t=t.partialState)?t.call(e,n,r):t}function fr(t,e,n,r,o,i){null!==t&&t.updateQueue===n&&(n=e.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?t=n.baseState:(t=n.baseState=e.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,c=!1;null!==l;){var s=l.expirationTime;if(s>i){var f=n.expirationTime;(0===f||f>s)&&(n.expirationTime=s),c||(c=!0,n.baseState=t)}else c||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(t=sr(l,r,t,o),u=!0):(s=sr(l,r,t,o))&&(t=u?a({},t,s):a(t,s),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(s=n.callbackList)&&(s=n.callbackList=[]),s.push(l)),null!==l.capturedValue&&(null===(s=n.capturedValues)?n.capturedValues=[l.capturedValue]:s.push(l.capturedValue));l=l.next}return null!==n.callbackList?e.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(e.updateQueue=null),c||(n.baseState=t),t}function pr(t,e){var n=t.callbackList;if(null!==n)for(t.callbackList=null,t=0;t<n.length;t++){var r=n[t],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(e)}}var dr=Array.isArray;function hr(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",t);var o=""+t;return null!==e&&null!==e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs===f?r.refs={}:r.refs;null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&p("148"),n._owner||p("254",t)}return t}function vr(t,e){"textarea"!==t.type&&p("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function mr(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=Gn(t,e,n)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function a(e){return t&&null===e.alternate&&(e.effectTag=2),e}function u(t,e,n,r){return null===e||6!==e.tag?((e=Xn(n,t.mode,r)).return=t,e):((e=o(e,n,r)).return=t,e)}function l(t,e,n,r){return null!==e&&e.type===n.type?((r=o(e,n.props,r)).ref=hr(t,e,n),r.return=t,r):((r=Yn(n,t.mode,r)).ref=hr(t,e,n),r.return=t,r)}function c(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Jn(n,t.mode,r)).return=t,e):((e=o(e,n.children||[],r)).return=t,e)}function s(t,e,n,r,i){return null===e||10!==e.tag?((e=Qn(n,t.mode,r,i)).return=t,e):((e=o(e,n,r)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Xn(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case Xt:return(n=Yn(e,t.mode,n)).ref=hr(t,null,e),n.return=t,n;case te:return(e=Jn(e,t.mode,n)).return=t,e}if(dr(e)||le(e))return(e=Qn(e,t.mode,n,null)).return=t,e;vr(t,e)}return null}function d(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xt:return n.key===o?n.type===ee?s(t,e,n.props.children,r,o):l(t,e,n,r):null;case te:return n.key===o?c(t,e,n,r):null}if(dr(n)||le(n))return null!==o?null:s(t,e,n,r,null);vr(t,n)}return null}function h(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return u(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xt:return t=t.get(null===r.key?n:r.key)||null,r.type===ee?s(e,t,r.props.children,o,r.key):l(e,t,r,o);case te:return c(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(dr(r)||le(r))return s(e,t=t.get(n)||null,r,o,null);vr(e,r)}return null}function v(o,a,u,l){for(var c=null,s=null,p=a,v=a=0,m=null;null!==p&&v<u.length;v++){p.index>v?(m=p,p=null):m=p.sibling;var y=d(o,p,u[v],l);if(null===y){null===p&&(p=m);break}t&&p&&null===y.alternate&&e(o,p),a=i(y,a,v),null===s?c=y:s.sibling=y,s=y,p=m}if(v===u.length)return n(o,p),c;if(null===p){for(;v<u.length;v++)(p=f(o,u[v],l))&&(a=i(p,a,v),null===s?c=p:s.sibling=p,s=p);return c}for(p=r(o,p);v<u.length;v++)(m=h(p,o,v,u[v],l))&&(t&&null!==m.alternate&&p.delete(null===m.key?v:m.key),a=i(m,a,v),null===s?c=m:s.sibling=m,s=m);return t&&p.forEach(function(t){return e(o,t)}),c}function m(o,a,u,l){var c=le(u);"function"!=typeof c&&p("150"),null==(u=c.call(u))&&p("151");for(var s=c=null,v=a,m=a=0,y=null,g=u.next();null!==v&&!g.done;m++,g=u.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=d(o,v,g.value,l);if(null===b){v||(v=y);break}t&&v&&null===b.alternate&&e(o,v),a=i(b,a,m),null===s?c=b:s.sibling=b,s=b,v=y}if(g.done)return n(o,v),c;if(null===v){for(;!g.done;m++,g=u.next())null!==(g=f(o,g.value,l))&&(a=i(g,a,m),null===s?c=g:s.sibling=g,s=g);return c}for(v=r(o,v);!g.done;m++,g=u.next())null!==(g=h(v,o,m,g.value,l))&&(t&&null!==g.alternate&&v.delete(null===g.key?m:g.key),a=i(g,a,m),null===s?c=g:s.sibling=g,s=g);return t&&v.forEach(function(t){return e(o,t)}),c}return function(t,r,i,u){"object"==typeof i&&null!==i&&i.type===ee&&null===i.key&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Xt:t:{var c=i.key;for(l=r;null!==l;){if(l.key===c){if(10===l.tag?i.type===ee:l.type===i.type){n(t,l.sibling),(r=o(l,i.type===ee?i.props.children:i.props,u)).ref=hr(t,l,i),r.return=t,t=r;break t}n(t,l);break}e(t,l),l=l.sibling}i.type===ee?((r=Qn(i.props.children,t.mode,u,i.key)).return=t,t=r):((u=Yn(i,t.mode,u)).ref=hr(t,r,i),u.return=t,t=u)}return a(t);case te:t:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[],u)).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Jn(i,t.mode,u)).return=t,t=r}return a(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(t,r.sibling),(r=o(r,i,u)).return=t,t=r):(n(t,r),(r=Xn(i,t.mode,u)).return=t,t=r),a(t);if(dr(i))return v(t,r,i,u);if(le(i))return m(t,r,i,u);if(l&&vr(t,i),void 0===i)switch(t.tag){case 2:case 1:p("152",(u=t.type).displayName||u.name||"Component")}return n(t,r)}}var yr=mr(!0),gr=mr(!1);function br(t,e,n,r,o,i,u){function l(t,e,n){s(t,e,n,e.expirationTime)}function s(t,e,n,r){e.child=null===t?gr(e,null,n,r):yr(e,t.child,n,r)}function d(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function h(t,e,n,r,o,i){if(d(t,e),!n&&!o)return r&&T(e,!1),y(t,e);n=e.stateNode,Yt.current=e;var a=o?null:n.render();return e.effectTag|=1,o&&(s(t,e,null,i),e.child=null),s(t,e,a,i),e.memoizedState=n.state,e.memoizedProps=n.props,r&&T(e,!0),e.child}function v(t){var e=t.stateNode;e.pendingContext?k(t,e.pendingContext,e.pendingContext!==e.context):e.context&&k(t,e.context,!1),x(t,e.containerInfo)}function m(t,e,n,r){var o=t.child;for(null!==o&&(o.return=t);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===e&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===t.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===t){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function y(t,e){if(null!==t&&e.child!==t.child&&p("153"),null!==e.child){var n=Gn(t=e.child,t.pendingProps,t.expirationTime);for(e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Gn(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}var g=t.shouldSetTextContent,b=t.shouldDeprioritizeSubtree,w=e.pushHostContext,x=e.pushHostContainer,E=r.pushProvider,_=n.getMaskedContext,S=n.getUnmaskedContext,P=n.hasContextChanged,C=n.pushContextProvider,k=n.pushTopLevelContextObject,T=n.invalidateContextProvider,O=o.enterHydrationState,M=o.resetHydrationState,N=o.tryToClaimNextHydratableInstance,R=(t=function(t,e,n,r,o){function i(t,e,n,r,o,i){if(null===e||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)return!0;var a=t.stateNode;return t=t.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&c(e,n)&&c(r,o))}function u(t,e){e.updater=y,t.stateNode=e,e._reactInternalFiber=t}function l(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&y.enqueueReplaceState(e,e.state,null)}function s(t,e,n,r){if("function"==typeof(t=t.type).getDerivedStateFromProps)return t.getDerivedStateFromProps.call(null,n,r)}var p=t.cacheContext,d=t.getMaskedContext,h=t.getUnmaskedContext,v=t.isContextConsumer,m=t.hasContextChanged,y={isMounted:Ye,enqueueSetState:function(t,r,o){t=t._reactInternalFiber,o=void 0===o?null:o;var i=n(t);cr(t,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),e(t,i)},enqueueReplaceState:function(t,r,o){t=t._reactInternalFiber,o=void 0===o?null:o;var i=n(t);cr(t,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),e(t,i)},enqueueForceUpdate:function(t,r){t=t._reactInternalFiber,r=void 0===r?null:r;var o=n(t);cr(t,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),e(t,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:s,constructClassInstance:function(t,e){var n=t.type,r=h(t),o=v(t),i=o?d(t,r):f,l=null!==(n=new n(e,i)).state&&void 0!==n.state?n.state:null;return u(t,n),t.memoizedState=l,null!==(e=s(t,0,e,l))&&void 0!==e&&(t.memoizedState=a({},t.memoizedState,e)),o&&p(t,r,i),n},mountClassInstance:function(t,e){var n=t.type,r=t.alternate,o=t.stateNode,i=t.pendingProps,a=h(t);o.props=i,o.state=t.memoizedState,o.refs=f,o.context=d(t,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&y.enqueueReplaceState(o,o.state,null),null!==(n=t.updateQueue)&&(o.state=fr(r,t,n,o,i,e))),"function"==typeof o.componentDidMount&&(t.effectTag|=4)},resumeMountClassInstance:function(t,e){var n=t.type,u=t.stateNode;u.props=t.memoizedProps,u.state=t.memoizedState;var c=t.memoizedProps,f=t.pendingProps,p=u.context,v=h(t);v=d(t,v),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(c!==f||p!==v)&&l(t,u,f,v),p=t.memoizedState,e=null!==t.updateQueue?fr(null,t,t.updateQueue,u,f,e):p;var y=void 0;if(c!==f&&(y=s(t,0,f,e)),null!==y&&void 0!==y){e=null===e||void 0===e?y:a({},e,y);var g=t.updateQueue;null!==g&&(g.baseState=a({},g.baseState,y))}return c!==f||p!==e||m()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((c=i(t,c,f,p,e,v))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.effectTag|=4)):("function"==typeof u.componentDidMount&&(t.effectTag|=4),r(t,f),o(t,e)),u.props=f,u.state=e,u.context=v,c):("function"==typeof u.componentDidMount&&(t.effectTag|=4),!1)},updateClassInstance:function(t,e,n){var u=e.type,c=e.stateNode;c.props=e.memoizedProps,c.state=e.memoizedState;var f=e.memoizedProps,p=e.pendingProps,v=c.context,y=h(e);y=d(e,y),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(f!==p||v!==y)&&l(e,c,p,y),v=e.memoizedState,n=null!==e.updateQueue?fr(t,e,e.updateQueue,c,p,n):v;var g=void 0;if(f!==p&&(g=s(e,0,p,n)),null!==g&&void 0!==g){n=null===n||void 0===n?g:a({},n,g);var b=e.updateQueue;null!==b&&(b.baseState=a({},b.baseState,g))}return f!==p||v!==n||m()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((g=i(e,f,p,v,n,y))?(u||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(p,n,y),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(p,n,y)),"function"==typeof c.componentDidUpdate&&(e.effectTag|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(e.effectTag|=2048)):("function"!=typeof c.componentDidUpdate||f===t.memoizedProps&&v===t.memoizedState||(e.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===t.memoizedProps&&v===t.memoizedState||(e.effectTag|=2048),r(e,p),o(e,n)),c.props=p,c.state=n,c.context=y,g):("function"!=typeof c.componentDidUpdate||f===t.memoizedProps&&v===t.memoizedState||(e.effectTag|=4),"function"!=typeof c.getSnapshotBeforeUpdate||f===t.memoizedProps&&v===t.memoizedState||(e.effectTag|=2048),!1)}}}(n,i,u,function(t,e){t.memoizedProps=e},function(t,e){t.memoizedState=e})).adoptClassInstance,I=t.callGetDerivedStateFromProps,j=t.constructClassInstance,F=t.mountClassInstance,L=t.resumeMountClassInstance,A=t.updateClassInstance;return{beginWork:function(t,e,n){if(0===e.expirationTime||e.expirationTime>n){switch(e.tag){case 3:v(e);break;case 2:C(e);break;case 4:x(e,e.stateNode.containerInfo);break;case 13:E(e)}return null}switch(e.tag){case 0:null!==t&&p("155");var r=e.type,o=e.pendingProps,i=S(e);return r=r(o,i=_(e,i)),e.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=e.type,e.tag=2,e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=I(e,r,o,e.memoizedState))&&void 0!==o&&(e.memoizedState=a({},e.memoizedState,o))),o=C(e),R(e,r),F(e,n),t=h(t,e,!0,o,!1,n)):(e.tag=1,l(t,e,r),e.memoizedProps=o,t=e.child),t;case 1:return o=e.type,n=e.pendingProps,P()||e.memoizedProps!==n?(r=S(e),o=o(n,r=_(e,r)),e.effectTag|=1,l(t,e,o),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 2:o=C(e),null===t?null===e.stateNode?(j(e,e.pendingProps),F(e,n),r=!0):r=L(e,n):r=A(t,e,n),i=!1;var u=e.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),h(t,e,r,o,i,n);case 3:t:if(v(e),r=e.updateQueue,null!==r){if(i=e.memoizedState,o=fr(t,e,r,null,null,n),e.memoizedState=o,null!==(r=e.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){M(),t=y(t,e);break t}r=o.element}i=e.stateNode,(null===t||null===t.child)&&i.hydrate&&O(e)?(e.effectTag|=2,e.child=gr(e,null,r,n)):(M(),l(t,e,r)),e.memoizedState=o,t=e.child}else M(),t=y(t,e);return t;case 5:return w(e),null===t&&N(e),o=e.type,u=e.memoizedProps,r=e.pendingProps,i=null!==t?t.memoizedProps:null,P()||u!==r||((u=1&e.mode&&b(o,r))&&(e.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,g(o,r)?u=null:i&&g(o,i)&&(e.effectTag|=16),d(t,e),1073741823!==n&&1&e.mode&&b(o,r)?(e.expirationTime=1073741823,e.memoizedProps=r,t=null):(l(t,e,u),e.memoizedProps=r,t=e.child)):t=y(t,e),t;case 6:return null===t&&N(e),e.memoizedProps=e.pendingProps,null;case 8:e.tag=7;case 7:return o=e.pendingProps,P()||e.memoizedProps!==o||(o=e.memoizedProps),r=o.children,e.stateNode=null===t?gr(e,e.stateNode,r,n):yr(e,t.stateNode,r,n),e.memoizedProps=o,e.stateNode;case 9:return null;case 4:return x(e,e.stateNode.containerInfo),o=e.pendingProps,P()||e.memoizedProps!==o?(null===t?e.child=yr(e,null,o,n):l(t,e,o),e.memoizedProps=o,t=e.child):t=y(t,e),t;case 14:return l(t,e,n=(n=e.type.render)(e.pendingProps,e.ref)),e.memoizedProps=n,e.child;case 10:return n=e.pendingProps,P()||e.memoizedProps!==n?(l(t,e,n),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 11:return n=e.pendingProps.children,P()||null!==n&&e.memoizedProps!==n?(l(t,e,n),e.memoizedProps=n,t=e.child):t=y(t,e),t;case 13:return function(t,e,n){var r=e.type._context,o=e.pendingProps,i=e.memoizedProps;if(!P()&&i===o)return e.stateNode=0,E(e),y(t,e);var a=o.value;if(e.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return e.stateNode=0,E(e),y(t,e);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return e.stateNode=0,E(e),y(t,e);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return e.stateNode=0,E(e),y(t,e)}else m(e,r,a,n)}return e.stateNode=a,E(e),l(t,e,o.children),e.child}(t,e,n);case 12:t:{r=e.type,i=e.pendingProps,u=e.memoizedProps,o=r._currentValue;var c=r._changedBits;if(P()||0!==c||u!==i){e.memoizedProps=i;var s=i.unstable_observedBits;if(void 0!==s&&null!==s||(s=1073741823),e.stateNode=s,0!=(c&s))m(e,r,c,n);else if(u===i){t=y(t,e);break t}l(t,e,n=(n=i.children)(o)),t=e.child}else t=y(t,e)}return t;default:p("156")}}}}function wr(t,e){var n=e.source;null===e.stack&&se(n),null!==n&&ce(n),e=e.value,null!==t&&2===t.tag&&ce(t);try{e&&e.suppressReactErrorLogging||console.error(e)}catch(t){t&&t.suppressReactErrorLogging||console.error(t)}}var xr={};function Er(t){function e(){if(null!==tt)for(var t=tt.return;null!==t;)j(t),t=t.return;et=null,nt=0,tt=null,it=!1}function n(t){return null!==at&&at.has(t)}function r(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(512&t.effectTag)){e=N(e,t,nt);var o=t;if(1073741823===nt||1073741823!==o.expirationTime){t:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break t;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==e)return e;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t)),null!==r)return r;if(null===n){it=!0;break}t=n}else{if(null!==(t=I(t)))return t.effectTag&=2559,t;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;t=n}}return null}function o(t){var e=M(t.alternate,t,nt);return null===e&&(e=r(t)),Yt.current=null,e}function i(t,n,i){Z&&p("243"),Z=!0,n===nt&&t===et&&null!==tt||(e(),nt=n,tt=Gn((et=t).current,null,nt),t.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==tt&&!S();)tt=o(tt);else for(;null!==tt;)tt=o(tt)}catch(t){if(null===tt){a=!0,P(t);break}var u=(i=tt).return;if(null===u){a=!0,P(t);break}R(u,i,t),tt=r(i)}break}return Z=!1,a||null!==tt?null:it?(t.pendingCommitExpirationTime=n,t.current.alternate):void p("262")}function u(t,e,n,r){cr(e,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:t={value:n,source:t,stack:se(t)},next:null}),s(e,r)}function l(t,e){t:{Z&&!ot&&p("263");for(var r=t.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(t,r,e,1),t=void 0;break t}break;case 3:u(t,r,e,1),t=void 0;break t}r=r.return}3===t.tag&&u(t,t,e,1),t=void 0}return t}function c(t){return t=0!==J?J:Z?ot?1:nt:1&t.mode?xt?10*(1+((d()+15)/10|0)):25*(1+((d()+500)/25|0)):1,xt&&(0===ht||t>ht)&&(ht=t),t}function s(t,n){t:{for(;null!==t;){if((0===t.expirationTime||t.expirationTime>n)&&(t.expirationTime=n),null!==t.alternate&&(0===t.alternate.expirationTime||t.alternate.expirationTime>n)&&(t.alternate.expirationTime=n),null===t.return){if(3!==t.tag){n=void 0;break t}var r=t.stateNode;!Z&&0!==nt&&n<nt&&e(),Z&&!ot&&et===r||m(r,n),St>_t&&p("185")}t=t.return}n=void 0}return n}function d(){return Q=V()-Y,2+(Q/10|0)}function h(t,e,n,r,o){var i=J;J=1;try{return t(e,n,r,o)}finally{J=i}}function v(t){if(0!==ct){if(t>ct)return;K(st)}var e=V()-Y;ct=t,st=q(g,{timeout:10*(t-2)-e})}function m(t,e){if(null===t.nextScheduledRoot)t.remainingExpirationTime=e,null===lt?(ut=lt=t,t.nextScheduledRoot=t):(lt=lt.nextScheduledRoot=t).nextScheduledRoot=ut;else{var n=t.remainingExpirationTime;(0===n||e<n)&&(t.remainingExpirationTime=e)}ft||(bt?wt&&(pt=t,dt=1,E(t,1,!1)):1===e?b():v(e))}function y(){var t=0,e=null;if(null!==lt)for(var n=lt,r=ut;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===lt)&&p("244"),r===r.nextScheduledRoot){ut=lt=r.nextScheduledRoot=null;break}if(r===ut)ut=o=r.nextScheduledRoot,lt.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===lt){(lt=n).nextScheduledRoot=ut,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===t||o<t)&&(t=o,e=r),r===lt)break;n=r,r=r.nextScheduledRoot}}null!==(n=pt)&&n===e&&1===t?St++:St=0,pt=e,dt=t}function g(t){w(0,!0,t)}function b(){w(1,!1,null)}function w(t,e,n){if(gt=n,y(),e)for(;null!==pt&&0!==dt&&(0===t||t>=dt)&&(!vt||d()>=dt);)E(pt,dt,!vt),y();else for(;null!==pt&&0!==dt&&(0===t||t>=dt);)E(pt,dt,!1),y();null!==gt&&(ct=0,st=-1),0!==dt&&v(dt),gt=null,vt=!1,x()}function x(){if(St=0,null!==Et){var t=Et;Et=null;for(var e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){mt||(mt=!0,yt=t)}}}if(mt)throw t=yt,yt=null,mt=!1,t}function E(t,e,n){ft&&p("245"),ft=!0,n?null!==(n=t.finishedWork)?_(t,n,e):(t.finishedWork=null,null!==(n=i(t,e,!0))&&(S()?t.finishedWork=n:_(t,n,e))):null!==(n=t.finishedWork)?_(t,n,e):(t.finishedWork=null,null!==(n=i(t,e,!1))&&_(t,n,e)),ft=!1}function _(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Et?Et=[r]:Et.push(r),r._defer))return t.finishedWork=e,void(t.remainingExpirationTime=0);t.finishedWork=null,ot=Z=!0,(n=e.stateNode).current===e&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var o=d();if(Yt.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var i=e.firstEffect}else i=e;else i=e.firstEffect;for($(n.containerInfo),rt=i;null!==rt;){var a=!1,u=void 0;try{for(;null!==rt;)2048&rt.effectTag&&F(rt.alternate,rt),rt=rt.nextEffect}catch(t){a=!0,u=t}a&&(null===rt&&p("178"),l(rt,u),null!==rt&&(rt=rt.nextEffect))}for(rt=i;null!==rt;){a=!1,u=void 0;try{for(;null!==rt;){var c=rt.effectTag;if(16&c&&L(rt),128&c){var s=rt.alternate;null!==s&&B(s)}switch(14&c){case 2:A(rt),rt.effectTag&=-3;break;case 6:A(rt),rt.effectTag&=-3,U(rt.alternate,rt);break;case 4:U(rt.alternate,rt);break;case 8:D(rt)}rt=rt.nextEffect}}catch(t){a=!0,u=t}a&&(null===rt&&p("178"),l(rt,u),null!==rt&&(rt=rt.nextEffect))}for(G(n.containerInfo),n.current=e,rt=i;null!==rt;){c=!1,s=void 0;try{for(i=n,a=o,u=r;null!==rt;){var f=rt.effectTag;36&f&&z(i,rt.alternate,rt,a,u),256&f&&H(rt,P),128&f&&W(rt);var h=rt.nextEffect;rt.nextEffect=null,rt=h}}catch(t){c=!0,s=t}c&&(null===rt&&p("178"),l(rt,s),null!==rt&&(rt=rt.nextEffect))}Z=ot=!1,nr(e.stateNode),0===(e=n.current.expirationTime)&&(at=null),t.remainingExpirationTime=e}function S(){return!(null===gt||gt.timeRemaining()>Pt)&&(vt=!0)}function P(t){null===pt&&p("246"),pt.remainingExpirationTime=0,mt||(mt=!0,yt=t)}var C=function(){var t=[],e=-1;return{createCursor:function(t){return{current:t}},isEmpty:function(){return-1===e},pop:function(n){0>e||(n.current=t[e],t[e]=null,e--)},push:function(n,r){t[++e]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),k=function(t,e){function n(t){return t===xr&&p("174"),t}var r=t.getChildHostContext,o=t.getRootHostContext;t=e.createCursor;var i=e.push,a=e.pop,u=t(xr),l=t(xr),c=t(xr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(t){a(u,t),a(l,t),a(c,t)},popHostContext:function(t){l.current===t&&(a(u,t),a(l,t))},pushHostContainer:function(t,e){i(c,e,t),i(l,t,t),i(u,xr,t),e=o(e),a(u,t),i(u,e,t)},pushHostContext:function(t){var e=n(c.current),o=n(u.current);o!==(e=r(o,t.type,e))&&(i(l,t,t),i(u,e,t))}}}(t,C),T=function(t){function e(t,e,n){(t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=n}function n(t){return 2===t.tag&&null!=t.type.childContextTypes}function r(t,e){var n=t.stateNode,r=t.type.childContextTypes;if("function"!=typeof n.getChildContext)return e;for(var o in n=n.getChildContext())o in r||p("108",ce(t)||"Unknown",o);return a({},e,n)}var o=t.createCursor,i=t.push,u=t.pop,l=o(f),c=o(!1),s=f;return{getUnmaskedContext:function(t){return n(t)?s:l.current},cacheContext:e,getMaskedContext:function(t,n){var r=t.type.contextTypes;if(!r)return f;var o=t.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&e(t,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(t){return 2===t.tag&&null!=t.type.contextTypes},isContextProvider:n,popContextProvider:function(t){n(t)&&(u(c,t),u(l,t))},popTopLevelContextObject:function(t){u(c,t),u(l,t)},pushTopLevelContextObject:function(t,e,n){null!=l.cursor&&p("168"),i(l,e,t),i(c,n,t)},processChildContext:r,pushContextProvider:function(t){if(!n(t))return!1;var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||f,s=l.current,i(l,e,t),i(c,c.current,t),!0},invalidateContextProvider:function(t,e){var n=t.stateNode;if(n||p("169"),e){var o=r(t,s);n.__reactInternalMemoizedMergedChildContext=o,u(c,t),u(l,t),i(l,o,t)}else u(c,t);i(c,e,t)},findCurrentUnmaskedContext:function(t){for((2!==Ge(t)||2!==t.tag)&&p("170");3!==t.tag;){if(n(t))return t.stateNode.__reactInternalMemoizedMergedChildContext;(t=t.return)||p("171")}return t.stateNode.context}}}(C);C=function(t){var e=t.createCursor,n=t.push,r=t.pop,o=e(null),i=e(null),a=e(0);return{pushProvider:function(t){var e=t.type._context;n(a,e._changedBits,t),n(i,e._currentValue,t),n(o,t,t),e._currentValue=t.pendingProps.value,e._changedBits=t.stateNode},popProvider:function(t){var e=a.current,n=i.current;r(o,t),r(i,t),r(a,t),(t=t.type._context)._currentValue=n,t._changedBits=e}}}(C);var O=function(t){function e(t,e){var n=new $n(5,null,null,0);n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function n(t,e){switch(t.tag){case 5:return null!==(e=i(e,t.type,t.pendingProps))&&(t.stateNode=e,!0);case 6:return null!==(e=a(e,t.pendingProps))&&(t.stateNode=e,!0);default:return!1}}function r(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag;)t=t.return;f=t}var o=t.shouldSetTextContent;if(!(t=t.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=t.canHydrateInstance,a=t.canHydrateTextInstance,u=t.getNextHydratableSibling,l=t.getFirstHydratableChild,c=t.hydrateInstance,s=t.hydrateTextInstance,f=null,d=null,h=!1;return{enterHydrationState:function(t){return d=l(t.stateNode.containerInfo),f=t,h=!0},resetHydrationState:function(){d=f=null,h=!1},tryToClaimNextHydratableInstance:function(t){if(h){var r=d;if(r){if(!n(t,r)){if(!(r=u(r))||!n(t,r))return t.effectTag|=2,h=!1,void(f=t);e(f,d)}f=t,d=l(r)}else t.effectTag|=2,h=!1,f=t}},prepareToHydrateHostInstance:function(t,e,n){return e=c(t.stateNode,t.type,t.memoizedProps,e,n,t),t.updateQueue=e,null!==e},prepareToHydrateHostTextInstance:function(t){return s(t.stateNode,t.memoizedProps,t)},popHydrationState:function(t){if(t!==f)return!1;if(!h)return r(t),h=!0,!1;var n=t.type;if(5!==t.tag||"head"!==n&&"body"!==n&&!o(n,t.memoizedProps))for(n=d;n;)e(t,n),n=u(n);return r(t),d=f?u(t.stateNode):null,!0}}}(t),M=br(t,k,T,C,O,s,c).beginWork,N=function(t,e,n,r,o){function i(t){t.effectTag|=4}var a=t.createInstance,u=t.createTextInstance,l=t.appendInitialChild,c=t.finalizeInitialChildren,s=t.prepareUpdate,f=t.persistence,d=e.getRootHostContainer,h=e.popHostContext,v=e.getHostContext,m=e.popHostContainer,y=n.popContextProvider,g=n.popTopLevelContextObject,b=r.popProvider,w=o.prepareToHydrateHostInstance,x=o.prepareToHydrateHostTextInstance,E=o.popHydrationState,_=void 0,S=void 0,P=void 0;return t.mutation?(_=function(){},S=function(t,e,n){(e.updateQueue=n)&&i(e)},P=function(t,e,n,r){n!==r&&i(e)}):p(f?"235":"236"),{completeWork:function(t,e,n){var r=e.pendingProps;switch(e.tag){case 1:return null;case 2:return y(e),t=e.stateNode,null!==(r=e.updateQueue)&&null!==r.capturedValues&&(e.effectTag&=-65,"function"==typeof t.componentDidCatch?e.effectTag|=256:r.capturedValues=null),null;case 3:return m(e),g(e),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(E(e),e.effectTag&=-3),_(e),null!==(t=e.updateQueue)&&null!==t.capturedValues&&(e.effectTag|=256),null;case 5:h(e),n=d();var o=e.type;if(null!==t&&null!=e.stateNode){var f=t.memoizedProps,C=e.stateNode,k=v();C=s(C,o,f,r,n,k),S(t,e,C,o,f,r,n,k),t.ref!==e.ref&&(e.effectTag|=128)}else{if(!r)return null===e.stateNode&&p("166"),null;if(t=v(),E(e))w(e,n,t)&&i(e);else{f=a(o,r,n,t,e);t:for(k=e.child;null!==k;){if(5===k.tag||6===k.tag)l(f,k.stateNode);else if(4!==k.tag&&null!==k.child){k.child.return=k,k=k.child;continue}if(k===e)break;for(;null===k.sibling;){if(null===k.return||k.return===e)break t;k=k.return}k.sibling.return=k.return,k=k.sibling}c(f,o,r,n,t)&&i(e),e.stateNode=f}null!==e.ref&&(e.effectTag|=128)}return null;case 6:if(t&&null!=e.stateNode)P(t,e,t.memoizedProps,r);else{if("string"!=typeof r)return null===e.stateNode&&p("166"),null;t=d(),n=v(),E(e)?x(e)&&i(e):e.stateNode=u(r,t,n,e)}return null;case 7:(r=e.memoizedProps)||p("165"),e.tag=8,o=[];t:for((f=e.stateNode)&&(f.return=e);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)p("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===e)break t;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),e.child=yr(e,null!==t?t.child:null,r,n),e.child;case 8:return e.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return m(e),_(e),null;case 13:return b(e),null;case 12:return null;case 0:p("167");default:p("156")}}}}(t,k,T,C,O).completeWork,R=(k=function(t,e,n,r,o){var i=t.popHostContainer,a=t.popHostContext,u=e.popContextProvider,l=e.popTopLevelContextObject,c=n.popProvider;return{throwException:function(t,e,n){e.effectTag|=512,e.firstEffect=e.lastEffect=null,e={value:n,source:e,stack:se(e)};do{switch(t.tag){case 3:return lr(t),t.updateQueue.capturedValues=[e],void(t.effectTag|=1024);case 2:if(n=t.stateNode,0==(64&t.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){lr(t);var r=(n=t.updateQueue).capturedValues;return null===r?n.capturedValues=[e]:r.push(e),void(t.effectTag|=1024)}}t=t.return}while(null!==t)},unwindWork:function(t){switch(t.tag){case 2:u(t);var e=t.effectTag;return 1024&e?(t.effectTag=-1025&e|64,t):null;case 3:return i(t),l(t),1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 5:return a(t),null;case 4:return i(t),null;case 13:return c(t),null;default:return null}},unwindInterruptedWork:function(t){switch(t.tag){case 2:u(t);break;case 3:i(t),l(t);break;case 5:a(t);break;case 4:i(t);break;case 13:c(t)}}}}(k,T,C,0,n)).throwException,I=k.unwindWork,j=k.unwindInterruptedWork,F=(k=function(t,e,n,r,o){function i(t){var n=t.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){e(t,n)}else n.current=null}function a(t){switch(rr(t),t.tag){case 2:i(t);var n=t.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=t.memoizedProps,n.state=t.memoizedState,n.componentWillUnmount()}catch(n){e(t,n)}break;case 5:i(t);break;case 7:u(t.stateNode);break;case 4:f&&c(t)}}function u(t){for(var e=t;;)if(a(e),null===e.child||f&&4===e.tag){if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;e=e.return}e.sibling.return=e.return,e=e.sibling}else e.child.return=e,e=e.child}function l(t){return 5===t.tag||3===t.tag||4===t.tag}function c(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break t;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(5===e.tag||6===e.tag)u(e),o?E(r,e.stateNode):x(r,e.stateNode);else if(4===e.tag?r=e.stateNode.containerInfo:a(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;4===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}var s=t.getPublicInstance,f=t.mutation;t=t.persistence,f||p(t?"235":"236");var d=f.commitMount,h=f.commitUpdate,v=f.resetTextContent,m=f.commitTextUpdate,y=f.appendChild,g=f.appendChildToContainer,b=f.insertBefore,w=f.insertInContainerBefore,x=f.removeChild,E=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(t,e){switch(e.tag){case 2:if(2048&e.effectTag&&null!==t){var n=t.memoizedProps,r=t.memoizedState;(t=e.stateNode).props=e.memoizedProps,t.state=e.memoizedState,e=t.getSnapshotBeforeUpdate(n,r),t.__reactInternalSnapshotBeforeUpdate=e}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(t){v(t.stateNode)},commitPlacement:function(t){t:{for(var e=t.return;null!==e;){if(l(e)){var n=e;break t}e=e.return}p("160"),n=void 0}var r=e=void 0;switch(n.tag){case 5:e=n.stateNode,r=!1;break;case 3:case 4:e=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(v(e),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(5===o.tag||6===o.tag)n?r?w(e,o.stateNode,n):b(e,o.stateNode,n):r?g(e,o.stateNode):y(e,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(t){c(t),t.return=null,t.child=null,t.alternate&&(t.alternate.child=null,t.alternate.return=null)},commitWork:function(t,e){switch(e.tag){case 2:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var o=e.type,i=e.updateQueue;e.updateQueue=null,null!==i&&h(n,i,o,t,r,e)}break;case 6:null===e.stateNode&&p("162"),n=e.memoizedProps,m(e.stateNode,null!==t?t.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(t,e,n){switch(n.tag){case 2:if(t=n.stateNode,4&n.effectTag)if(null===e)t.props=n.memoizedProps,t.state=n.memoizedState,t.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,t.props=n.memoizedProps,t.state=n.memoizedState,t.componentDidUpdate(r,e,t.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&pr(n,t);break;case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:t=s(n.child.stateNode);break;case 2:t=n.child.stateNode}pr(e,t)}break;case 5:t=n.stateNode,null===e&&4&n.effectTag&&d(t,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(t,e){switch(t.tag){case 2:var n=t.type;e=t.stateNode;var r=t.updateQueue;(null===r||null===r.capturedValues)&&p("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(e),e.props=t.memoizedProps,e.state=t.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;wr(t,r),e.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=t.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)wr(t,r=i[n]),e(r.value);break;default:p("265")}},commitAttachRef:function(t){var e=t.ref;if(null!==e){var n=t.stateNode;switch(t.tag){case 5:t=s(n);break;default:t=n}"function"==typeof e?e(t):e.current=t}},commitDetachRef:function(t){null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null)}}}(t,l,0,0,function(t){null===at?at=new Set([t]):at.add(t)})).commitBeforeMutationLifeCycles,L=k.commitResetTextContent,A=k.commitPlacement,D=k.commitDeletion,U=k.commitWork,z=k.commitLifeCycles,H=k.commitErrorLogging,W=k.commitAttachRef,B=k.commitDetachRef,V=t.now,q=t.scheduleDeferredCallback,K=t.cancelDeferredCallback,$=t.prepareForCommit,G=t.resetAfterCommit,Y=V(),Q=Y,X=0,J=0,Z=!1,tt=null,et=null,nt=0,rt=null,ot=!1,it=!1,at=null,ut=null,lt=null,ct=0,st=-1,ft=!1,pt=null,dt=0,ht=0,vt=!1,mt=!1,yt=null,gt=null,bt=!1,wt=!1,xt=!1,Et=null,_t=1e3,St=0,Pt=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:s,requestWork:m,flushRoot:function(t,e){ft&&p("253"),pt=t,dt=e,E(t,e,!1),b(),x()},batchedUpdates:function(t,e){var n=bt;bt=!0;try{return t(e)}finally{(bt=n)||ft||b()}},unbatchedUpdates:function(t,e){if(bt&&!wt){wt=!0;try{return t(e)}finally{wt=!1}}return t(e)},flushSync:function(t,e){ft&&p("187");var n=bt;bt=!0;try{return h(t,e)}finally{bt=n,b()}},flushControlled:function(t){var e=bt;bt=!0;try{h(t)}finally{(bt=e)||ft||w(1,!1,null)}},deferredUpdates:function(t){var e=J;J=25*(1+((d()+500)/25|0));try{return t()}finally{J=e}},syncUpdates:h,interactiveUpdates:function(t,e,n){if(xt)return t(e,n);bt||ft||0===ht||(w(ht,!1,null),ht=0);var r=xt,o=bt;bt=xt=!0;try{return t(e,n)}finally{xt=r,(bt=o)||ft||b()}},flushInteractiveUpdates:function(){ft||0===ht||(w(ht,!1,null),ht=0)},computeUniqueAsyncExpiration:function(){var t=25*(1+((d()+500)/25|0));return t<=X&&(t=X+1),X=t},legacyContext:T}}function _r(t){function e(t,e,n,r,o,a){if(r=e.current,n){n=n._reactInternalFiber;var u=l(n);n=c(n)?s(n,u):u}else n=f;return null===e.context?e.context=n:e.pendingContext=n,cr(r,{expirationTime:o,partialState:{element:t},callback:void 0===(e=a)?null:e,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=t.getPublicInstance,r=(t=Er(t)).recalculateCurrentTime,o=t.computeExpirationForFiber,i=t.scheduleWork,u=t.legacyContext,l=u.findCurrentUnmaskedContext,c=u.isContextProvider,s=u.processChildContext;return{createContainer:function(t,e,n){return t={current:e=new $n(3,null,null,e?3:0),containerInfo:t,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},e.stateNode=t},updateContainer:function(t,n,i,a){var u=n.current;return e(t,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(t,n,o,i,a){return e(t,n,o,r(),i,a)},flushRoot:t.flushRoot,requestWork:t.requestWork,computeUniqueAsyncExpiration:t.computeUniqueAsyncExpiration,batchedUpdates:t.batchedUpdates,unbatchedUpdates:t.unbatchedUpdates,deferredUpdates:t.deferredUpdates,syncUpdates:t.syncUpdates,interactiveUpdates:t.interactiveUpdates,flushInteractiveUpdates:t.flushInteractiveUpdates,flushControlled:t.flushControlled,flushSync:t.flushSync,getPublicRootInstance:function(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:return n(t.child.stateNode);default:return t.child.stateNode}},findHostInstance:function(t){var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?p("188"):p("268",Object.keys(t))),null===(t=Je(e))?null:t.stateNode},findHostInstanceWithNoPortals:function(t){return null===(t=function(t){if(!(t=Xe(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child&&4!==e.tag)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},injectIntoDevTools:function(t){var e=t.findFiberByHostInstance;return function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);Zn=er(function(t){return e.onCommitFiberRoot(n,t)}),tr=er(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}return!0}(a({},t,{findHostInstanceByFiber:function(t){return null===(t=Je(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}}}var Sr=Object.freeze({default:_r}),Pr=Sr&&_r||Sr,Cr=Pr.default?Pr.default:Pr;var kr="object"==typeof performance&&"function"==typeof performance.now,Tr=void 0;Tr=kr?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Mr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Nr=null,Rr=!1,Ir=-1,jr=!1,Fr=0,Lr=33,Ar=33,Dr=void 0;Dr=kr?{didTimeout:!1,timeRemaining:function(){var t=Fr-performance.now();return 0<t?t:0}}:{didTimeout:!1,timeRemaining:function(){var t=Fr-Date.now();return 0<t?t:0}};var Ur="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(t){if(t.source===window&&t.data===Ur){if(Rr=!1,t=Tr(),0>=Fr-t){if(!(-1!==Ir&&Ir<=t))return void(jr||(jr=!0,requestAnimationFrame(zr)));Dr.didTimeout=!0}else Dr.didTimeout=!1;Ir=-1,t=Nr,Nr=null,null!==t&&t(Dr)}},!1);var zr=function(t){jr=!1;var e=t-Fr+Ar;e<Ar&&Lr<Ar?(8>e&&(e=8),Ar=e<Lr?Lr:e):Lr=e,Fr=t+Ar,Rr||(Rr=!0,window.postMessage(Ur,"*"))};Or=function(t,e){return Nr=t,null!=e&&"number"==typeof e.timeout&&(Ir=Tr()+e.timeout),jr||(jr=!0,requestAnimationFrame(zr)),0},Mr=function(){Nr=null,Rr=!1,Ir=-1}}else Or=window.requestIdleCallback,Mr=window.cancelIdleCallback;else Or=function(t){return setTimeout(function(){t({timeRemaining:function(){return 1/0},didTimeout:!1})})},Mr=function(t){clearTimeout(t)};function Hr(t,e){return t=a({children:void 0},e),(e=function(t){var e="";return o.Children.forEach(t,function(t){null==t||"string"!=typeof t&&"number"!=typeof t||(e+=t)}),e}(e.children))&&(t.children=e),t}function Wr(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+n,e=null,o=0;o<t.length;o++){if(t[o].value===n)return t[o].selected=!0,void(r&&(t[o].defaultSelected=!0));null!==e||t[o].disabled||(e=t[o])}null!==e&&(e.selected=!0)}}function Br(t,e){var n=e.value;t._wrapperState={initialValue:null!=n?n:e.defaultValue,wasMultiple:!!e.multiple}}function Vr(t,e){return null!=e.dangerouslySetInnerHTML&&p("91"),a({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function qr(t,e){var n=e.value;null==n&&(n=e.defaultValue,null!=(e=e.children)&&(null!=n&&p("92"),Array.isArray(e)&&(1>=e.length||p("93"),e=e[0]),n=""+e),null==n&&(n="")),t._wrapperState={initialValue:""+n}}function Kr(t,e){var n=e.value;null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&(t.defaultValue=n)),null!=e.defaultValue&&(t.defaultValue=e.defaultValue)}function $r(t){var e=t.textContent;e===t._wrapperState.initialValue&&(t.value=e)}var Gr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Yr(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?Yr(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Xr,Jr=void 0,Zr=(Xr=function(t,e){if(t.namespaceURI!==Gr.svg||"innerHTML"in t)t.innerHTML=e;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+e+"</svg>",e=Jr.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(t,e)})}:Xr);function to(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=e[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||eo.hasOwnProperty(o)&&eo[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}Object.keys(eo).forEach(function(t){no.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),eo[e]=eo[t]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(t,e,n){e&&(oo[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&p("137",t,n()),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&p("60"),"object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML||p("61")),null!=e.style&&"object"!=typeof e.style&&p("62",n()))}function ao(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function lo(t,e){var n=Fn(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=x[e];for(var r=0;r<e.length;r++){var o=e[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?xn("topScroll","scroll",t):"topFocus"===o||"topBlur"===o?(xn("topFocus","focus",t),xn("topBlur","blur",t),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(qt("cancel",!0)&&xn("topCancel","cancel",t),n.topCancel=!0):"topClose"===o?(qt("close",!0)&&xn("topClose","close",t),n.topClose=!0):Mn.hasOwnProperty(o)&&wn(o,Mn[o],t),n[o]=!0)}}function co(t,e,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Gr.html&&(r=Yr(t)),r===Gr.html?"script"===t?((t=n.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):t="string"==typeof e.is?n.createElement(t,{is:e.is}):n.createElement(t):t=n.createElementNS(r,t),t}function so(t,e){return(9===e.nodeType?e:e.ownerDocument).createTextNode(t)}function fo(t,e,n,r){var o=ao(e,n);switch(e){case"iframe":case"object":wn("topLoad","load",t);var i=n;break;case"video":case"audio":for(i in Nn)Nn.hasOwnProperty(i)&&wn(i,Nn[i],t);i=n;break;case"source":wn("topError","error",t),i=n;break;case"img":case"image":case"link":wn("topError","error",t),wn("topLoad","load",t),i=n;break;case"form":wn("topReset","reset",t),wn("topSubmit","submit",t),i=n;break;case"details":wn("topToggle","toggle",t),i=n;break;case"input":we(t,n),i=be(t,n),wn("topInvalid","invalid",t),lo(r,"onChange");break;case"option":i=Hr(t,n);break;case"select":Br(t,n),i=a({},n,{value:void 0}),wn("topInvalid","invalid",t),lo(r,"onChange");break;case"textarea":qr(t,n),i=Vr(t,n),wn("topInvalid","invalid",t),lo(r,"onChange");break;default:i=n}io(e,i,uo);var l,c=i;for(l in c)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?ro(t,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&Zr(t,s):"children"===l?"string"==typeof s?("textarea"!==e||""!==s)&&to(t,s):"number"==typeof s&&to(t,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(w.hasOwnProperty(l)?null!=s&&lo(r,l):null!=s&&ge(t,l,s,o))}switch(e){case"input":$t(t),_e(t,n);break;case"textarea":$t(t),$r(t);break;case"option":null!=n.value&&t.setAttribute("value",n.value);break;case"select":t.multiple=!!n.multiple,null!=(e=n.value)?Wr(t,!!n.multiple,e,!1):null!=n.defaultValue&&Wr(t,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(t.onclick=u)}}function po(t,e,n,r,o){var i=null;switch(e){case"input":n=be(t,n),r=be(t,r),i=[];break;case"option":n=Hr(t,n),r=Hr(t,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Vr(t,n),r=Vr(t,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(t.onclick=u)}io(e,r,uo),e=t=void 0;var l=null;for(t in n)if(!r.hasOwnProperty(t)&&n.hasOwnProperty(t)&&null!=n[t])if("style"===t){var c=n[t];for(e in c)c.hasOwnProperty(e)&&(l||(l={}),l[e]="")}else"dangerouslySetInnerHTML"!==t&&"children"!==t&&"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&"autoFocus"!==t&&(w.hasOwnProperty(t)?i||(i=[]):(i=i||[]).push(t,null));for(t in r){var s=r[t];if(c=null!=n?n[t]:void 0,r.hasOwnProperty(t)&&s!==c&&(null!=s||null!=c))if("style"===t)if(c){for(e in c)!c.hasOwnProperty(e)||s&&s.hasOwnProperty(e)||(l||(l={}),l[e]="");for(e in s)s.hasOwnProperty(e)&&c[e]!==s[e]&&(l||(l={}),l[e]=s[e])}else l||(i||(i=[]),i.push(t,l)),l=s;else"dangerouslySetInnerHTML"===t?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(i=i||[]).push(t,""+s)):"children"===t?c===s||"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(t,""+s):"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&(w.hasOwnProperty(t)?(null!=s&&lo(o,t),i||c===s||(i=[])):(i=i||[]).push(t,s))}return l&&(i=i||[]).push("style",l),i}function ho(t,e,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&xe(t,o),ao(n,r),r=ao(n,o);for(var i=0;i<e.length;i+=2){var a=e[i],u=e[i+1];"style"===a?ro(t,u):"dangerouslySetInnerHTML"===a?Zr(t,u):"children"===a?to(t,u):ge(t,a,u,r)}switch(n){case"input":Ee(t,o);break;case"textarea":Kr(t,o);break;case"select":t._wrapperState.initialValue=void 0,e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Wr(t,!!o.multiple,n,!1):e!==!!o.multiple&&(null!=o.defaultValue?Wr(t,!!o.multiple,o.defaultValue,!0):Wr(t,!!o.multiple,o.multiple?[]:"",!1))}}function vo(t,e,n,r,o){switch(e){case"iframe":case"object":wn("topLoad","load",t);break;case"video":case"audio":for(var i in Nn)Nn.hasOwnProperty(i)&&wn(i,Nn[i],t);break;case"source":wn("topError","error",t);break;case"img":case"image":case"link":wn("topError","error",t),wn("topLoad","load",t);break;case"form":wn("topReset","reset",t),wn("topSubmit","submit",t);break;case"details":wn("topToggle","toggle",t);break;case"input":we(t,n),wn("topInvalid","invalid",t),lo(o,"onChange");break;case"select":Br(t,n),wn("topInvalid","invalid",t),lo(o,"onChange");break;case"textarea":qr(t,n),wn("topInvalid","invalid",t),lo(o,"onChange")}for(var a in io(e,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?t.textContent!==i&&(r=["children",i]):"number"==typeof i&&t.textContent!==""+i&&(r=["children",""+i]):w.hasOwnProperty(a)&&null!=i&&lo(o,a));switch(e){case"input":$t(t),_e(t,n);break;case"textarea":$t(t),$r(t);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(t.onclick=u)}return r}function mo(t,e){return t.nodeValue!==e}var yo=Object.freeze({createElement:co,createTextNode:so,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:vo,diffHydratedText:mo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(t,e,n){switch(e){case"input":if(Ee(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=q(r);o||p("90"),Gt(r),Ee(r,o)}}}break;case"textarea":Kr(t,n);break;case"select":null!=(e=n.value)&&Wr(t,!!n.multiple,e,!1)}}});Ot.injectFiberControlledHostComponent(yo);var go=null,bo=null;function wo(t){this._expirationTime=Po.computeUniqueAsyncExpiration(),this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Eo(t,e,n){this._internalRoot=Po.createContainer(t,e,n)}function _o(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function So(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}wo.prototype.render=function(t){this._defer||p("250"),this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new xo;return Po.updateContainerAtExpirationTime(t,e,null,n,r._onCommit),r},wo.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},wo.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(this._defer&&null!==e||p("251"),this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,o=e;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=e,t.firstBatch=this}this._defer=!1,Po.flushRoot(t,n),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},xo.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},xo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];"function"!=typeof n&&p("191",n),n()}}},Eo.prototype.render=function(t,e){var n=this._internalRoot,r=new xo;return null!==(e=void 0===e?null:e)&&r.then(e),Po.updateContainer(t,n,null,r._onCommit),r},Eo.prototype.unmount=function(t){var e=this._internalRoot,n=new xo;return null!==(t=void 0===t?null:t)&&n.then(t),Po.updateContainer(null,e,null,n._onCommit),n},Eo.prototype.legacy_renderSubtreeIntoContainer=function(t,e,n){var r=this._internalRoot,o=new xo;return null!==(n=void 0===n?null:n)&&o.then(n),Po.updateContainer(e,r,t,o._onCommit),o},Eo.prototype.createBatch=function(){var t=new wo(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime<=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t};var Po=Cr({getRootHostContext:function(t){var e=t.nodeType;switch(e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Qr(null,"");break;default:t=Qr(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}return t},getChildHostContext:function(t,e){return Qr(t,e)},getPublicInstance:function(t){return t},prepareForCommit:function(){go=gn;var t=l();if(Dn(t)){if("selectionStart"in t)var e={start:t.selectionStart,end:t.selectionEnd};else t:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){e=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{e.nodeType,o.nodeType}catch(t){e=null;break t}var i=0,a=-1,u=-1,c=0,s=0,f=t,p=null;e:for(;;){for(var d;f!==e||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===t)break e;if(p===e&&++c===r&&(a=i),p===o&&++s===n&&(u=i),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}e=-1===a||-1===u?null:{start:a,end:u}}else e=null}e=e||{start:0,end:0}}else e=null;bo={focusedElem:t,selectionRange:e},bn(!1)},resetAfterCommit:function(){var t=bo,e=l(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&s(document.documentElement,n)){if(Dn(n))if(e=r.start,void 0===(t=r.end)&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(window.getSelection){e=window.getSelection();var o=n[ot()].length;t=Math.min(r.start,o),r=void 0===r.end?t:Math.min(r.end,o),!e.extend&&t>r&&(o=r,r=t,t=o),o=An(n,t);var i=An(n,r);if(o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),e.removeAllRanges(),t>r?(e.addRange(a),e.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),e.addRange(a))}}for(e=[],t=n;t=t.parentNode;)1===t.nodeType&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(n.focus(),n=0;n<e.length;n++)(t=e[n]).element.scrollLeft=t.left,t.element.scrollTop=t.top}bo=null,bn(go),go=null},createInstance:function(t,e,n,r,o){return(t=co(t,e,n,r))[H]=o,t[W]=e,t},appendInitialChild:function(t,e){t.appendChild(e)},finalizeInitialChildren:function(t,e,n,r){return fo(t,e,n,r),So(e,n)},prepareUpdate:function(t,e,n,r,o){return po(t,e,n,r,o)},shouldSetTextContent:function(t,e){return"textarea"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&"string"==typeof e.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(t,e){return!!e.hidden},createTextInstance:function(t,e,n,r){return(t=so(t,e))[H]=r,t},now:Tr,mutation:{commitMount:function(t,e,n){So(e,n)&&t.focus()},commitUpdate:function(t,e,n,r,o){t[W]=o,ho(t,e,n,r,o)},resetTextContent:function(t){to(t,"")},commitTextUpdate:function(t,e,n){t.nodeValue=n},appendChild:function(t,e){t.appendChild(e)},appendChildToContainer:function(t,e){8===t.nodeType?t.parentNode.insertBefore(e,t):t.appendChild(e)},insertBefore:function(t,e,n){t.insertBefore(e,n)},insertInContainerBefore:function(t,e,n){8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},removeChildFromContainer:function(t,e){8===t.nodeType?t.parentNode.removeChild(e):t.removeChild(e)}},hydration:{canHydrateInstance:function(t,e){return 1!==t.nodeType||e.toLowerCase()!==t.nodeName.toLowerCase()?null:t},canHydrateTextInstance:function(t,e){return""===e||3!==t.nodeType?null:t},getNextHydratableSibling:function(t){for(t=t.nextSibling;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t},getFirstHydratableChild:function(t){for(t=t.firstChild;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t},hydrateInstance:function(t,e,n,r,o,i){return t[H]=i,t[W]=n,vo(t,e,n,o,r)},hydrateTextInstance:function(t,e,n){return t[H]=n,mo(t,e)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Mr}),Co=Po;function ko(t,e,n,r,o){_o(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var t=Po.getPublicRootInstance(i._internalRoot);a.call(t)}}null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)}else{if(i=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Eo(t,!1,e)}(n,r),"function"==typeof o){var u=o;o=function(){var t=Po.getPublicRootInstance(i._internalRoot);u.call(t)}}Po.unbatchedUpdates(function(){null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)})}return Po.getPublicRootInstance(i._internalRoot)}function To(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return _o(e)||p("200"),function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}At=Co.batchedUpdates,Dt=Co.interactiveUpdates,Ut=Co.flushInteractiveUpdates;var Oo={createPortal:To,findDOMNode:function(t){return null==t?null:1===t.nodeType?t:Po.findHostInstance(t)},hydrate:function(t,e,n){return ko(null,t,e,!0,n)},render:function(t,e,n){return ko(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){return(null==t||void 0===t._reactInternalFiber)&&p("38"),ko(t,e,n,!1,r)},unmountComponentAtNode:function(t){return _o(t)||p("40"),!!t._reactRootContainer&&(Po.unbatchedUpdates(function(){ko(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return To.apply(void 0,arguments)},unstable_batchedUpdates:Po.batchedUpdates,unstable_deferredUpdates:Po.deferredUpdates,flushSync:Po.flushSync,unstable_flushControlled:Po.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:S,EventPropagators:nt,ReactControlledComponent:Lt,ReactDOMComponentTree:K,ReactDOMEventListener:Sn},unstable_createRoot:function(t,e){return new Eo(t,!0,null!=e&&!0===e.hydrate)}};Po.injectIntoDevTools({findFiberByHostInstance:B,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Mo=Object.freeze({default:Oo}),No=Mo&&Oo||Mo;t.exports=No.default?No.default:No},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(171)},function(t,e,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(106),o=n(72),i=n(105),a=n(71),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.portal"):60106,s=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.provider"):60109,d=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,v=u?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function y(t){for(var e=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||g}function w(){}function x(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||g}b.prototype.isReactComponent={},b.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&y("85"),this.updater.enqueueSetState(this,t,e,"setState")},b.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},w.prototype=b.prototype;var E=x.prototype=new w;E.constructor=x,r(E,b.prototype),E.isPureReactComponent=!0;var _={current:null},S=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function C(t,e,n){var r=void 0,o={},i=null,a=null;if(null!=e)for(r in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(i=""+e.key),e)S.call(e,r)&&!P.hasOwnProperty(r)&&(o[r]=e[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(t&&t.defaultProps)for(r in u=t.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:t,key:i,ref:a,props:o,_owner:_.current}}function k(t){return"object"==typeof t&&null!==t&&t.$$typeof===l}var T=/\/+/g,O=[];function M(t,e,n,r){if(O.length){var o=O.pop();return o.result=t,o.keyPrefix=e,o.func=n,o.context=r,o.count=0,o}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function N(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>O.length&&O.push(t)}function R(t,e,n,r){var o=typeof t;"undefined"!==o&&"boolean"!==o||(t=null);var i=!1;if(null===t)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(t.$$typeof){case l:case c:i=!0}}if(i)return n(r,t,""===e?"."+I(t,0):e),1;if(i=0,e=""===e?".":e+":",Array.isArray(t))for(var a=0;a<t.length;a++){var u=e+I(o=t[a],a);i+=R(o,u,n,r)}else if(null===t||void 0===t?u=null:u="function"==typeof(u=m&&t[m]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),a=0;!(o=t.next()).done;)i+=R(o=o.value,u=e+I(o,a++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":n,"");return i}function I(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function j(t,e){t.func.call(t.context,e,t.count++)}function F(t,e,n){var r=t.result,o=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?L(t,r,n,a.thatReturnsArgument):null!=t&&(k(t)&&(e=o+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(T,"$&/")+"/")+n,t={$$typeof:l,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}),r.push(t))}function L(t,e,n,r,o){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),e=M(e,i,r,o),null==t||R(t,"",F,e),N(e)}var A={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return L(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;e=M(null,null,e,n),null==t||R(t,"",j,e),N(e)},count:function(t){return null==t?0:R(t,"",a.thatReturnsNull,null)},toArray:function(t){var e=[];return L(t,e,null,a.thatReturnsArgument),e},only:function(t){return k(t)||y("143"),t}},createRef:function(){return{current:null}},Component:b,PureComponent:x,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:d,_calculateChangedBits:e,_defaultValue:t,_currentValue:t,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:t},t.Consumer=t},forwardRef:function(t){return{$$typeof:v,render:t}},Fragment:s,StrictMode:f,unstable_AsyncMode:h,createElement:C,cloneElement:function(t,e,n){(null===t||void 0===t)&&y("267",t);var o=void 0,i=r({},t.props),a=t.key,u=t.ref,c=t._owner;if(null!=e){void 0!==e.ref&&(u=e.ref,c=_.current),void 0!==e.key&&(a=""+e.key);var s=void 0;for(o in t.type&&t.type.defaultProps&&(s=t.type.defaultProps),e)S.call(e,o)&&!P.hasOwnProperty(o)&&(i[o]=void 0===e[o]&&void 0!==s?s[o]:e[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:l,type:t.type,key:a,ref:u,props:i,_owner:c}},createFactory:function(t){var e=C.bind(null,t);return e.type=t,e},isValidElement:k,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},D=Object.freeze({default:A}),U=D&&A||D;t.exports=U.default?U.default:U},function(t,e,n){"use strict";var r=a(n(2)),o=a(n(172));n(164),n(390),n(385);var i=a(n(163));function a(t){return t&&t.__esModule?t:{default:t}}o.default.render(r.default.createElement(i.default,null),document.getElementById("root"))},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){var r=n(0),o=n(175)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e,n){n(176),t.exports=n(30).RegExp.escape},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag",c="object"==typeof t,s=e.regeneratorRuntime;if(s)c&&(t.exports=s);else{(s=e.regeneratorRuntime=c?t.exports:{}).wrap=w;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={},m={};m[a]=function(){return this};var y=Object.getPrototypeOf,g=y&&y(y(N([])));g&&g!==r&&o.call(g,a)&&(m=g);var b=S.prototype=E.prototype=Object.create(m);_.prototype=b.constructor=S,S.constructor=_,S[l]=_.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,l in t||(t[l]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},P(C.prototype),C.prototype[u]=function(){return this},s.AsyncIterator=C,s.async=function(t,e,n,r){var o=new C(w(t,e,n,r));return s.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},P(b),b[l]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},s.values=N,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=o.call(a,"catchLoc"),c=o.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:N(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function w(t,e,n,r){var o=e&&e.prototype instanceof E?e:E,i=Object.create(o.prototype),a=new M(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return R()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=k(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var l=x(t,e,n);if("normal"===l.type){if(r=n.done?h:p,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function x(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function _(){}function S(){}function P(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function C(t){function n(e,r,i,a){var u=x(t[e],t,r);if("throw"!==u.type){var l=u.arg,c=l.value;return c&&"object"==typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(c).then(function(t){l.value=t,i(l)},a)}a(u.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function k(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,k(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=x(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function N(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:R}}function R(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(141))},function(t,e,n){for(var r=n(78),o=n(43),i=n(16),a=n(5),u=n(17),l=n(48),c=n(8),s=c("iterator"),f=c("toStringTag"),p=l.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var m,y=h[v],g=d[y],b=a[y],w=b&&b.prototype;if(w&&(w[s]||u(w,s,p),w[f]||u(w,f,y),l[y]=p,g))for(m in r)w[m]||i(w,m,r[m],!0)}},function(t,e,n){var r=n(0),o=n(77);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){var r=n(5),o=n(0),i=n(73),a=[].slice,u=/MSIE .\./.test(i),l=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*u,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(t,e,n){"use strict";var r=n(0),o=n(5),i=n(30),a=n(76)(),u=n(8)("observable"),l=n(14),c=n(4),s=n(38),f=n(36),p=n(17),d=n(37),h=d.RETURN,v=function(t){return null==t?void 0:l(t)},m=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},g=function(t){y(t)||(t._o=void 0,m(t))},b=function(t,e){c(t),this._c=void 0,this._o=t,t=new w(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:l(n),this._c=n)}catch(e){return void t.error(e)}y(this)&&m(this)};b.prototype=f({},{unsubscribe:function(){g(this)}});var w=function(t){this._s=t};w.prototype=f({},{next:function(t){var e=this._s;if(!y(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{g(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{m(e)}finally{throw t}}return m(e),t},complete:function(t){var e=this._s;if(!y(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{m(e)}finally{throw t}}return m(e),t}}});var x=function(t){s(this,x,"Observable","_f")._f=l(t)};f(x.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)(function(n,r){l(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})})}}),f(x,{from:function(t){var e="function"==typeof this?this:x,n=v(c(t)[u]);if(n){var r=c(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(d(t,!1,function(t){if(e.next(t),n)return h})===h)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:x)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),p(x.prototype,u,function(){return this}),r(r.G,{Observable:x}),n(39)("Observable")},function(t,e,n){var r=n(0),o=n(76)(),i=n(5).process,a="process"==n(23)(i);r(r.G,{asap:function(t){var e=a&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){var r=n(32),o=n(4),i=n(14),a=r.key,u=r.set;r.exp({metadata:function(t,e){return function(n,r){u(t,e,(void 0!==r?o:i)(n),a(r))}}})},function(t,e,n){var r=n(32),o=n(4),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(4),i=n(18),a=r.has,u=r.key,l=function(t,e,n){if(a(t,e,n))return!0;var r=i(e);return null!==r&&l(t,r,n)};r.exp({hasMetadata:function(t,e){return l(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(4),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){var r=n(32),o=n(4),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(117),o=n(108),i=n(32),a=n(4),u=n(18),l=i.keys,c=i.key,s=function(t,e){var n=l(t,e),i=u(t);if(null===i)return n;var a=s(i,e);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(t){return s(a(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,n){var r=n(32),o=n(4),i=n(18),a=r.has,u=r.get,l=r.key,c=function(t,e,n){if(a(t,e,n))return u(t,e,n);var r=i(e);return null!==r?c(t,r,n):void 0};r.exp({getMetadata:function(t,e){return c(t,o(e),arguments.length<3?void 0:l(arguments[2]))}})},function(t,e,n){var r=n(32),o=n(4),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var l=u.get(e);return l.delete(n),!!l.size||u.delete(e)}})},function(t,e,n){var r=n(32),o=n(4),i=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,o(n),i(r))}})},function(t,e,n){"use strict";var r=n(0),o=n(75),i=n(121);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(0),o=n(30),i=n(5),a=n(59),u=n(120);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then(function(){return n})}:t,n?function(n){return u(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,l=(a*i>>>0)+(o*i>>>16);return a*u+(l>>>16)+((o*u>>>0)+(65535&l)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(107)})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>16,u=r>>16,l=(a*i>>>0)+(o*i>>>16);return a*u+(l>>16)+((o*u>>>0)+(65535&l)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0),o=n(107),i=n(127);r(r.S,"Math",{fscale:function(t,e,n,r,a){return i(o(t,e,n,r,a))}})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0),o=n(23);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(5)})},function(t,e,n){var r=n(0);r(r.G,{global:n(5)})},function(t,e,n){n(54)("WeakSet")},function(t,e,n){n(54)("WeakMap")},function(t,e,n){n(54)("Set")},function(t,e,n){n(54)("Map")},function(t,e,n){n(55)("WeakSet")},function(t,e,n){n(55)("WeakMap")},function(t,e,n){n(55)("Set")},function(t,e,n){n(55)("Map")},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(109)("Set")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(109)("Map")})},function(t,e,n){"use strict";var r=n(0),o=n(13),i=n(29),a=n(18),u=n(19).f;n(11)&&r(r.P+n(56),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.set}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(13),i=n(29),a=n(18),u=n(19).f;n(11)&&r(r.P+n(56),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.get}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(13),i=n(14),a=n(10);n(11)&&r(r.P+n(56),"Object",{__defineSetter__:function(t,e){a.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(13),i=n(14),a=n(10);n(11)&&r(r.P+n(56),"Object",{__defineGetter__:function(t,e){a.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){var r=n(0),o=n(110)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(110)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(113),i=n(20),a=n(19),u=n(82);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),l=a.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=l(r,e=c[f++]))&&u(s,e,n);return s}})},function(t,e,n){n(98)("observable")},function(t,e,n){n(98)("asyncIterator")},function(t,e,n){"use strict";var r=n(0),o=n(28),i=n(9),a=n(63),u=n(61),l=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};n(86)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in l?String(t.flags):u.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new c(r,e)}})},function(t,e,n){"use strict";n(49)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";n(49)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";var r=n(0),o=n(111),i=n(73);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(111),i=n(73);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(88)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(112),i=n(13),a=n(9),u=n(27),l=n(80);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=a(e.length),r=l(e,0);return o(r,e,e,n,0,void 0===t?1:u(t)),r}}),n(34)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(112),i=n(13),a=n(9),u=n(14),l=n(80);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return u(t),e=a(r.length),n=l(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(34)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(66)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(34)("includes")},function(t,e,n){var r=n(0),o=n(94);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){var r=n(10),o=n(19),i=n(18),a=n(21),u=n(0),l=n(46),c=n(4),s=n(7);u(u.S,"Reflect",{set:function t(e,n,u){var f,p,d=arguments.length<4?e:arguments[3],h=o.f(c(e),n);if(!h){if(s(p=i(e)))return t(p,n,u,d);h=l(0)}if(a(h,"value")){if(!1===h.writable||!s(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(d,n,f)}else r.f(d,n,l(0,u));return!0}return void 0!==h.set&&(h.set.call(d,u),!0)}})},function(t,e,n){var r=n(0),o=n(4),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(113)})},function(t,e,n){var r=n(0),o=n(4),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(18),i=n(4);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(19),o=n(0),i=n(4);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(19),o=n(18),i=n(21),a=n(0),u=n(7),l=n(4);a(a.S,"Reflect",{get:function t(e,n){var a,c,s=arguments.length<3?e:arguments[2];return l(e)===s?e[n]:(a=r.f(e,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:u(c=o(e))?t(c,n,s):void 0}})},function(t,e,n){"use strict";var r=n(0),o=n(4),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(86)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(0),o=n(19).f,i=n(4);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){var r=n(10),o=n(0),i=n(4),a=n(29);o(o.S+o.F*n(6)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){i(t),e=a(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(41),i=n(14),a=n(4),u=n(7),l=n(6),c=n(134),s=(n(5).Reflect||{}).construct,f=l(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),p=!l(function(){s(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!f)return s(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var l=n.prototype,d=o(u(l)?l:Object.prototype),h=Function.apply.call(t,d,e);return u(h)?h:d}})},function(t,e,n){var r=n(0),o=n(14),i=n(4),a=(n(5).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(6)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),l=i(n);return a?a(r,e,l):u.call(r,e,l)}})},function(t,e,n){n(33)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(33)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(33)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(57).ABV,{DataView:n(74).DataView})},function(t,e,n){"use strict";var r=n(0),o=n(57),i=n(74),a=n(4),u=n(42),l=n(9),c=n(7),s=n(5).ArrayBuffer,f=n(59),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&s.isView,v=p.prototype.slice,m=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return h&&h(t)||c(t)&&m in t}}),r(r.P+r.U+r.F*n(6)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=u(t,n),o=u(void 0===e?n:e,n),i=new(f(this,p))(l(o-r)),c=new d(this),s=new d(i),h=0;r<o;)s.setUint8(h++,c.getUint8(r++));return i}}),n(39)("ArrayBuffer")},function(t,e,n){"use strict";var r=n(115),o=n(47);n(58)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r,o,i,a,u=n(44),l=n(5),c=n(24),s=n(51),f=n(0),p=n(7),d=n(14),h=n(38),v=n(37),m=n(59),y=n(77).set,g=n(76)(),b=n(75),w=n(121),x=n(120),E=l.TypeError,_=l.process,S=l.Promise,P="process"==s(_),C=function(){},k=o=b.f,T=!!function(){try{var t=S.resolve(1),e=(t.constructor={})[n(8)("species")]=function(t){t(C,C)};return(P||"function"==typeof PromiseRejectionEvent)&&t.then(C)instanceof e}catch(t){}}(),O=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},M=function(t,e){if(!t._n){t._n=!0;var n=t._c;g(function(){for(var r=t._v,o=1==t._s,i=0,a=function(e){var n,i,a,u=o?e.ok:e.fail,l=e.resolve,c=e.reject,s=e.domain;try{u?(o||(2==t._h&&I(t),t._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===e.promise?c(E("Promise-chain cycle")):(i=O(n))?i.call(n,l,c):l(n)):c(r)}catch(t){s&&!a&&s.exit(),c(t)}};n.length>i;)a(n[i++]);t._c=[],t._n=!1,e&&!t._h&&N(t)})}},N=function(t){y.call(l,function(){var e,n,r,o=t._v,i=R(t);if(i&&(e=w(function(){P?_.emit("unhandledRejection",o,t):(n=l.onunhandledrejection)?n({promise:t,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=P||R(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},I=function(t){y.call(l,function(){var e;P?_.emit("rejectionHandled",t):(e=l.onrejectionhandled)&&e({promise:t,reason:t._v})})},j=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),M(e,!0))},F=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw E("Promise can't be resolved itself");(e=O(t))?g(function(){var r={_w:n,_d:!1};try{e.call(t,c(F,r,1),c(j,r,1))}catch(t){j.call(r,t)}}):(n._v=t,n._s=1,M(n,!1))}catch(t){j.call({_w:n,_d:!1},t)}}};T||(S=function(t){h(this,S,"Promise","_h"),d(t),r.call(this);try{t(c(F,this,1),c(j,this,1))}catch(t){j.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(36)(S.prototype,{then:function(t,e){var n=k(m(this,S));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=P?_.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=c(F,t,1),this.reject=c(j,t,1)},b.f=k=function(t){return t===S||t===a?new i(t):o(t)}),f(f.G+f.W+f.F*!T,{Promise:S}),n(50)(S,"Promise"),n(39)("Promise"),a=n(30).Promise,f(f.S+f.F*!T,"Promise",{reject:function(t){var e=k(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(u||!T),"Promise",{resolve:function(t){return x(u&&this===a?S:this,t)}}),f(f.S+f.F*!(T&&n(62)(function(t){S.all(t).catch(C)})),"Promise",{all:function(t){var e=this,n=k(e),r=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,a=1;v(t,!1,function(t){var u=i++,l=!1;n.push(void 0),a++,e.resolve(t).then(function(t){l||(l=!0,n[u]=t,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=k(e),r=n.reject,o=w(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e,n){n(60)("split",2,function(t,e,r){"use strict";var o=n(63),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var u=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!o(t))return i.call(n,t,e);var r,l,c,s,f,p=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,v=void 0===e?4294967295:e>>>0,m=new RegExp(t.source,d+"g");for(u||(r=new RegExp("^"+m.source+"$(?!\\s)",d));(l=m.exec(n))&&!((c=l.index+l[0].length)>h&&(p.push(n.slice(h,l.index)),!u&&l.length>1&&l[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(l[f]=void 0)}),l.length>1&&l.index<n.length&&a.apply(p,l.slice(1)),s=l[0].length,h=c,p.length>=v));)m.lastIndex===l.index&&m.lastIndex++;return h===n.length?!s&&m.test("")||p.push(""):p.push(n.slice(h)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)});return[function(n,o){var i=t(this),a=void 0==n?void 0:n[e];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(t,e,n){n(60)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(60)("replace",2,function(t,e,n){return[function(r,o){"use strict";var i=t(this),a=void 0==r?void 0:r[e];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(t,e,n){n(60)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(122);var r=n(4),o=n(61),i=n(11),a=/./.toString,u=function(t){n(16)(RegExp.prototype,"toString",t,!0)};n(6)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,e,n){var r=n(5),o=n(92),i=n(10).f,a=n(40).f,u=n(63),l=n(61),c=r.RegExp,s=c,f=c.prototype,p=/a/g,d=/a/g,h=new c(p)!==p;if(n(11)&&(!h||n(6)(function(){return d[n(8)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(t,e){var n=this instanceof c,r=u(t),i=void 0===e;return!n&&r&&t.constructor===c&&i?t:o(h?new s(r&&!i?t.source:t,e):s((r=t instanceof c)?t.source:t,r&&i?l.call(t):e),n?this:f,c)};for(var v=function(t){t in c||i(c,t,{configurable:!0,get:function(){return s[t]},set:function(e){s[t]=e}})},m=a(s),y=0;m.length>y;)v(m[y++]);f.constructor=c,c.prototype=f,n(16)(r,"RegExp",c)}n(39)("RegExp")},function(t,e,n){n(39)("Array")},function(t,e,n){"use strict";var r=n(0),o=n(25)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(34)(i)},function(t,e,n){"use strict";var r=n(0),o=n(25)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(34)("find")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(79)}),n(34)("fill")},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(124)}),n(34)("copyWithin")},function(t,e,n){"use strict";var r=n(0),o=n(20),i=n(27),a=n(9),u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(22)(u)),"Array",{lastIndexOf:function(t){if(l)return u.apply(this,arguments)||0;var e=o(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){"use strict";var r=n(0),o=n(66)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(22)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(125);r(r.P+r.F*!n(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(125);r(r.P+r.F*!n(22)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(4);r(r.P+r.F*!n(22)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(3);r(r.P+r.F*!n(22)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(2);r(r.P+r.F*!n(22)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(1);r(r.P+r.F*!n(22)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(7),o=n(64),i=n(8)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(25)(0),i=n(22)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(14),i=n(13),a=n(6),u=[].sort,l=[1,2,3];r(r.P+r.F*(a(function(){l.sort(void 0)})||!a(function(){l.sort(null)})||!n(22)(u)),"Array",{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(95),i=n(23),a=n(42),u=n(9),l=[].slice;r(r.P+r.F*n(6)(function(){o&&l.call(o)}),"Array",{slice:function(t,e){var n=u(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return l.call(this,t,e);for(var o=a(t,n),c=a(e,n),s=u(c-o),f=new Array(s),p=0;p<s;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(t,e,n){"use strict";var r=n(0),o=n(20),i=[].join;r(r.P+r.F*(n(53)!=Object||!n(22)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(82);r(r.S+r.F*n(6)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(24),o=n(0),i=n(13),a=n(126),u=n(83),l=n(9),c=n(82),s=n(81);o(o.S+o.F*!n(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,f,p=i(t),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,m=void 0!==v,y=0,g=s(p);if(m&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==g||d==Array&&u(g))for(n=new d(e=l(p.length));e>y;y++)c(n,y,m?v(p[y],y):p[y]);else for(f=g.call(p),n=new d;!(o=f.next()).done;y++)c(n,y,m?a(f,v,[o.value,y],!0):o.value);return n.length=y,n}})},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(64)})},function(t,e,n){"use strict";var r=n(4),o=n(29);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(8)("toPrimitive"),o=Date.prototype;r in o||n(17)(o,r,n(292))},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(16)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,e,n){"use strict";var r=n(6),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(t,e,n){var r=n(0),o=n(295);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(0),o=n(13),i=n(29);r(r.P+r.F*n(6)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";n(15)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){"use strict";n(15)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(15)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(15)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(15)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(15)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(15)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(15)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(15)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(15)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(15)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(15)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(15)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(85),a="".startsWith;r(r.P+r.F*n(84)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(91)})},function(t,e,n){"use strict";var r=n(0),o=n(85);r(r.P+r.F*n(84)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(85),a="".endsWith;r(r.P+r.F*n(84)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),u=void 0===n?r:Math.min(o(n),r),l=String(t);return a?a.call(e,l,u):e.slice(u-l.length,u)===l}})},function(t,e,n){"use strict";var r=n(0),o=n(88)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(88)(!0);n(87)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";n(49)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){var r=n(0),o=n(20),i=n(9);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(e[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,e,n){var r=n(0),o=n(42),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(89),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0),o=n(89),i=Math.exp;r(r.S+r.F*n(6)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(90)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(128)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(6)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,a=0,u=arguments.length,l=0;a<u;)l<(n=o(arguments[a++]))?(i=i*(r=l/n)*r+1,l=n):i+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(i)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(127)})},function(t,e,n){var r=n(0),o=n(89);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=n(90);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=n(128),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=n(132);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(131);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0),o=n(129),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(129)})},function(t,e,n){var r=n(0),o=n(5).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(130),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(27),i=n(130),a=n(91),u=1..toFixed,l=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=l(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=l(n/t),n=n%t*1e7},d=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},h=function(t,e,n){return 0===e?n:e%2==1?h(t,e-1,n*t):h(t*t,e/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(6)(function(){u.call({})})),"Number",{toFixed:function(t){var e,n,r,u,l=i(this,s),c=o(t),v="",m="0";if(c<0||c>20)throw RangeError(s);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(v="-",l=-l),l>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(l*h(2,69,1))-69)<0?l*h(2,-e,1):l/h(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),m=d()}else f(0,n),f(1<<-e,0),m=d()+a.call("0",c);return m=c>0?v+((u=m.length)<=c?"0."+a.call("0",c-u)+m:m.slice(0,u-c)+"."+m.slice(u-c)):v+m}})},function(t,e,n){"use strict";var r=n(5),o=n(21),i=n(23),a=n(92),u=n(29),l=n(6),c=n(40).f,s=n(19).f,f=n(10).f,p=n(49).trim,d=r.Number,h=d,v=d.prototype,m="Number"==i(n(41)(v)),y="trim"in String.prototype,g=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=y?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var a,l=e.slice(2),c=0,s=l.length;c<s;c++)if((a=l.charCodeAt(c))<48||a>o)return NaN;return parseInt(l,r)}}return+e};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof d&&(m?l(function(){v.valueOf.call(n)}):"Number"!=i(n))?a(new h(g(e)),n,d):g(e)};for(var b,w=n(11)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(h,b=w[x])&&!o(d,b)&&f(d,b,s(h,b));d.prototype=v,v.constructor=d,n(16)(r,"Number",d)}},function(t,e,n){var r=n(0),o=n(131);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){var r=n(0),o=n(132);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){"use strict";var r=n(7),o=n(18),i=n(8)("hasInstance"),a=Function.prototype;i in a||n(10).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(10).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(11)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(134)})},function(t,e,n){"use strict";var r=n(51),o={};o[n(8)("toStringTag")]="z",o+""!="[object z]"&&n(16)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(94).set})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(357)})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(135)})},function(t,e,n){var r=n(7);n(26)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(7);n(26)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(7);n(26)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(7),o=n(35).onFreeze;n(26)("preventExtensions",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(7),o=n(35).onFreeze;n(26)("seal",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(7),o=n(35).onFreeze;n(26)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){n(26)("getOwnPropertyNames",function(){return n(136).f})},function(t,e,n){var r=n(13),o=n(43);n(26)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(13),o=n(18);n(26)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(20),o=n(19).f;n(26)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(11),"Object",{defineProperties:n(137)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(11),"Object",{defineProperty:n(10).f})},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(41)})},function(t,e,n){var r=n(43),o=n(65),i=n(52);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,u=n(t),l=i.f,c=0;u.length>c;)l.call(t,a=u[c++])&&e.push(a);return e}},function(t,e,n){"use strict";var r=n(5),o=n(21),i=n(11),a=n(0),u=n(16),l=n(35).KEY,c=n(6),s=n(67),f=n(50),p=n(45),d=n(8),h=n(139),v=n(98),m=n(373),y=n(64),g=n(4),b=n(7),w=n(20),x=n(29),E=n(46),_=n(41),S=n(136),P=n(19),C=n(10),k=n(43),T=P.f,O=C.f,M=S.f,N=r.Symbol,R=r.JSON,I=R&&R.stringify,j=d("_hidden"),F=d("toPrimitive"),L={}.propertyIsEnumerable,A=s("symbol-registry"),D=s("symbols"),U=s("op-symbols"),z=Object.prototype,H="function"==typeof N,W=r.QObject,B=!W||!W.prototype||!W.prototype.findChild,V=i&&c(function(){return 7!=_(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=T(z,e);r&&delete z[e],O(t,e,n),r&&t!==z&&O(z,e,r)}:O,q=function(t){var e=D[t]=_(N.prototype);return e._k=t,e},K=H&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof N},$=function(t,e,n){return t===z&&$(U,e,n),g(t),e=x(e,!0),g(n),o(D,e)?(n.enumerable?(o(t,j)&&t[j][e]&&(t[j][e]=!1),n=_(n,{enumerable:E(0,!1)})):(o(t,j)||O(t,j,E(1,{})),t[j][e]=!0),V(t,e,n)):O(t,e,n)},G=function(t,e){g(t);for(var n,r=m(e=w(e)),o=0,i=r.length;i>o;)$(t,n=r[o++],e[n]);return t},Y=function(t){var e=L.call(this,t=x(t,!0));return!(this===z&&o(D,t)&&!o(U,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,j)&&this[j][t])||e)},Q=function(t,e){if(t=w(t),e=x(e,!0),t!==z||!o(D,e)||o(U,e)){var n=T(t,e);return!n||!o(D,e)||o(t,j)&&t[j][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=M(w(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==j||e==l||r.push(e);return r},J=function(t){for(var e,n=t===z,r=M(n?U:w(t)),i=[],a=0;r.length>a;)!o(D,e=r[a++])||n&&!o(z,e)||i.push(D[e]);return i};H||(u((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===z&&e.call(U,n),o(this,j)&&o(this[j],t)&&(this[j][t]=!1),V(this,t,E(1,n))};return i&&B&&V(z,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",function(){return this._k}),P.f=Q,C.f=$,n(40).f=S.f=X,n(52).f=Y,n(65).f=J,i&&!n(44)&&u(z,"propertyIsEnumerable",Y,!0),h.f=function(t){return q(d(t))}),a(a.G+a.W+a.F*!H,{Symbol:N});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)d(Z[tt++]);for(var et=k(d.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!H,"Symbol",{for:function(t){return o(A,t+="")?A[t]:A[t]=N(t)},keyFor:function(t){if(!K(t))throw TypeError(t+" is not a symbol!");for(var e in A)if(A[e]===t)return e},useSetter:function(){B=!0},useSimple:function(){B=!1}}),a(a.S+a.F*!H,"Object",{create:function(t,e){return void 0===e?_(t):G(_(t),e)},defineProperty:$,defineProperties:G,getOwnPropertyDescriptor:Q,getOwnPropertyNames:X,getOwnPropertySymbols:J}),R&&a(a.S+a.F*(!H||c(function(){var t=N();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!K(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!K(e))return e}),r[1]=e,I.apply(R,r)}}),N.prototype[F]||n(17)(N.prototype,F,N.prototype.valueOf),f(N,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){n(374),n(372),n(371),n(370),n(369),n(368),n(367),n(366),n(365),n(364),n(363),n(362),n(361),n(360),n(359),n(358),n(356),n(355),n(354),n(353),n(352),n(351),n(350),n(349),n(348),n(347),n(346),n(345),n(344),n(343),n(342),n(341),n(340),n(339),n(338),n(337),n(336),n(335),n(334),n(333),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(325),n(324),n(323),n(322),n(321),n(320),n(319),n(318),n(317),n(316),n(315),n(314),n(313),n(312),n(311),n(310),n(309),n(308),n(307),n(306),n(305),n(304),n(303),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(294),n(293),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(283),n(282),n(281),n(280),n(279),n(278),n(277),n(276),n(275),n(274),n(273),n(272),n(271),n(78),n(270),n(269),n(122),n(268),n(267),n(266),n(265),n(264),n(119),n(117),n(116),n(263),n(262),n(261),n(260),n(259),n(258),n(257),n(256),n(255),n(254),n(253),n(252),n(251),n(250),n(249),n(248),n(247),n(246),n(245),n(244),n(243),n(242),n(241),n(240),n(239),n(238),n(237),n(236),n(235),n(234),n(233),n(232),n(231),n(230),n(229),n(228),n(227),n(226),n(225),n(224),n(223),n(222),n(221),n(220),n(219),n(218),n(217),n(216),n(215),n(214),n(213),n(212),n(211),n(210),n(209),n(208),n(207),n(206),n(205),n(204),n(203),n(202),n(201),n(200),n(199),n(198),n(197),n(196),n(195),n(194),n(193),n(192),n(191),n(190),n(189),n(188),n(187),n(186),n(185),n(184),n(183),n(182),n(181),n(180),n(179),t.exports=n(30)},function(t,e,n){"use strict";(function(t){if(n(375),n(178),n(177),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(141))},function(t,e,n){n(376),t.exports=n(174)},,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvbGF5b3V0L0RlZmF1bHRQYWdlTGF5b3V0LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy91aS9mcmFua2xpbl9sb2dvLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2NvbW1vbi9zYW1wbGUtZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvY29tcG9uZW50cy9wYWdpbmF0aW9uLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL3NuaXBwZXRzL1BhZ2luYXRpb25TbmlwcGV0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvY29tbW9uL3BhdHRlcm5BdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL3NyYy91aS9jb21wb25lbnRzL3RpbGUuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9jb21wb25lbnRzL2NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2FwcC9VSUNvbXBvbmVudHMuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9hcHAvQ29sb3Vycy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2FwcC9UeXBvZ3JhcGh5LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL0F0b21zLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL0hlYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xheW91dC9EZWZhdWx0UGFnZUNvbnRlbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9hcHAvSG9tZVBhZ2UuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvQXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvZmF2aWNvbi5pY28iLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJrZXkiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwiZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiYSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImIiLCJlcnJvciIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiZGVmaW5lZCIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTdHJpbmciLCJwMSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsImxlbmd0aCIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJ0aGlzIiwiY3JlYXRlRGVzYyIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiSU9iamVjdCIsIm1ldGhvZCIsImFyZyIsInRvU3RyaW5nIiwic2xpY2UiLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJhcHBseSIsImFyZ3VtZW50cyIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJLRVkiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInZhbHVlT2YiLCJ2ZXJzaW9uIiwiX19lIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsImNoYXJBdCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwicGFyc2VQYXRoIiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoIiwiaGFzaEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwic2V0Iiwia2V5TWV0YWRhdGEiLCJtYXAiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsImtleXMiLCJmb3JFYWNoIiwiXyIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4Iiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIlVOU0NPUEFCTEVTIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsIm1heCIsInB4IiwicmFuZG9tIiwiYml0bWFwIiwiX3QiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiZGVmIiwic3RhdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImZvck9mIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiRCIsIlNZTUJPTCIsImZucyIsInN0cmZuIiwicnhmbiIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsIk1BVENIIiwiaXNSZWdFeHAiLCJpc0FycmF5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsIl9yZWFjdCIsIkRlZmF1bHRQYWdlTGF5b3V0IiwicHJvcHMiLCJfcmVhY3QyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIl9IZWFkZXIyIiwiY2xhc3NOYW1lIiwiX0RlZmF1bHRQYWdlQ29udGVudDIiLCJjb250ZW50IiwicHJvcFR5cGVzIiwidGl0bGUiLCJQcm9wVHlwZXMiLCJlbGVtZW50IiwiZGVmYXVsdFByb3BzIiwib2JqIiwiX3dhcm5pbmciLCJfd2FybmluZzIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsIml0ZW0iLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImxvY2F0aW9uc0FyZUVxdWFsIiwiY3JlYXRlTG9jYXRpb24iLCJfZXh0ZW5kcyIsImFzc2lnbiIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJJbmZpbml0eSIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJwcm9jZXNzIiwiUHJvbWlzZSIsImlzTm9kZSIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuZXh0VGljayIsInN0YW5kYWxvbmUiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsImtpbmQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZW5kUG9zIiwib3JpZ2luYWwiLCJnZXRJdGVyYXRvck1ldGhvZCIsIiRkZWZpbmVQcm9wZXJ0eSIsInJlIiwic2VhcmNoU3RyaW5nIiwiZGVzY3JpcHRvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiZ2V0TWV0aG9kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiJGV4cG0xIiwiZXhwbTEiLCJ4Iiwic2lnbiIsImNvdW50Iiwic3RyIiwic2V0UHJvdG90eXBlT2YiLCJjaGVjayIsImJ1Z2d5IiwiX19wcm90b19fIiwiZG9jdW1lbnRFbGVtZW50Iiwid2tzRXh0IiwiJFN5bWJvbCIsImlzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl90eXBlb2YiLCJ2YWx1ZUVxdWFsIiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImsiLCJwb3AiLCJ0byIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIlJvdXRlcl9Sb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX3RlbXAiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIm1hdGNoIiwiY29tcHV0ZU1hdGNoIiwiaGlzdG9yeSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsInJvdXRlciIsImNvbnRleHQiLCJyb3V0ZSIsInVybCIsInBhcmFtcyIsImlzRXhhY3QiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfdGhpczIiLCJfcHJvcHMiLCJjaGlsZHJlbiIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJyZWFjdF9kZWZhdWx0IiwiQ2hpbGRyZW4iLCJ1bmxpc3RlbiIsImxpc3RlbiIsInNldFN0YXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImJyb3dzZXJfZGVmYXVsdCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyIiwib25seSIsIkNvbXBvbmVudCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImlzUmVxdWlyZWQiLCJjb250ZXh0VHlwZXMiLCJjaGlsZENvbnRleHRUeXBlcyIsImVzX1JvdXRlciIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGVyIiwiQnJvd3NlclJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQnJvd3NlclJvdXRlcl9Ccm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVCcm93c2VySGlzdG9yeV9kZWZhdWx0IiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsImJhc2VuYW1lIiwiZm9yY2VSZWZyZXNoIiwiYm9vbCIsImZ1bmMiLCJrZXlMZW5ndGgiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVIYXNoSGlzdG9yeV9kZWZhdWx0IiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsImhhc2hUeXBlIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJocmVmIiwiY3JlYXRlSHJlZiIsInJlZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZGVmYXVsdCIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImluaXRpYWxFbnRyaWVzIiwiYXJyYXkiLCJpbml0aWFsSW5kZXgiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19tYXRjaFBhdGgiLCJvcHRpb25zIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsInBhdHRlcm4iLCJjYWNoZUtleSIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsIm1hdGNoUGF0aF9jb21waWxlUGF0aCIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiX3JlZiIsImNvbXB1dGVkTWF0Y2giLCJjb21wb25lbnQiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJlc19Sb3V0ZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGUiLCJOYXZMaW5rX2V4dGVuZHMiLCJOYXZMaW5rX05hdkxpbmsiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9yZWYyIiwiYXJpYS1jdXJyZW50IiwiZXNfTmF2TGluayIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsIm1lc3NhZ2UiLCJ1bmJsb2NrIiwiYmxvY2siLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiTG9jYXRpb25VdGlsc19leHRlbmRzIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsInJlc29sdmVfcGF0aG5hbWUiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVfZXF1YWwiLCJSZWRpcmVjdF9SZWRpcmVjdCIsIlJlZGlyZWN0IiwiUmVkaXJlY3RfY2xhc3NDYWxsQ2hlY2siLCJSZWRpcmVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVkaXJlY3RfaW5oZXJpdHMiLCJpc1N0YXRpYyIsInBlcmZvcm0iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZEJhc2VuYW1lIiwiUGF0aFV0aWxzIiwiU3RhdGljUm91dGVyX2NyZWF0ZUxvY2F0aW9uIiwiX29iamVjdCRwYXRobmFtZSIsIl9vYmplY3Qkc2VhcmNoIiwiX29iamVjdCRoYXNoIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsImdvIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwicmVhY3Rfcm91dGVyX2RvbV9lc19TdGF0aWNSb3V0ZXIiLCJTd2l0Y2hfU3dpdGNoIiwiU3dpdGNoIiwiU3dpdGNoX2NsYXNzQ2FsbENoZWNrIiwiU3dpdGNoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTd2l0Y2hfaW5oZXJpdHMiLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsImNsb25lRWxlbWVudCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3dpdGNoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImRpc3BsYXlOYW1lIiwiV3JhcHBlZENvbXBvbmVudCIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2RlZmF1bHQiLCJzdHlsZXMiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJ4bWxucyIsImZpbGxSdWxlIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJjeCIsImN5IiwiY2FuVXNlRE9NIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsImdldEtleXMiLCJpc0VudW0iLCJpc0VudHJpZXMiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJnT1BTIiwiUmVmbGVjdCIsIm93bktleXMiLCJnZXRTeW1ib2xzIiwiJGhhcyIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJfbCIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJlbnRyeSIsImRlbGV0ZSIsInNwbGljZSIsInVmc3RvcmUiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwidG1wIiwiJFdlYWtNYXAiLCJmcmVlemUiLCJfZiIsInN0cm9uZyIsImFkZCIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwicHJldiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJmbGFncyIsImluYyIsImlzUmlnaHQiLCJyZXQiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsImxvZzFwIiwiaXNGaW5pdGUiLCJtc2ciLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCIkdHJpbSIsIiRwYXJzZUludCIsInBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInVuIiwiZmFjdG9yaWVzIiwiYmluZCIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25zdHJ1Y3QiLCIkYXNzaWduIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImRlZmluZVByb3BlcnRpZXMiLCJuYW1lcyIsImciLCJldmFsIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZmFjdG9yeSIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJhdHRhY2hLZXlzIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiX0xvY2F0aW9uVXRpbHMiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJfcHJvcHMka2V5TGVuZ3RoIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJjcmVhdGVLZXkiLCJuZXh0SW5kZXgiLCJvayIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJfaW52YXJpYW50MiIsIl9ET01VdGlscyIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicmVwbGFjZUhhc2hQYXRoIiwiZ2xvYmFsSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImdldERPTUxvY2F0aW9uIiwiZm9yY2VOZXh0UG9wIiwiaWdub3JlUGF0aCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImhhbmRsZVBvcCIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJhbGxQYXRocyIsImRlbHRhIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJoYW5kbGVQb3BTdGF0ZSIsImFsbEtleXMiLCJwdXNoU3RhdGUiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsIl9jYWxsZWUiLCJwYWdlIiwic2l6ZSIsInRvdGFsSXRlbXMiLCJpdGVtc1BlclBhZ2UiLCJpdGVtcyIsInJlc3VsdHMiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJ3cmFwIiwiX2NvbnRleHQiLCJhYnJ1cHQiLCJ0b3RhbCIsInN0b3AiLCJmZXRjaFBhZ2UiLCJQYWdlIiwiSXRlbSIsIlBhZ2VyIiwiU3RlcHMiLCJOZXh0IiwiUHJldmlvdXMiLCJGaXJzdCIsIkxhc3QiLCJQYWdlU2l6ZXMiLCJQYWdpbmF0aW9uIiwiX2luaXRpYWxpc2VQcm9wcyIsIkxvYWRpbmdDb21wb25lbnQiLCJsb2FkZXIiLCJsb2FkaW5nQ29tcG9uZW50IiwiYWRkUHJvcHNUb1N0YXRlIiwiX3N0YXRlIiwiY3VycmVudFBhZ2UiLCJwcmVwYXJlQ2hpbGRyZW4iLCJfdGhpczMiLCJiZWZvcmVMb2FkIiwibG9hZGluZyIsIl90aGlzNCIsImFmdGVyTG9hZCIsIl90aGlzNSIsImlubmVyQ29tcG9uZW50cyIsImJ1dHRvbnNUZW1wbGF0ZSIsImRldGFpbHMiLCJsYWJlbCIsIl90aGlzNiIsInBhZ2VXaWxsTG9hZCIsInBhZ2VEaWRMb2FkIiwiTm9JdGVtcyIsImVtcHR5IiwiZm9yY2VVcGRhdGUiLCJyZXBsYWNlQ29tcG9uZW50cyIsImNvbXAiLCJ0ZW1wbGF0ZSIsIk5ld0NvbXBvbmVudCIsImdlbmVyYXRlU3RlcHMiLCJuZXh0UGFnZSIsInByZXZpb3VzUGFnZSIsImZpcnN0UGFnZSIsImxhc3RQYWdlIiwiZ2VuZXJhdGVQYWdlU2l6ZU9wdGlvbnMiLCJfc3RhdGUyIiwiaG93TWFueSIsIlN0ZXAiLCJjbGFzc2VzIiwic2V0UGFnZSIsIl9zdGF0ZTMiLCJfc3RhdGU0IiwiX3N0YXRlNSIsInNpemVzIiwiRWFjaE9wdGlvbiIsInNldFBhZ2VTaXplIiwibmV3UGFnZVNpemUiLCJfc3RhdGU2IiwiY2FsY3VsYXRlZEN1cnJlbnRQYWdlIiwiX3NhbXBsZURhdGEiLCJjb25zb2xlIiwiUGFnaW5hdG9yIiwiX3BhZ2luYXRpb24yIiwibWFyZ2luIiwicHVycG9zZSIsImZ1bmN0aW9uIiwiVGlsZSIsImRlc2NyaXB0aW9uIiwiX3BhdHRlcm5BdHRyaWJ1dGVzMiIsImNvbXBvbmVudHMiLCJVSUNvbXBvbmVudHNDb250ZW50IiwiX0RlZmF1bHRQYWdlTGF5b3V0MiIsImRhdGEtbmFtZSIsIkhvbWVQYWdlQ29udGVudCIsIl9Db2xvdXJzMiIsIl9UeXBvZ3JhcGh5MiIsIl9yZWFjdFJvdXRlckRvbSIsIl9mcmFua2xpbl9sb2dvMiIsIkRlZmF1bHRQYWdlQ29udGVudCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIkhvbWVQYWdlIiwiQXRvbXMiLCJVSUNvbXBvbmVudHMiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInkiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiYmEiLCJlYSIsImZhIiwiaGEiLCJqYSIsImthIiwiRSIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaCIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm9hIiwicGEiLCJxYSIsInJhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJzYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidGEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJkZXBlbmRlbmNpZXMiLCJ3YSIsInhhIiwiQ2EiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsImN1cnJlbnRUYXJnZXQiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJQYSIsIlFhIiwiUmEiLCJpbmplY3Rpb24iLCJnZXRMaXN0ZW5lciIsInJ1bkV2ZW50c0luQmF0Y2giLCJydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJYYSIsImJiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJMIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5iIiwib2IiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsImlzVHJ1c3RlZCIsIk4iLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwic2IiLCJldmVudFBvb2wiLCJ0YiIsImRlc3RydWN0b3IiLCJyYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJleHRlbmQiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiZG9jdW1lbnRNb2RlIiwiemIiLCJBYiIsIkJiIiwiS2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTGIiLCJNYiIsImtleUNvZGUiLCJOYiIsImRldGFpbCIsIk9iIiwiUmIiLCJ3aGljaCIsIlBiIiwiY2hhciIsIlFiIiwiU2IiLCJUYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJVYiIsIlZiIiwiV2IiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsImdjIiwiaGMiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImljIiwic2V0QXR0cmlidXRlIiwiamMiLCJsYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwia2MiLCJtYyIsImNoZWNrZWQiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIiQkdHlwZW9mIiwiQmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkNjIiwiRGMiLCJFYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJWIiwiU2MiLCJUYyIsIlVjIiwiR2MiLCJIYyIsIkZjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJWYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiV2MiLCJYYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJZYyIsIlpjIiwiJGMiLCJhZCIsInRhYkluZGV4IiwiYmQiLCJjaGFuZ2UiLCJjZCIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJwZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJxZCIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInRkIiwidWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwicGFyZW50V2luZG93IiwieGQiLCJlZmZlY3RUYWciLCJ5ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ6ZCIsIkFkIiwic2libGluZyIsImN1cnJlbnQiLCJCZCIsIkRkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkZkIiwiR2QiLCJjaGFyQ29kZSIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJNZCIsIk5kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJPZCIsIlBkIiwiUWQiLCJpc0ludGVyYWN0aXZlIiwiUmQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJTZCIsIlRkIiwiVWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJhZSIsImJlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2UiLCJkZSIsImVlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJmaXJzdENoaWxkIiwibWUiLCJ0ZXh0Q29udGVudCIsIm5leHRTaWJsaW5nIiwibmUiLCJjb250ZW50RWRpdGFibGUiLCJvZSIsInBlIiwic2VsZWN0IiwicWUiLCJzZSIsInRlIiwidWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInZlIiwib25TZWxlY3QiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwiemUiLCJBZSIsImlzUmVhY3RDb21wb25lbnQiLCJCZSIsIkNlIiwiRGUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJmaXJzdCIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsImNhcHR1cmVkVmFsdWVzIiwiTGUiLCJTZXQiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwicGFydGlhbFN0YXRlIiwiUmUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhcHR1cmVkVmFsdWUiLCJTZSIsIlVlIiwiVmUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmVmcyIsIldlIiwiWGUiLCJ6IiwicSIsInUiLCJ0IiwiUSIsIkgiLCJZZSIsIlplIiwiJGUiLCJwZW5kaW5nQ29udGV4dCIsIlkiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsInB1c2hQcm92aWRlciIsImdldE1hc2tlZENvbnRleHQiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVwZGF0ZXIiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIlRlIiwiS2MiLCJMYyIsIkRiIiwiTWMiLCJFYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2NoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiY2YiLCJzdGFjayIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJlZiIsImxmIiwiSSIsIllhIiwiWiIsIk5jIiwieWEiLCJjYSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIk9jIiwiWmEiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJjb21wb25lbnREaWRDYXRjaCIsImlhIiwiemEiLCJkYSIsIkZiIiwieGciLCJ5ZSIsIkljIiwiUGMiLCJHYiIsIm1nIiwiUWMiLCJsZyIsInRpbWVvdXQiLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwibGEiLCJKIiwiSGIiLCJhYSIsIiRhIiwiSWIiLCJBYSIsIl9vbkNvbXBsZXRlIiwid2ciLCJCYSIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwiYWIiLCJrZyIsIndlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJoYW5kbGVyIiwiYWYiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJiZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsInBmIiwicmYiLCJwZXJmb3JtYW5jZSIsInNmIiwidGYiLCJ1ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiZGlkVGltZW91dCIsIkRmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRWYiLCJjbGVhclRpbWVvdXQiLCJHZiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIkpmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIm1hdGhtbCIsInN2ZyIsIk9mIiwiUGYiLCJRZiIsIlJmIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlNmIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiVGYiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5IiwiVWYiLCJWZiIsInNldFByb3BlcnR5IiwiV2YiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImNyZWF0ZUVsZW1lbnROUyIsImJnIiwiY2ciLCJfX2h0bWwiLCJvbmNsaWNrIiwiZGciLCJlZyIsImZnIiwibmciLCJvZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJwZyIsInFnIiwicmciLCJYIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwic2ciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwidGciLCJfaW50ZXJuYWxSb290IiwidWciLCJ2ZyIsImF1dG9Gb2N1cyIsImNvbW1pdCIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsInRhZ05hbWUiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicWYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJjcmVhdGVGYWN0b3J5IiwiUmVhY3RET00iLCJfQXBwMiIsImdldEVsZW1lbnRCeUlkIiwicmVnRXhwIiwicmVwbGFjZXIiLCIkcmUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJldHVybiIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJHRhc2siLCJNU0lFIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJtaWNyb3Rhc2siLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJfYyIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiX3MiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJPYnNlcnZhYmxlIiwiYXNhcCIsIiRtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJtZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiZGVsZXRlTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsInRyeSIsInByb21pc2VSZXNvbHZlIiwiZmluYWxseSIsIm9uRmluYWxseSIsInNpZ25iaXQiLCJ1bXVsaCIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsIkRFR19QRVJfUkFEIiwiUEkiLCJyYWRpYW5zIiwiZGVncmVlcyIsIlJBRF9QRVJfREVHIiwiaW11bGgiLCJpc3ViaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJsb3dlciIsInVwcGVyIiwiaXNFcnJvciIsInRvSlNPTiIsIl9fbG9va3VwU2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiR2YWx1ZXMiLCJjcmVhdGVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsInJlZ2V4cCIsIl9yIiwibWF0Y2hBbGwiLCJyeCIsImxhc3RJbmRleCIsIiRwYWQiLCJwYWRFbmQiLCJwYWRTdGFydCIsIiRhdCIsImF0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiZmxhdE1hcCIsIiRpbmNsdWRlcyIsInNldFByb3RvIiwicHJvcGVydHlLZXkiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJyZWNlaXZlciIsIm93bkRlc2MiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNFeHRlbnNpYmxlIiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwiZGVsZXRlUHJvcGVydHkiLCJhdHRyaWJ1dGVzIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJpbml0IiwiJGlzVmlldyIsImlzVmlldyIsImZpbmFsIiwidmlld1MiLCJ2aWV3VCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCIkUHJvbWlzZSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfdiIsInJlYWN0aW9uIiwiZXhpdGVkIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiU0VBUkNIIiwiJHNlYXJjaCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiJG1hdGNoIiwiJGZsYWdzIiwiZGVmaW5lIiwiJFJlZ0V4cCIsInJlMSIsInJlMiIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsIiRmaW5kIiwiZm9yY2VkIiwiTkVHQVRJVkVfWkVSTyIsIiRpbmRleE9mIiwiJHJlZHVjZSIsIiRldmVyeSIsIiRzb21lIiwiJGZpbHRlciIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJHNvcnQiLCJ1cFRvIiwiY2xvbmVkIiwiaGludCIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsImdldFRpbWUiLCIkdG9JU09TdHJpbmciLCJ0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicHYiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwiY29kZVBvaW50QXQiLCJwb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiY29kZSIsInRydW5jIiwidGFuaCIsInNpbmgiLCJsb2cyIiwibG9nMTAiLCJMT0cxMEUiLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsInNxcnQiLCJjb3NoIiwiY2x6MzIiLCJMT0cyRSIsImNicnQiLCIkYXRhbmgiLCJhdGFuaCIsIiRhc2luaCIsImFzaW5oIiwiJGFjb3NoIiwiYWNvc2giLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTUFYX1NBRkVfSU5URUdFUiIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJfaXNGaW5pdGUiLCIkZmFpbHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ4MiIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiRlByb3RvIiwibmFtZVJFIiwiJGlzU2VhbGVkIiwiJGlzRnJvemVuIiwiJHNlYWwiLCIkZnJlZXplIiwiJGdldFByb3RvdHlwZU9mIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiJHJlcGxhY2VyIiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FB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RUFBQUMsUUFBQUMsY0FBQSxpQ0FDQUYsRUFBQUMsUUFBQUMsY0FBQSxpQ0FDQUYsRUFBQUMsUUFBQUMsY0FBQSxZQUdGRixFQUFBQyxRQUFBQyxjQUFBLGVBQ0VGLEVBQUFDLFFBQUFDLGNBQUEsd0JBQ0FGLEVBQUFDLFFBQUFDLGNBQUEseWNBTzZCRixFQUFBQyxRQUFBQyxjQUFBLEtBQUdzVCxLQUFLLG1CQUFSLGFBRTdCeFQsRUFBQUMsUUFBQUMsY0FBQSxZQUdGRixFQUFBQyxRQUFBQyxjQUFBLGVBQ0VGLEVBQUFDLFFBQUFDLGNBQUEsbUJBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsdUJBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsVUFDRUYsRUFBQUMsUUFBQUMsY0FBQSxvQkFDQUYsRUFBQUMsUUFBQUMsY0FBQSxvQkFDQUYsRUFBQUMsUUFBQUMsY0FBQSxvQkFDQUYsRUFBQUMsUUFBQUMsY0FBQSxvQkFDQUYsRUFBQUMsUUFBQUMsY0FBQSxxQkFHRkYsRUFBQUMsUUFBQUMsY0FBQSxxQkFDQUYsRUFBQUMsUUFBQUMsY0FBQSxVQUNFRixFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxjQUFBLHFCQUdGRixFQUFBQyxRQUFBQyxjQUFBLDhCQUNBRixFQUFBQyxRQUFBQyxjQUFBLFVBQ0VGLEVBQUFDLFFBQUFDLGNBQUEsb0JBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsMkNBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsb0JBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsMkNBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsb0JBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsNENBR0ZGLEVBQUFDLFFBQUFDLGNBQUEsd0JBQ0FGLEVBQUFDLFFBQUFDLGNBQUEsTUFBSUcsVUFBVSxhQUNaTCxFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxjQUFBLG9CQUNBRixFQUFBQyxRQUFBQyxj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QUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsSUFDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUcsRUFBQUQsUUFBQUYsRUFBQSwrQ0M1TEEsR0FOQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUFBLEVBQUEsS0FFQTZCLEVBQUFrcUYsZUFDQSxVQUFBMW1GLE1BQUEsa0RBRUF4RCxFQUFBa3FGLGdCQUFBLEVBRUEsSUFBQUMsRUFBQSxpQkFDQSxTQUFBckosRUFBQTc5RSxFQUFBekMsRUFBQWpCLEdBQ0EwRCxFQUFBekMsSUFBQXZCLE9BQUFrckYsR0FBQWxuRixFQUFBekMsR0FDQTBSLFVBQUEsRUFDQS9TLGNBQUEsRUFDQUksVUFJQXVoRixFQUFBMThFLE9BQUF4RSxVQUFBLGFBQUFvN0UsVUFDQThGLEVBQUExOEUsT0FBQXhFLFVBQUEsY0FBQW03RSxRQUVBLGdNQUFBdDJFLE1BQUEsS0FBQXVGLFFBQUEsU0FBQXhKLE1BQ0FBLElBQUFzZ0YsRUFBQWoxRSxNQUFBckwsRUFBQWlCLFNBQUEvQyxLQUFBby9CLFFBQUF0OUIiLCJmaWxlIjoiYXBwLmJkZjJlNGI2Njk0ZDA3NDUzMzBjLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzc3KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIGhhc0Jhc2VuYW1lID0gZXhwb3J0cy5oYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGV4cG9ydHMuc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbnZhciBwYXJzZVBhdGggPSBleHBvcnRzLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGNyZWF0ZVBhdGggPSBleHBvcnRzLmNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgRGVmYXVsdFBhZ2VDb250ZW50IGZyb20gJy4vRGVmYXVsdFBhZ2VDb250ZW50JztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vYXBwL0hlYWRlcic7XG5cbmNvbnN0IERlZmF1bHRQYWdlTGF5b3V0ID0gcHJvcHMgPT4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlZmF1bHQtcGFnZS1sYXlvdXQgZ3JpZC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxEZWZhdWx0UGFnZUNvbnRlbnQ+e3Byb3BzLmNvbnRlbnR9PC9EZWZhdWx0UGFnZUNvbnRlbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4pO1xuXG5EZWZhdWx0UGFnZUxheW91dC5wcm9wVHlwZXMgPSB7XG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGVudDogUHJvcFR5cGVzLmVsZW1lbnRcbn07XG5cbkRlZmF1bHRQYWdlTGF5b3V0LmRlZmF1bHRQcm9wcyA9IHtcbiAgICB0aXRsZTogJ1BhZ2UgVGl0bGUnLFxuICAgIGNvbnRlbnQ6ICgpID0+IDxoMz5QYWdlIENvbnRlbnQ8L2gzPlxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVmYXVsdFBhZ2VMYXlvdXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHVybDogJy8nLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSAnLydcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgJ0EgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudCcpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PicpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaGFzaGJhbmcnLCAnbm9zbGFzaCcsICdzbGFzaCddKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSByaWdodCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncmVwbGFjZScsICd0bycsICdpbm5lclJlZiddKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIGhyZWYgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuY3JlYXRlSHJlZih0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8geyBwYXRobmFtZTogdG8gfSA6IHRvKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gJycgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIHBhdGggPSBfb3B0aW9ucyRwYXRoID09PSB1bmRlZmluZWQgPyAnLycgOiBfb3B0aW9ucyRwYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gJy8nICYmIHVybCA9PT0gJycgPyAnLycgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudCA/IC8vIGNvbXBvbmVudCBwcm9wIGdldHMgZmlyc3QgcHJpb3JpdHksIG9ubHkgY2FsbGVkIGlmIHRoZXJlJ3MgYSBtYXRjaFxuICAgIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGwgOiByZW5kZXIgPyAvLyByZW5kZXIgcHJvcCBpcyBuZXh0LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogY2hpbGRyZW4gPyAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihwcm9wcykgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbCA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCBMaW5rIGZyb20gJy4vTGluayc7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYuYXJpYUN1cnJlbnQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsndG8nLCAnZXhhY3QnLCAnc3RyaWN0JywgJ2xvY2F0aW9uJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdjbGFzc05hbWUnLCAnYWN0aXZlU3R5bGUnLCAnc3R5bGUnLCAnaXNBY3RpdmUnLCAnYXJpYUN1cnJlbnQnXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiAodHlwZW9mIHRvID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0bykpID09PSAnb2JqZWN0JyA/IHRvLnBhdGhuYW1lIDogdG8sXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKCcgJykgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgICdhcmlhLWN1cnJlbnQnOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFyaWFDdXJyZW50OiBQcm9wVHlwZXMub25lT2YoWydwYWdlJywgJ3N0ZXAnLCAnbG9jYXRpb24nLCAndHJ1ZSddKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScsXG4gIGFyaWFDdXJyZW50OiAndHJ1ZSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1Byb21wdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJ2hpc3RvcnknO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdVxcJ3JlIGN1cnJlbnRseSBvbjogJyArICgnXCInICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArICdcIicpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHB1c2ggPSBfcHJvcHMucHVzaCxcbiAgICAgICAgdG8gPSBfcHJvcHMudG87XG5cblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9IGZyb20gJ2hpc3RvcnkvUGF0aFV0aWxzJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG52YXIgbm9ybWFsaXplTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbihvYmplY3QpIHtcbiAgdmFyIF9vYmplY3QkcGF0aG5hbWUgPSBvYmplY3QucGF0aG5hbWUsXG4gICAgICBwYXRobmFtZSA9IF9vYmplY3QkcGF0aG5hbWUgPT09IHVuZGVmaW5lZCA/ICcvJyA6IF9vYmplY3QkcGF0aG5hbWUsXG4gICAgICBfb2JqZWN0JHNlYXJjaCA9IG9iamVjdC5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfb2JqZWN0JHNlYXJjaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JHNlYXJjaCxcbiAgICAgIF9vYmplY3QkaGFzaCA9IG9iamVjdC5oYXNoLFxuICAgICAgaGFzaCA9IF9vYmplY3QkaGFzaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JGhhc2g7XG5cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgobG9jYXRpb24pIDogbm9ybWFsaXplTG9jYXRpb24obG9jYXRpb24pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgJ1lvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPicsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1BVU0gnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiYXNlbmFtZScsICdjb250ZXh0JywgJ2xvY2F0aW9uJ10pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246ICdQT1AnLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcignZ28nKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcignZ29CYWNrJyksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoJ2dvRm9yd2FyZCcpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogJycsXG4gIGxvY2F0aW9uOiAnLydcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN0YXRpY1JvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHJldHVybjtcblxuICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pIDogcm91dGUubWF0Y2g7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Td2l0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAncmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgWyd3cmFwcGVkQ29tcG9uZW50UmVmJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywgeyByZWY6IHdyYXBwZWRDb21wb25lbnRSZWYgfSkpO1xuICAgICAgfSB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gJ3dpdGhSb3V0ZXIoJyArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgJyknO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuZXhwb3J0IGRlZmF1bHQgKChfcmVmKSA9PiB7XG4gIGxldCB7XG4gICAgc3R5bGVzID0ge31cbiAgfSA9IF9yZWYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJzdHlsZXNcIl0pO1xuXG4gIHJldHVybiA8c3ZnIHdpZHRoPVwiNjRcIiBoZWlnaHQ9XCI2NFwiIHZpZXdCb3g9XCIwIDAgNjQgNjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgey4uLnByb3BzfT48dGl0bGU+QXJ0Ym9hcmQgQ29weSAyPC90aXRsZT48ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPjxjaXJjbGUgc3Ryb2tlPVwiIzAwNDg2NFwiIHN0cm9rZVdpZHRoPVwiNFwiIGN4PVwiMzJcIiBjeT1cIjMyXCIgcj1cIjMwXCIgLz48cGF0aCBkPVwiTTM1LjE3IDIyLjg5NmwtNC4zIDI0LjUzMmMtLjM2IDIuMS0uOTkgMy42LTEuODkgNC41LS45LjkwMS0yLjIyIDEuMzUxLTMuOTYxIDEuMzUxLTEuNTMgMC0zLjIwMy0uMTg3LTUuMDE5LS41NjJsLjc4OC0zLjQ4OWMxLjQ4NS4zMyAyLjYxOC40OTUgMy4zOTguNDk1Ljg4NSAwIDEuNTI3LS4yNCAxLjkyNC0uNzIuMzk4LS40OC43MS0xLjM4OC45MzQtMi43MjNsNC4wMjktMjMuMzg0aC00LjUyNGwuNDk1LTMuMTI4aDQuNTdsLjU2Mi0zLjAzOWMuMzQ1LTIuMTc1Ljg3OC0zLjc0MyAxLjU5OC00LjcwM0MzNC45MTQgMTAuNjc2IDM2LjU1IDEwIDM4LjY4IDEwYy42IDAgMS40ODUuMTUgMi42NTYuNDVsMS42Mi4zODMuNDA1LjA5LS43NjUgMy40NjZjLTEuNjItLjM3NS0yLjc3Ni0uNTYzLTMuNDY2LS41NjMtLjk0NSAwLTEuNjA5LjIzNi0xLjk5Mi43MDktLjM4Mi40NzMtLjcwMSAxLjQzNy0uOTU2IDIuODkybC0uNDA1IDIuMzRoNC41NDZsLS41NCAzLjEyOWgtNC42MTR6XCIgZmlsbD1cIiMwMDQ4NjRcIiAvPjwvZz48L3N2Zz47XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyAoMCwgX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCkocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCkoKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgKDAsIF9Mb2NhdGlvblV0aWxzLmxvY2F0aW9uc0FyZUVxdWFsKShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsIlxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hQYWdlIChwYWdlLCBzaXplKSB7XG4gIGxldCB0b3RhbEl0ZW1zID0gMjc7XG4gIC8vIHRvdGFsSXRlbXMgKz0gKHBhZ2UgKiAzKTsgICAgIC8vIGNoYW5naW5nIHBhZ2Ugc2l6ZVxuICBjb25zdCBpdGVtc1BlclBhZ2UgPSAodG90YWxJdGVtcyA8IHBhZ2UgKiBzaXplKVxuICAgID8gdG90YWxJdGVtcyAlIHNpemUgICAgIC8vIGxhc3QgcGFnZVxuICAgIDogc2l6ZTtcblxuICBpZiAoaXRlbXNQZXJQYWdlIDwgMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgaXRlbXMgPSBBcnJheShpdGVtc1BlclBhZ2UpXG4gICAgLmZpbGwobnVsbClcbiAgICAubWFwKCh4LCBpKSA9PiAoe1xuICAgICAgYTogKChwYWdlIC0gMSkgKiBzaXplKSArIGkgKyAxLFxuICAgICAgYjogKCgpID0+IHBhZ2UgKyBpICogMikoKVxuICAgIH0pKTtcblxuICBjb25zdCByZXN1bHRzID0ge1xuICAgIHRvdGFsOiB0b3RhbEl0ZW1zLFxuICAgIGl0ZW1zXG4gIH1cblxuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHJlc3VsdHMpLCAxMDAwKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmZXRjaFBhZ2Vcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50LCBDaGlsZHJlbiwgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBQYWdlID0gKCkgPT4gbnVsbDtcbmNvbnN0IEl0ZW0gPSAoKSA9PiBudWxsO1xuY29uc3QgUGFnZXIgPSAoKSA9PiBudWxsO1xuY29uc3QgU3RlcHMgPSAoKSA9PiBudWxsO1xuY29uc3QgTmV4dCA9ICgpID0+IG51bGw7XG5jb25zdCBQcmV2aW91cyA9ICgpID0+IG51bGw7XG5jb25zdCBGaXJzdCA9ICgpID0+IG51bGw7XG5jb25zdCBMYXN0ID0gKCkgPT4gbnVsbDtcbmNvbnN0IFBhZ2VTaXplcyA9ICgpID0+IG51bGw7XG5cbmNsYXNzIFBhZ2luYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRlID0ge1xuICAgIGN1cnJlbnRQYWdlOiBudWxsLFxuICAgIGl0ZW1zUGVyUGFnZTogbnVsbCxcbiAgICB0b3RhbEl0ZW1zOiBudWxsLFxuICAgIGl0ZW1zOiBudWxsLFxuICAgIGxvYWRpbmc6IGZhbHNlXG4gIH1cblxuICBpbm5lckNvbXBvbmVudHMgPSBudWxsO1xuICBsb2FkaW5nQ29tcG9uZW50ID0gPGgzPkxvYWRpbmcuLi48L2gzPjtcbiAgYnV0dG9uc1RlbXBsYXRlID0gZGV0YWlscyA9PiAoKSA9PiA8YnV0dG9uPntkZXRhaWxzLmxhYmVsfTwvYnV0dG9uPjtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCBMb2FkaW5nQ29tcG9uZW50ID0gcHJvcHMubG9hZGVyO1xuXG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbG9hZGVyKSB7XG4gICAgICB0aGlzLmxvYWRpbmdDb21wb25lbnQgPSA8TG9hZGluZ0NvbXBvbmVudCAvPjtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG5cbiAgICB0aGlzLmFkZFByb3BzVG9TdGF0ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudFBhZ2UsIGl0ZW1zUGVyUGFnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5mZXRjaFBhZ2UoY3VycmVudFBhZ2UsIGl0ZW1zUGVyUGFnZSlcbiAgICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcmVwYXJlQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIGZldGNoUGFnZSA9IChjdXJyZW50UGFnZSwgaXRlbXNQZXJQYWdlKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hQYWdlID0gdGhpcy5wcm9wcy5mZXRjaFBhZ2UgfHwgKCgpID0+IFtdKTtcblxuICAgIHRoaXMucGFnZVdpbGxMb2FkKCk7XG5cbiAgICBmZXRjaFBhZ2UoY3VycmVudFBhZ2UsIGl0ZW1zUGVyUGFnZSlcbiAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGN1cnJlbnRQYWdlOiBwYXJzZUludChjdXJyZW50UGFnZSksXG4gICAgICAgICAgaXRlbXM6IHJlc3VsdHMuaXRlbXMsXG4gICAgICAgICAgdG90YWxJdGVtczogcmVzdWx0cy50b3RhbFxuICAgICAgICB9LCB0aGlzLnBhZ2VEaWRMb2FkKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcGFnZVdpbGxMb2FkKCkge1xuICAgIGNvbnN0IHsgYmVmb3JlTG9hZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH0sICgpID0+IHtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYmVmb3JlTG9hZCkge1xuICAgICAgICBiZWZvcmVMb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJlcGFyZUNoaWxkcmVuKCk7XG4gICAgfSk7XG4gIH1cblxuICBwYWdlRGlkTG9hZCgpIHtcbiAgICBjb25zdCB7IGFmdGVyTG9hZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbG9hZGluZzogZmFsc2VcbiAgICB9LCAoKSA9PiB7XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFmdGVyTG9hZCkge1xuICAgICAgICBhZnRlckxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmVwYXJlQ2hpbGRyZW4oKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGFkZFByb3BzVG9TdGF0ZSgpIHtcbiAgICBjb25zdCB7IGN1cnJlbnRQYWdlLCBpdGVtc1BlclBhZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICBjdXJyZW50UGFnZTogcGFyc2VJbnQoY3VycmVudFBhZ2UpLFxuICAgICAgaXRlbXNQZXJQYWdlOiBwYXJzZUludChpdGVtc1BlclBhZ2UpXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2V0U3RhdGUoc3RhdGUsIHJlc29sdmUpKTtcbiAgfVxuXG4gIHByZXBhcmVDaGlsZHJlbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGxvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgTm9JdGVtcyA9IHRoaXMucHJvcHMuZW1wdHkgfHwgKCgpID0+IG51bGwpO1xuXG4gICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgIHRoaXMuaW5uZXJDb21wb25lbnRzID0gdGhpcy5sb2FkaW5nQ29tcG9uZW50O1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcGxhY2VDb21wb25lbnRzID0gY29tcCA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGNvbXAucHJvcHMgJiYgY29tcC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIGxldCB0ZW1wbGF0ZSA9IG51bGw7XG4gICAgICBsZXQgTmV3Q29tcG9uZW50ID0gbnVsbDtcblxuICAgICAgLy8gYmFzZSBjYXNlc1xuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgY29tcCkge1xuICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgIH1cblxuICAgICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKFBhZ2UgPT09IGNvbXAudHlwZSAmJiBQYWdlciA9PT0gY29tcC50eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoKGNvbXAudHlwZSkge1xuICAgICAgICAvLyAnYnJlYWsnIHN0YXRlbWVudHMgYXJlIHJlZHVuZGFudCwgYnV0IGFyZSBhZGRlZCBmb3IgdGhlIGV4dHJhIGNsYXJpdHkuXG4gICAgICAgIGNhc2UgUGFnZXI6XG4gICAgICAgICAgdGVtcGxhdGUgPSBjb21wLnByb3BzLnRlbXBsYXRlO1xuXG4gICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNUZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBObyBicmVhayBoZXJlLiBGYWxsLXRocm91Z2ggdG8gdGhlIGJlbG93IGNhc2UuXG5cbiAgICAgICAgLy8gV3JhcHBlciBDb21wb25lbnRzXG4gICAgICAgIGNhc2UgUGFnZTpcbiAgICAgICAgY2FzZSBQYWdlcjpcbiAgICAgICAgICBOZXdDb21wb25lbnQgPSBwcm9wcyA9PiB7XG4gICAgICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudCg8TmV3Q29tcG9uZW50IC8+LCB7XG4gICAgICAgICAgICAuLi5jb21wLnByb3BzLFxuICAgICAgICAgICAgY2hpbGRyZW46IENoaWxkcmVuLm1hcChjaGlsZHJlbiwgcmVwbGFjZUNvbXBvbmVudHMpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJdGVtOlxuICAgICAgICAgIGNvbnN0IHsgaXRlbXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdGVtcGxhdGUgPSBjb21wLnByb3BzLnRlbXBsYXRlO1xuICAgICAgICAgIE5ld0NvbXBvbmVudCA9IChudWxsICE9PSBpdGVtcyAmJiAwIDwgaXRlbXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBpdGVtcy5tYXAoaXRlbSA9PiB0ZW1wbGF0ZShpdGVtKSlcbiAgICAgICAgICAgIDogPE5vSXRlbXMgLz47XG5cbiAgICAgICAgICByZXR1cm4gTmV3Q29tcG9uZW50O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU3RlcHM6XG4gICAgICAgICAgdGVtcGxhdGUgPSBjb21wLnByb3BzLnRlbXBsYXRlIHx8IHRoaXMuYnV0dG9uc1RlbXBsYXRlO1xuICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlU3RlcHModGVtcGxhdGUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTmV4dDpcbiAgICAgICAgY2FzZSBQcmV2aW91czpcbiAgICAgICAgY2FzZSBGaXJzdDpcbiAgICAgICAgY2FzZSBMYXN0OlxuICAgICAgICAgIHRlbXBsYXRlID0gY29tcC5wcm9wcy50ZW1wbGF0ZSB8fCB0aGlzLmJ1dHRvbnNUZW1wbGF0ZVxuICAgICAgICAgIE5ld0NvbXBvbmVudCA9IHRlbXBsYXRlKHtcbiAgICAgICAgICAgIGxhYmVsOiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBjaGlsZHJlbilcbiAgICAgICAgICAgICAgPyBjaGlsZHJlblxuICAgICAgICAgICAgICA6IGNvbXAudHlwZS5uYW1lLFxuICAgICAgICAgICAgb25DbGljazogKCgpID0+IHtcbiAgICAgICAgICAgICAgc3dpdGNoKGNvbXAudHlwZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTmV4dCc6IHJldHVybiB0aGlzLm5leHRQYWdlO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1ByZXZpb3VzJzogcmV0dXJuIHRoaXMucHJldmlvdXNQYWdlO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0ZpcnN0JzogcmV0dXJuIHRoaXMuZmlyc3RQYWdlO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0xhc3QnOiByZXR1cm4gdGhpcy5sYXN0UGFnZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIDxOZXdDb21wb25lbnQgLz47XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYWdlU2l6ZXM6XG4gICAgICAgICAgbGV0IHsgb3B0aW9ucyB9ID0gY29tcC5wcm9wcztcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGNvbXAucHJvcHMudGVtcGxhdGUgfHwgdGhpcy5idXR0b25zVGVtcGxhdGU7XG5cbiAgICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucy5zcGxpdCgnLCcpXG4gICAgICAgICAgICAgIC5tYXAoc2l6ZSA9PiBwYXJzZUludChzaXplKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQYWdlU2l6ZU9wdGlvbnMob3B0aW9ucywgdGVtcGxhdGUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjb21wLCB7XG4gICAgICAgICAgICAuLi5jb21wLnByb3BzLFxuICAgICAgICAgICAgY2hpbGRyZW46IENoaWxkcmVuLm1hcChjaGlsZHJlbiwgcmVwbGFjZUNvbXBvbmVudHMpXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pbm5lckNvbXBvbmVudHMgPSBDaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgcmVwbGFjZUNvbXBvbmVudHMpO1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGdlbmVyYXRlU3RlcHMgPSB0ZW1wbGF0ZSA9PiB7XG4gICAgY29uc3QgeyBpdGVtc1BlclBhZ2UsIHRvdGFsSXRlbXMsIGN1cnJlbnRQYWdlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdG90YWxJdGVtcyB8fCAwID4gdG90YWxJdGVtcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgaXRlbXNQZXJQYWdlIHx8IDAgPiBpdGVtc1BlclBhZ2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGhvd01hbnkgPSBwYXJzZUludCh0b3RhbEl0ZW1zIC8gaXRlbXNQZXJQYWdlKSArIDE7XG4gICAgbGV0IFN0ZXAgPSBudWxsO1xuXG4gICAgaWYgKDAgPiBob3dNYW55IHx8IGlzTmFOKGhvd01hbnkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzdGVwcyA9IEFycmF5KGhvd01hbnkpXG4gICAgICAuZmlsbChudWxsKVxuICAgICAgLm1hcCgoeCwgaSkgPT4ge1xuICAgICAgICBTdGVwID0gdGVtcGxhdGUoe1xuICAgICAgICAgIGxhYmVsOiBpICsgMSxcbiAgICAgICAgICBjbGFzc2VzOiAoaSArIDEgPT09IGN1cnJlbnRQYWdlKSA/ICdzdWNjZXNzJyA6ICcnLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHRoaXMuc2V0UGFnZShpKzEpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiA8U3RlcCAvPjtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHN0ZXBzO1xuICB9XG5cbiAgc2V0UGFnZSA9IHBhZ2UgPT4ge1xuICAgIGNvbnN0IHsgaXRlbXNQZXJQYWdlIH0gPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMuZmV0Y2hQYWdlKHBhZ2UsIGl0ZW1zUGVyUGFnZSlcbiAgfVxuXG4gIG5leHRQYWdlID0gKCkgPT4ge1xuICAgIGxldCB7IGN1cnJlbnRQYWdlLCBpdGVtc1BlclBhZ2UsIHRvdGFsSXRlbXMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAodG90YWxJdGVtcyA8IGN1cnJlbnRQYWdlICogaXRlbXNQZXJQYWdlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRQYWdlKCsrY3VycmVudFBhZ2UpO1xuICB9XG5cbiAgcHJldmlvdXNQYWdlID0gKCkgPT4ge1xuICAgIGxldCB7IGN1cnJlbnRQYWdlLCBpdGVtc1BlclBhZ2UsIHRvdGFsSXRlbXMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoMCA+PSAoY3VycmVudFBhZ2UgLSAxKSAqIGl0ZW1zUGVyUGFnZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc2V0UGFnZSgtLWN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIGZpcnN0UGFnZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFBhZ2UoMSk7XG4gIH1cblxuICBsYXN0UGFnZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHRvdGFsSXRlbXMsIGl0ZW1zUGVyUGFnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwYWdlID0gKHRvdGFsSXRlbXMgLyBpdGVtc1BlclBhZ2UpICsgMTtcbiAgICB0aGlzLnNldFBhZ2UocGFnZSk7XG4gIH1cblxuICBnZW5lcmF0ZVBhZ2VTaXplT3B0aW9ucyA9IChzaXplcywgdGVtcGxhdGUpID0+IHtcbiAgICBjb25zdCB7IGl0ZW1zUGVyUGFnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgRWFjaE9wdGlvbiA9IG51bGw7XG4gICAgc2l6ZXMgPSBzaXplcyB8fCBbNSwgMTAsIDI1XTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBzaXplc1xuICAgICAgLm1hcCgoeCwgaSkgPT4ge1xuICAgICAgICBFYWNoT3B0aW9uID0gdGVtcGxhdGUoe1xuICAgICAgICAgIGxhYmVsOiB4LFxuICAgICAgICAgIGNsYXNzZXM6ICh4ID09PSBpdGVtc1BlclBhZ2UpID8gJ3N1Y2Nlc3MnIDogJycsXG4gICAgICAgICAgb25DbGljazogKCkgPT4gdGhpcy5zZXRQYWdlU2l6ZSh4KVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gPEVhY2hPcHRpb24gLz47XG4gICAgICB9KTtcblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgc2V0UGFnZVNpemUgPSBuZXdQYWdlU2l6ZSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50UGFnZSwgdG90YWxJdGVtcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjYWxjdWxhdGVkQ3VycmVudFBhZ2UgPSAodG90YWxJdGVtcyA8IGN1cnJlbnRQYWdlICogbmV3UGFnZVNpemUpXG4gICAgICA/IHBhcnNlSW50KCh0b3RhbEl0ZW1zIC8gbmV3UGFnZVNpemUpICsgMSlcbiAgICAgIDogY3VycmVudFBhZ2U7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zUGVyUGFnZTogcGFyc2VJbnQobmV3UGFnZVNpemUpXG4gICAgfSwgKCkgPT4ge1xuXG4gICAgICBpZiAobnVsbCAhPT0gY2FsY3VsYXRlZEN1cnJlbnRQYWdlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFnZShjYWxjdWxhdGVkQ3VycmVudFBhZ2UpXG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJlcGFyZUNoaWxkcmVuKCk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPEZyYWdtZW50PlxuICAgICAgICB7IHRoaXMuaW5uZXJDb21wb25lbnRzIH1cbiAgICAgIDwvRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBQYWdpbmF0aW9uLFxuICAgIFBhZ2UsXG4gICAgSXRlbSxcbiAgICBQYWdlcixcbiAgICBTdGVwcyxcbiAgICBOZXh0LFxuICAgIFByZXZpb3VzLFxuICAgIEZpcnN0LFxuICAgIExhc3QsXG4gICAgUGFnZVNpemVzXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wYWdpbmF0aW9uJztcbmltcG9ydCB7IGZldGNoUGFnZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9zYW1wbGUtZGF0YSc7XG5cbmNvbnNvbGUubG9nKFBhZ2luYXRvcik7XG5cbmNvbnN0IFBhZ2luYXRpb25TbmlwcGV0ID0gKCkgPT4gKFxuICA8UGFnaW5hdG9yLlBhZ2luYXRpb24gZmV0Y2hQYWdlPXtmZXRjaFBhZ2V9IGN1cnJlbnRQYWdlPVwiM1wiIGl0ZW1zUGVyUGFnZT1cIjVcIj5cbiAgICA8dGFibGUgY2xhc3NOYW1lPVwiaG92ZXJcIiBzdHlsZXM9e3sgbWFyZ2luOiAnMTBweCcgfX0+XG4gICAgICA8dGhlYWQ+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+Q29sdW1uIEE8L3RoPlxuICAgICAgICAgIDx0aD5Db2x1bW4gQjwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RoZWFkPlxuICAgICAgPHRib2R5PlxuICAgICAgICA8UGFnaW5hdG9yLlBhZ2U+XG4gICAgICAgICAgPFBhZ2luYXRvci5JdGVtXG4gICAgICAgICAgICB0ZW1wbGF0ZT17aXRlbSA9PiAoXG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGQ+QToge2l0ZW0uYX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD5COiB7aXRlbS5ifTwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvUGFnaW5hdG9yLlBhZ2U+XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gICAgPFBhZ2luYXRvci5QYWdlclxuICAgICAgdGVtcGxhdGU9e2J1dHRvbiA9PiAoKSA9PiAoXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtgYnV0dG9uICR7YnV0dG9uLmNsYXNzZXN9YH0gb25DbGljaz17YnV0dG9uLm9uQ2xpY2t9PlxuICAgICAgICAgIHtidXR0b24ubGFiZWx9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICA+XG4gICAgICA8UGFnaW5hdG9yLlByZXZpb3VzIC8+XG4gICAgICA8UGFnaW5hdG9yLlN0ZXBzIC8+XG4gICAgICA8UGFnaW5hdG9yLk5leHQgLz5cbiAgICA8L1BhZ2luYXRvci5QYWdlcj5cbiAgPC9QYWdpbmF0b3IuUGFnaW5hdGlvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2luYXRpb25TbmlwcGV0O1xuIiwiY29uc3QgY2hlY2tQYXR0ZXJuQXR0cmlidXRlcyA9IGNvbXBvbmVudCA9PiB7XG4gICAgaWYgKCFjb21wb25lbnQubmFtZSB8fCAhY29tcG9uZW50LnB1cnBvc2UgfHwgIWNvbXBvbmVudC5mdW5jdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjaGVja1BhdHRlcm5BdHRyaWJ1dGVzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2hlY2tQYXR0ZXJuQXR0cmlidXRlcyBmcm9tICcuLi9jb21tb24vcGF0dGVybkF0dHJpYnV0ZXMnO1xuXG5pbXBvcnQgJy4uLy4uL3N0eWxlcy9jb21wb25lbnRzL190aWxlLnNjc3MnO1xuXG5jb25zdCBUaWxlID0gcHJvcHMgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidGlsZVwiPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGlsZV9faGVhZGVyXCI+e3Byb3BzLnRpdGxlfTwvaDM+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRpbGVfX2NvbnRlbnRcIj57cHJvcHMuZGVzY3JpcHRpb259PC9wPlxuICAgIDwvZGl2PlxuKTtcblxuVGlsZS5wcm9wVHlwZXMgPSB7XG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cblRpbGUuZGVmYXVsdFByb3BzID0ge1xuICAgIHRpdGxlOiAnVGlsZSB0aXRsZScsXG4gICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGEgc2hvcnQgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgcmVzb3VyY2UgaXMvcHJvdmlkZXMuJ1xufTtcblxuVGlsZS50aXRsZSA9ICdUaWxlJztcblRpbGUuZnVuY3Rpb24gPSAnUHJvdmlkZSBhIHNuZWFrIHBlYWsgYW5kIG5hdmlnYXRlIHRvIGEgc2VhcmNoYWJsZSBkYXRhIHNlY3Rpb24gb2YgdGhlIHdlYnNpdGUuJztcblRpbGUucHVycG9zZSA9ICdBZHZlcnRpc2UgYSBzcGVjaWZpYyBkYXRhc2V0IG9mIHRoZSB3ZWJzaXRlIGFuZCBwcm92aWRlIHNlYXJjaGFibGUgYWNjZXNzIHRvIGl0Lic7XG5cbmV4cG9ydCBkZWZhdWx0IGNoZWNrUGF0dGVybkF0dHJpYnV0ZXMoVGlsZSk7XG4iLCJpbXBvcnQgVGlsZSBmcm9tICcuLi9jb21wb25lbnRzL3RpbGUnO1xuaW1wb3J0IFBhZ2luYXRpb25TbmlwcGV0IGZyb20gJy4uL2FwcC9zbmlwcGV0cy9QYWdpbmF0aW9uU25pcHBldCc7XG5cbmNvbnN0IGNvbXBvbmVudHMgPSBbe1xuICAgIG5hbWU6ICdUaWxlJyxcbiAgICBjb21wb25lbnQ6IFRpbGUsXG4gICAgZnVuY3Rpb246ICdQcm92aWRlIGEgc25lYWsgcGVhayBhbmQgbmF2aWdhdGUgdG8gYSBzZWFyY2hhYmxlIGRhdGEgc2VjdGlvbiBvZiB0aGUgd2Vic2l0ZS4nLFxuICAgIHB1cnBvc2U6ICdBZHZlcnRpc2UgYSBzcGVjaWZpYyBkYXRhc2V0IG9mIHRoZSB3ZWJzaXRlIGFuZCBwcm92aWRlIHNlYXJjaGFibGUgYWNjZXNzIHRvIGl0LidcbiAgfSxcbiAgLy8ge1xuICAvLyAgIG5hbWU6ICdQYWdpbmF0aW9uJyxcbiAgLy8gICBjb21wb25lbnQ6IFBhZ2luYXRpb25TbmlwcGV0LFxuICAvLyAgIGZ1bmN0aW9uOiAnTmF2aWdhdGUgdGhyb3VnaCBhIHBhZ2VkIHJlc3VsdCBzZXQnLFxuICAvLyAgIHB1cnBvc2U6ICdQcm92aWRlIGluZGljYXRpb24gb2YgbnVtYmVyIG9mIHJlc3VsdHMsIGFsbG93IGFjY2VzcyB0byBkaWZmZXJlbnQgcGFnZXMnXG4gIC8vIH1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudHM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY29tcG9uZW50cyBmcm9tICcuLi9jb21wb25lbnRzL2NvbXBvbmVudHMnO1xuXG5pbXBvcnQgRGVmYXVsdFBhZ2VMYXlvdXQgZnJvbSAnLi4vbGF5b3V0L0RlZmF1bHRQYWdlTGF5b3V0JztcblxuY29uc3QgZm9ybWF0UGF0dGVybiA9IENvbXBvbmVudCA9PiAoXG4gIDxkaXYga2V5PXtDb21wb25lbnQubmFtZX0+XG4gICAgPGgyPntDb21wb25lbnQubmFtZX08L2gyPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZC14XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbGwgc21hbGwtNiBjb21wb25lbnQtd3JhcHBlclwiPlxuICAgICAgICA8Q29tcG9uZW50LmNvbXBvbmVudCAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbGwgc21hbGwtNlwiPlxuICAgICAgICA8aDU+UHVycG9zZTwvaDU+XG4gICAgICAgIDxwPntDb21wb25lbnQucHVycG9zZX08L3A+XG4gICAgICAgIDxoNT5GdW5jdGlvbjwvaDU+XG4gICAgICAgIDxwPntDb21wb25lbnQuZnVuY3Rpb259PC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGhyIC8+XG4gIDwvZGl2PlxuKTtcblxuY29uc3QgVUlDb21wb25lbnRzQ29udGVudCA9ICgpID0+IChcbiAgPEZyYWdtZW50Pntjb21wb25lbnRzLm1hcChjb21wb25lbnQgPT4gZm9ybWF0UGF0dGVybihjb21wb25lbnQpKX08L0ZyYWdtZW50PlxuKTtcblxuY29uc3QgVUlDb21wb25lbnRzID0gKCkgPT4gKFxuICA8RGVmYXVsdFBhZ2VMYXlvdXQgdGl0bGU9XCJGcmFua2xpbiAtIFVJIENvbXBvbmVudHNcIiBjb250ZW50PXs8VUlDb21wb25lbnRzQ29udGVudCAvPn0gLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFVJQ29tcG9uZW50cztcbiIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgQ29sb3VycyA9ICgpID0+IChcbiAgPEZyYWdtZW50PlxuICAgIDxoMT5Db2xvdXJzPC9oMT5cbiAgICA8ZGl2PlxuICAgICAgPGg0PlByaW1hcnkgcGFsZXR0ZTwvaDQ+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci1kYXJrLWJsdWVcIlxuICAgICAgICBkYXRhLW5hbWU9XCIkY29sb3VyLWRhcmstYmx1ZVwiXG4gICAgICAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItdW5pcHJvdC1ibHVlXCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci11bmlwcm90LWJsdWVcIlxuICAgICAgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLW1lZGl1bS1ibHVlXCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci1tZWRpdW0tYmx1ZVwiXG4gICAgICAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItbGlnaHQtYmx1ZVwiXG4gICAgICAgIGRhdGEtbmFtZT1cIiRjb2xvdXItbGlnaHQtYmx1ZVwiXG4gICAgICAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdj5cbiAgICAgIDxoND5HcmV5IHBhbGV0dGU8L2g0PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItYmxhY2tcIiBkYXRhLW5hbWU9XCIkY29sb3VyLWJsYWNrXCIgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLWRhcmstZ3JleVwiXG4gICAgICAgIGRhdGEtbmFtZT1cIiRjb2xvdXItZGFyay1ncmV5XCJcbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci1jb29sLWdyZXlcIlxuICAgICAgICBkYXRhLW5hbWU9XCIkY29sb3VyLWNvb2wtZ3JleVwiXG4gICAgICAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItbWVkaXVtLWdyZXlcIlxuICAgICAgICBkYXRhLW5hbWU9XCIkY29sb3VyLW1lZGl1bS1ncmV5XCJcbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci1saWdodC1ncmV5XCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci1saWdodC1ncmV5XCJcbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci1zZWFzaGVsbC1ncmV5XCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci1zZWFzaGVsbC1ncmV5XCJcbiAgICAgIC8+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2PlxuICAgICAgPGg0PkN1cmF0aW9uIHBhbGV0dGU8L2g0PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItcmV2aWV3ZWRcIlxuICAgICAgICBkYXRhLW5hbWU9XCIkY29sb3VyLXJldmlld2VkXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci11bnJldmlld2VkXCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci11bnJldmlld2VkXCJcbiAgICAgIC8+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2PlxuICAgICAgPGg0Pk5hbWVzcGFjZSBwYWxldHRlPC9oND5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLXVuaXJlZlwiIGRhdGEtbmFtZT1cIiRjb2xvdXItdW5pcmVmXCIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLXVuaXBhcmNcIiBkYXRhLW5hbWU9XCIkY29sb3VyLXVuaXBhcmNcIiAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJib3gtY29sb3VyIGJveC1jb2xvdXItcHJvdGVvbWVzXCJcbiAgICAgICAgZGF0YS1uYW1lPVwiJGNvbG91ci1wcm90ZW9tZXNcIlxuICAgICAgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLXN1cHBvcnRpbmctZGF0YVwiXG4gICAgICAgIGRhdGEtbmFtZT1cIiRjb2xvdXItc3VwcG9ydGluZy1kYXRhXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJveC1jb2xvdXIgYm94LWNvbG91ci1oZWxwXCIgZGF0YS1uYW1lPVwiJGNvbG91ci1oZWxwXCIgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiYm94LWNvbG91ciBib3gtY29sb3VyLWFubm90YXRpb24tc3lzdGVtc1wiXG4gICAgICAgIGRhdGEtbmFtZT1cIiRjb2xvdXItYW5ub3RhdGlvbi1zeXN0ZW1zXCJcbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIDwvRnJhZ21lbnQ+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvdXJzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBUeXBvZ3JhcGh5ID0gKCkgPT4gKFxuICA8RnJhZ21lbnQ+XG4gICAgPGgxPlR5cG9ncmFwaHk8L2gxPlxuICAgIDxzZWN0aW9uPlxuICAgICAgPHA+XG4gICAgICAgIFRoZSBjaG9zZW4gdHlwZSBpcyBhIHNhbnMtc2VyaWYsIExhdG8sIGRlc2lnbmVkIGJ5IFdhcnNhdy1iYXNlZCBkZXNpZ25lclxuICAgICAgICA8YSBocmVmPVwiaHR0cDovL3d3dy5sdWthc3pkemllZHppYy5ldS9cIj7FgXVrYXN6IER6aWVkemljPC9hPi4gV2UgdXNlIDJcbiAgICAgICAgdmFyaWFudHMgb2YgdGhlIGZvbnQsIG5vcm1hbCBhbmQgYm9sZDpcbiAgICAgIDwvcD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZvbnQtc3R5bGUgZm9udC1zdHlsZS1ub3JtYWxcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LXN0eWxlLXRpdGxlXCI+QWE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1zdHlsZS1kZXNjcmlwdGlvblwiPk5vcm1hbDwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LXN0eWxlIGZvbnQtc3R5bGUtYm9sZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZvbnQtc3R5bGUtdGl0bGVcIj5BYTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LXN0eWxlLWRlc2NyaXB0aW9uXCI+Qm9sZDwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICDigIw8cD5cbiAgICAgICAgICBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjxiciAvPlxuICAgICAgICAgIGHigIvigIxi4oCL4oCMY+KAi+KAjGTigIvigIxl4oCL4oCMZuKAi+KAjGfigIvigIxo4oCL4oCMaeKAi+KAjGrigIvigIxr4oCL4oCMbOKAi+KAjG3igIvigIxu4oCL4oCMb+KAi+KAjHDigIvigIxx4oCL4oCMcuKAi+KAjHPigIvigIx04oCL4oCMdeKAi+KAjHbigIvigIx34oCL4oCMeOKAi+KAjHnigIvigIx64oCL4oCMPGJyIC8+XG4gICAgICAgICAgMeKAi+KAjDLigIvigIwz4oCL4oCMNOKAi+KAjDXigIvigIw24oCL4oCMN+KAi+KAjDjigIvigIw54oCL4oCMMOKAi+KAjFxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxociAvPlxuICAgIDwvc2VjdGlvbj5cblxuICAgIDxzZWN0aW9uPlxuICAgICAgPGgxPkhlYWRlcnM8L2gxPlxuICAgICAgPGgxPkgxLiBUaGlzIGlzIGEgdGl0bGU8L2gxPlxuICAgICAgPGgyPkgyLiBUaGlzIGlzIGEgdGl0bGU8L2gyPlxuICAgICAgPGgzPkgzLiBUaGlzIGlzIGEgdGl0bGU8L2gzPlxuICAgICAgPGg0Pkg0LiBUaGlzIGlzIGEgdGl0bGU8L2g0PlxuICAgICAgPGg1Pkg1LiBUaGlzIGlzIGEgdGl0bGU8L2g1PlxuICAgICAgPGg2Pkg2LiBUaGlzIGlzIGEgdGl0bGU8L2g2PlxuICAgICAgPGhyIC8+XG4gICAgPC9zZWN0aW9uPlxuXG4gICAgPHNlY3Rpb24+XG4gICAgICA8aDE+UGFyYWdyYXBoczwvaDE+XG4gICAgICA8cD5cbiAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2RcbiAgICAgICAgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW1cbiAgICAgICAgdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWFcbiAgICAgICAgY29tbW9kbyBjb25zZXF1YXQuIER1aXMgYXV0ZSBpcnVyZSBkb2xvciBpbiByZXByZWhlbmRlcml0IGluIHZvbHVwdGF0ZVxuICAgICAgICB2ZWxpdCBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFeGNlcHRldXIgc2ludFxuICAgICAgICBvY2NhZWNhdCBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50XG4gICAgICAgIG1vbGxpdCBhbmltIGlkIGVzdCBsYWJvcnVtLjxhIGhyZWY9XCJ3d3cudW5pcHJvdC5vcmdcIj5DbGljayBtZTwvYT5cbiAgICAgIDwvcD5cbiAgICAgIDxociAvPlxuICAgIDwvc2VjdGlvbj5cblxuICAgIDxzZWN0aW9uPlxuICAgICAgPGgxPkxpc3RzPC9oMT5cbiAgICAgIDxoMj5Vbm9yZGVyZWQ8L2gyPlxuICAgICAgPHVsPlxuICAgICAgICA8bGk+SXRlbSAxPC9saT5cbiAgICAgICAgPGxpPkl0ZW0gMjwvbGk+XG4gICAgICAgIDxsaT5JdGVtIDM8L2xpPlxuICAgICAgICA8bGk+SXRlbSA0PC9saT5cbiAgICAgICAgPGxpPkl0ZW0gNTwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgICA8aDI+T3JkZXJlZDwvaDI+XG4gICAgICA8b2w+XG4gICAgICAgIDxsaT5JdGVtIDE8L2xpPlxuICAgICAgICA8bGk+SXRlbSAyPC9saT5cbiAgICAgICAgPGxpPkl0ZW0gMzwvbGk+XG4gICAgICAgIDxsaT5JdGVtIDQ8L2xpPlxuICAgICAgICA8bGk+SXRlbSA1PC9saT5cbiAgICAgIDwvb2w+XG5cbiAgICAgIDxoMj5EZXNjcmlwdGlvbiBsaXN0PC9oMj5cbiAgICAgIDxkbD5cbiAgICAgICAgPGR0Pkl0ZW0gMTwvZHQ+XG4gICAgICAgIDxkZD5EZXNjcmlwdGlvbiAxIGlzIGFib3V0IGl0ZW0gMTwvZGQ+XG4gICAgICAgIDxkdD5JdGVtIDI8L2R0PlxuICAgICAgICA8ZGQ+RGVzY3JpcHRpb24gMiBpcyBhYm91dCBpdGVtIDI8L2RkPlxuICAgICAgICA8ZHQ+SXRlbSAzPC9kdD5cbiAgICAgICAgPGRkPkRlc2NyaXB0aW9uIDMgaXMgYWJvdXQgaXRlbSAzPC9kZD5cbiAgICAgIDwvZGw+XG5cbiAgICAgIDxoMj4ubm8tYnVsbGV0PC9oMj5cbiAgICAgIDx1bCBjbGFzc05hbWU9XCJuby1idWxsZXRcIj5cbiAgICAgICAgPGxpPkl0ZW0gMTwvbGk+XG4gICAgICAgIDxsaT5JdGVtIDI8L2xpPlxuICAgICAgICA8bGk+SXRlbSAzPC9saT5cbiAgICAgICAgPGxpPkl0ZW0gNDwvbGk+XG4gICAgICAgIDxsaT5JdGVtIDU8L2xpPlxuICAgICAgPC91bD5cbiAgICAgIDxociAvPlxuICAgIDwvc2VjdGlvbj5cbiAgPC9GcmFnbWVudD5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFR5cG9ncmFwaHk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBEZWZhdWx0UGFnZUxheW91dCBmcm9tICcuLi9sYXlvdXQvRGVmYXVsdFBhZ2VMYXlvdXQnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBDb2xvdXJzIGZyb20gJy4vQ29sb3Vycyc7XG5cbmNvbnN0IEhvbWVQYWdlQ29udGVudCA9ICgpID0+IChcbiAgPEZyYWdtZW50PlxuICAgIDxDb2xvdXJzIC8+XG4gICAgPFR5cG9ncmFwaHkgLz5cbiAgPC9GcmFnbWVudD5cbik7XG5cbmNvbnN0IEhvbWVQYWdlID0gKCkgPT4gPERlZmF1bHRQYWdlTGF5b3V0IHRpdGxlPVwiSG9tZSBQYWdlXCIgY29udGVudD17PEhvbWVQYWdlQ29udGVudCAvPn0gLz47XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBMb2dvIGZyb20gJy4uL2ZyYW5rbGluX2xvZ28uc3ZnJztcbmltcG9ydCAnLi4vLi4vc3R5bGVzL2NvbXBvbmVudHMvX2hlYWRlci5zY3NzJztcblxuY29uc3QgSGVhZGVyID0gKCkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgIDxhIGNsYXNzTmFtZT1cImhlYWRlcl9fbG9nb1wiIGhyZWY9XCIvZnJhbmtsaW5cIj5cbiAgICAgIDxMb2dvIHdpZHRoPXs1MH0gaGVpZ2h0PXs1MH0gLz5cbiAgICA8L2E+XG4gICAgPHVsIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2aWdhdGlvblwiPlxuICAgICAgPGxpPlxuICAgICAgICA8TGluayB0bz1cIi9cIj5Ib21lPC9MaW5rPnsnICd9XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8TGluayB0bz1cIi9hdG9tc1wiPkF0b21zPC9MaW5rPnsnICd9XG4gICAgICA8L2xpPlxuICAgICAgPGxpPlxuICAgICAgICA8TGluayB0bz1cIi91aS1jb21wb25lbnRzXCI+VUkgY29tcG9uZW50czwvTGluaz57JyAnfVxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICcuLi8uLi8uLi9zcmMvc3R5bGVzL2xheW91dC9fZGVmYXVsdFBhZ2VDb250ZW50LnNjc3MnO1xuXG5jb25zdCBEZWZhdWx0UGFnZUNvbnRlbnQgPSBwcm9wcyA9PiA8ZGl2IGNsYXNzTmFtZT1cImRlZmF1bHQtcGFnZS1jb250ZW50XCI+e3Byb3BzLmNoaWxkcmVufTwvZGl2PjtcblxuRGVmYXVsdFBhZ2VDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxufTtcblxuRGVmYXVsdFBhZ2VDb250ZW50LmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46ICdEZWZhdWx0IFBhZ2UgQ29udGVudCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0UGFnZUNvbnRlbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBEZWZhdWx0UGFnZUxheW91dCBmcm9tICcuLi9sYXlvdXQvRGVmYXVsdFBhZ2VMYXlvdXQnO1xuaW1wb3J0IExvZ28gZnJvbSAnLi4vZnJhbmtsaW5fbG9nby5zdmcnO1xuXG5jb25zdCBIb21lUGFnZUNvbnRlbnQgPSAoKSA9PiAoXG4gIDxGcmFnbWVudD5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XG4gICAgICA8aDE+RnJhbmtsaW48L2gxPlxuICAgICAgPExvZ28gd2lkdGg9ezIwMH0gaGVpZ2h0PXsyMDB9IC8+XG4gICAgICA8aDQ+VGhlIFVuaVByb3QgZGVzaWduIHN5c3RlbTwvaDQ+XG4gICAgPC9kaXY+XG4gICAgPGgyPkludHJvZHVjdGlvbjwvaDI+XG4gICAgPHA+XG4gICAgICBGcmFua2xpbiBwcm92aWRlcyBhbGwgdXNlciBpbnRlcmZhY2UgY29tcG9uZW50cyByZXF1aXJlZCB0byBidWlsZCB0aGUgVW5pUHJvdCB3ZWJzaXRlLiBJdCBpc1xuICAgICAgYmFzZWQgb24gdGhlIGZvdW5kYXRpb24gZnJhbWV3b3JrLCB3aGljaCBpcyB1c2VkIGZvciBhbGwgXCJhdG9taWMgbGV2ZWxcIiBjb21wb25lbnRzXG4gICAgICAoVHlwb2dyYXBoeSwgZm9ybXMsIGxpc3RzIGV0Yy4uLikuXG4gICAgPC9wPlxuICA8L0ZyYWdtZW50PlxuKTtcblxuY29uc3QgSG9tZVBhZ2UgPSAoKSA9PiA8RGVmYXVsdFBhZ2VMYXlvdXQgdGl0bGU9XCJIb21lIFBhZ2VcIiBjb250ZW50PXs8SG9tZVBhZ2VDb250ZW50IC8+fSAvPjtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZVBhZ2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBIb21lUGFnZSBmcm9tICcuL2FwcC9Ib21lUGFnZSc7XG5pbXBvcnQgQXRvbXMgZnJvbSAnLi9hcHAvQXRvbXMnO1xuaW1wb3J0IFVJQ29tcG9uZW50cyBmcm9tICcuL2FwcC9VSUNvbXBvbmVudHMnO1xuXG5jb25zdCBBcHAgPSAoKSA9PiAoXG4gIDxSb3V0ZXIgYmFzZW5hbWU9XCIvZnJhbmtsaW5cIj5cbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Um91dGUgcGF0aD1cIi9cIiBleGFjdCBjb21wb25lbnQ9e0hvbWVQYWdlfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCIvYXRvbXNcIiBjb21wb25lbnQ9e0F0b21zfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCIvdWktY29tcG9uZW50c1wiIGNvbXBvbmVudD17VUlDb21wb25lbnRzfSAvPlxuICAgIDwvRnJhZ21lbnQ+XG4gIDwvUm91dGVyPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi5pY29cIjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGVhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxBPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZmE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksaGE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGthPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9ZWE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBtYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXttYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbmEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBvYT1udWxsLHBhPXt9O1xuZnVuY3Rpb24gcWEoKXtpZihvYSlmb3IodmFyIGEgaW4gcGEpe3ZhciBiPXBhW2FdLGM9b2EuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcmFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cmFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtzYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7c2FbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdGEoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHRhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHRhKGEsYixjKXt1YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3VhW2FdPWI7dmFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcmE9W10sc2E9e30sdWE9e30sdmE9e307ZnVuY3Rpb24gd2EoYSl7b2E/RChcIjEwMVwiKTp2b2lkIDA7b2E9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cWEoKX1mdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtwYS5oYXNPd25Qcm9wZXJ0eShjKSYmcGFbY109PT1kfHwocGFbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxwYVtjXT1kLGI9ITApfWImJnFhKCl9XG52YXIgQ2E9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpyYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6c2EscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dWEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp2YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9KSxEYT1udWxsLEVhPW51bGwsRmE9bnVsbDtmdW5jdGlvbiBHYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUZhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBIYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEphPW51bGw7XG5mdW5jdGlvbiBLYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylHYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkdhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIExhKGEpe3JldHVybiBLYShhLCEwKX1mdW5jdGlvbiBNYShhKXtyZXR1cm4gS2EoYSwhMSl9dmFyIE5hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX07XG5mdW5jdGlvbiBPYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPURhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBQYShhLGIpe251bGwhPT1hJiYoSmE9SGEoSmEsYSkpO2E9SmE7SmE9bnVsbDthJiYoYj9JYShhLExhKTpJYShhLE1hKSxKYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFFhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHJhLmxlbmd0aDtmKyspe3ZhciBoPXJhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUhhKGUsaCkpfVBhKGUsITEpfXZhciBSYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TmEsZ2V0TGlzdGVuZXI6T2EscnVuRXZlbnRzSW5CYXRjaDpQYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlFhfSksU2E9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1NhLFRhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrU2E7XG5mdW5jdGlvbiBVYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFZhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gWGEoYSl7cmV0dXJuIGFbVGFdfHxudWxsfXZhciBiYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VWEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpWYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlhhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1RhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gY2IoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGRiKGEsYixjKXtpZihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZWIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmY2IoYS5fdGFyZ2V0SW5zdCxkYixhKX1cbmZ1bmN0aW9uIGZiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtjYihiLGRiLGEpfX1mdW5jdGlvbiBnYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGhiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZ2IoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGliKGEpe0lhKGEsZWIpfVxuZnVuY3Rpb24gamIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZ2IoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZ2IoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIga2I9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczppYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtJYShhLGZiKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmpiLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0lhKGEsaGIpfX0pLGxiPW51bGw7ZnVuY3Rpb24gbWIoKXshbGImJm0uY2FuVXNlRE9NJiYobGI9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4gbGJ9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBuYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW9iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG9iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbWIoKV19XG52YXIgcGI9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxxYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxwYi5sZW5ndGg7YSsrKXRoaXNbcGJbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cWI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtyYihjKTtyZXR1cm4gY307cmIoTik7XG5mdW5jdGlvbiBzYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiB0YihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9c2I7YS5yZWxlYXNlPXRifXZhciB1Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHdiPVs5LDEzLDI3LDMyXSx4Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseWI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeWI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB6Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXliLEFiPW0uY2FuVXNlRE9NJiYoIXhifHx5YiYmODx5YiYmMTE+PXliKSxCYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxLYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxMYj0hMTtcbmZ1bmN0aW9uIE1iKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09d2IuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBOYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBPYj0hMTtmdW5jdGlvbiBQYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTmIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0xiPSEwO3JldHVybiBCYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1CYiYmTGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUWIoYSxiKXtpZihPYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwheGImJk1iKGEsYik/KGE9bmIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsT2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIEFiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFJiPXtldmVudFR5cGVzOktiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih4YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUtiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUtiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1LYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgT2I/TWIoYSxjKSYmKGU9S2IuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1LYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhBYiYmKE9ifHxlIT09S2IuY29tcG9zaXRpb25TdGFydD9lPT09S2IuY29tcG9zaXRpb25FbmQmJk9iJiYoZj1uYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1vYigpLE9iPSEwKSksZT11Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU5iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxpYihlKSxmPWUpOmY9bnVsbDsoYT16Yj9QYihhLGMpOlFiKGEsYykpPyhiPXZiLmdldFBvb2xlZChLYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaWIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sU2I9bnVsbCxUYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtTYj1hfX0sVWI9bnVsbCxWYj1udWxsO2Z1bmN0aW9uIFdiKGEpe2lmKGE9RWEoYSkpe1NiJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RChcIjE5NFwiKTt2YXIgYj1EYShhLnN0YXRlTm9kZSk7U2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIFhiKGEpe1ViP1ZiP1ZiLnB1c2goYSk6VmI9W2FdOlViPWF9XG5mdW5jdGlvbiBZYigpe3JldHVybiBudWxsIT09VWJ8fG51bGwhPT1WYn1mdW5jdGlvbiBaYigpe2lmKFViKXt2YXIgYT1VYixiPVZiO1ZiPVViPW51bGw7V2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKVdiKGJbYV0pfX12YXIgJGI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOlRiLGVucXVldWVTdGF0ZVJlc3RvcmU6WGIsbmVlZHNTdGF0ZVJlc3RvcmU6WWIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6WmJ9KTtmdW5jdGlvbiBhYyhhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGJjKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIGNjKCl7fXZhciBkYz0hMTtmdW5jdGlvbiBlYyhhLGIpe2lmKGRjKXJldHVybiBhKGIpO2RjPSEwO3RyeXtyZXR1cm4gYWMoYSxiKX1maW5hbGx5e2RjPSExLFliKCkmJihjYygpLFpiKCkpfX1cbnZhciBmYz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBnYyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWZjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBoYyhhKXthPWEudGFyZ2V0fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gaWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBqYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24ga2MoYSl7dmFyIGI9amMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIGxjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1rYyhhKSl9ZnVuY3Rpb24gbWMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgbmM9ZWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsTz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sb2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHBjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCxxYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxyYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx2Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsd2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLFxueGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5Yz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gemMoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXljJiZhW3ljXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gQWMoYSl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2Ugc2M6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSByYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0Q2FsbFwiO2Nhc2UgcWM6cmV0dXJuXCJSZWFjdFJldHVyblwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeGM6cmV0dXJuIGE9YS5yZW5kZXIuZGlzcGxheU5hbWV8fGEucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBCYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPUFjKGEpO3ZhciBmPW51bGw7YyYmKGY9QWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQ2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLERjPXt9LEVjPXt9O2Z1bmN0aW9uIEZjKGEpe2lmKEVjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKENjLnRlc3QoYSkpcmV0dXJuIEVjW2FdPSEwO0RjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gSGMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8R2MoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIFNjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsXG5UYyk7VltiXT1uZXcgVShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtWLnRhYkluZGV4PW5ldyBVKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIFVjKGEsYixjLGQpe3ZhciBlPVYuaGFzT3duUHJvcGVydHkoYik/VltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEhjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9GYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVhjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWWMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZVYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gWmMoYSxiKXtZYyhhLGIpO3ZhciBjPVhjKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/JGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmJGMoYSxiLnR5cGUsWGMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBhZChhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSlcIlwiPT09YS52YWx1ZSYmKGEudmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSxhLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uICRjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIFhjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgYmQ9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gY2QoYSxiLGMpe2E9Ti5nZXRQb29sZWQoYmQuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtYYihjKTtpYihhKTtyZXR1cm4gYX12YXIgZGQ9bnVsbCxlZD1udWxsO2Z1bmN0aW9uIGZkKGEpe1BhKGEsITEpfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9VmEoYSk7aWYobWMoYikpcmV0dXJuIGF9ZnVuY3Rpb24gaGQoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgaWQ9ITE7bS5jYW5Vc2VET00mJihpZD1pYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBqZCgpe2RkJiYoZGQuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpLGVkPWRkPW51bGwpfWZ1bmN0aW9uIGtkKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZnZChlZCkmJihhPWNkKGVkLGEsaGMoYSkpLGVjKGZkLGEpKX1mdW5jdGlvbiBsZChhLGIsYyl7XCJ0b3BGb2N1c1wiPT09YT8oamQoKSxkZD1iLGVkPWMsZGQuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpKTpcInRvcEJsdXJcIj09PWEmJmpkKCl9XG5mdW5jdGlvbiBtZChhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBnZChlZCl9ZnVuY3Rpb24gbmQoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBnZChiKX1mdW5jdGlvbiBvZChhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBnZChiKX1cbnZhciBwZD17ZXZlbnRUeXBlczpiZCxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmlkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9WYShiKTp3aW5kb3csZj12b2lkIDAsaD12b2lkIDAsZz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWd8fFwiaW5wdXRcIj09PWcmJlwiZmlsZVwiPT09ZS50eXBlP2Y9aGQ6Z2MoZSk/aWQ/Zj1vZDooZj1tZCxoPWxkKTooZz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zy50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1uZCk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gY2QoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJiRjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHFkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHJkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBzZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXJkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdGQoKXtyZXR1cm4gc2R9XG52YXIgdWQ9cWQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHdkPXtldmVudFR5cGVzOnZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1VhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VmEoYSk7ZT1udWxsPT1iP2U6VmEoYik7dmFyIGg9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7amIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB4ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHlkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXhkKGEpOiExfWZ1bmN0aW9uIHpkKGEpezIhPT14ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIEFkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXhkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4gemQoZSksYTtpZihoPT09ZClyZXR1cm4gemQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBCZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQ2QoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBEZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRWQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxGZD1xZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgSGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LElkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxKZD1xZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9SGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9R2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9HZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9HZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEtkPXVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxMZD1xZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZH0pLE1kPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE5kPXVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksT2Q9e30sUGQ9e307ZnVuY3Rpb24gUWQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O09kW2FdPWI7UGRbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMSl9KTtcbnZhciBSZD17ZXZlbnRUeXBlczpPZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1QZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9UGRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1HZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG51ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUtkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9TGQ7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPURkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1NZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1xZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU5kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RWQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2liKGIpO3JldHVybiBifX0sU2Q9UmQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFRkPVtdO2Z1bmN0aW9uIFVkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVVhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUWEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGhjKGEubmF0aXZlRXZlbnQpKX12YXIgVmQ9ITA7ZnVuY3Rpb24gV2QoYSl7VmQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBaZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBYZChhLGIpe2JjKFlkLGEsYil9XG5mdW5jdGlvbiBZZChhLGIpe2lmKFZkKXt2YXIgYz1oYyhiKTtjPVVhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09eGQoYykmJihjPW51bGwpO2lmKFRkLmxlbmd0aCl7dmFyIGQ9VGQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZWMoVWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5UZC5sZW5ndGgmJlRkLnB1c2goYSl9fX1cbnZhciAkZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVmR9LHNldEVuYWJsZWQ6V2QsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFZkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WmQsZGlzcGF0Y2hFdmVudDpZZH0pO2Z1bmN0aW9uIGFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmU9e2FuaW1hdGlvbmVuZDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2U9e30sZGU9e307bS5jYW5Vc2VET00mJihkZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWUoYSl7aWYoY2VbYV0pcmV0dXJuIGNlW2FdO2lmKCFiZVthXSlyZXR1cm4gYTt2YXIgYj1iZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkZSlyZXR1cm4gY2VbYV09YltjXTtyZXR1cm4gYX1cbnZhciBmZT17dG9wQW5pbWF0aW9uRW5kOmVlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjplZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDplZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmVlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGdlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxoZT17fSxpZT0wLGplPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBrZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxqZSl8fChhW2plXT1pZSsrLGhlW2FbamVdXT17fSk7cmV0dXJuIGhlW2FbamVdXX1mdW5jdGlvbiBsZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBtZShhLGIpe3ZhciBjPWxlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWxlKGMpfX1mdW5jdGlvbiBuZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgb2U9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxwZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHFlPW51bGwscmU9bnVsbCxzZT1udWxsLHRlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZih0ZXx8bnVsbD09cWV8fHFlIT09ZmEoKSlyZXR1cm4gbnVsbDt2YXIgYz1xZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZuZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHNlJiZoYShzZSxjKT9udWxsOihzZT1jLGE9Ti5nZXRQb29sZWQocGUuc2VsZWN0LHJlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cWUsaWIoYSksYSl9XG52YXIgdmU9e2V2ZW50VHlwZXM6cGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9a2UoZSk7Zj12YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1ZhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZ2MoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcWU9ZSxyZT1iLHNlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpzZT1yZT1xZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjp0ZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiB0ZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihvZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtOYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0RhPWJiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RWE9YmIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtGYT1iYi5nZXROb2RlRnJvbUluc3RhbmNlO05hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UmQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOndkLENoYW5nZUV2ZW50UGx1Z2luOnBkLFNlbGVjdEV2ZW50UGx1Z2luOnZlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UmJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gemUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBBZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBzYzpyZXR1cm4gQmUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB3YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSB0YzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBwYzpmPTc7YnJlYWs7Y2FzZSBxYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHVjOmY9MTM7YnJlYWs7Y2FzZSB2YzpmPTEyO2JyZWFrO2Nhc2UgeGM6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEJlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBEZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIEVlPW51bGwsRmU9bnVsbDtcbmZ1bmN0aW9uIEdlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gSGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RWU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0ZlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKX1mdW5jdGlvbiBKZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRmUmJkZlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBLZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIExlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTWU9dm9pZCAwLE5lPXZvaWQgMDtcbmZ1bmN0aW9uIE9lKGEpe01lPU5lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKSk6YT1udWxsO01lPWM7TmU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIFBlKGEsYil7T2UoYSk7YT1NZTt2YXIgYz1OZTtudWxsPT09Yz9MZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KExlKGEsYiksTGUoYyxiKSk6KExlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFFlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UWUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UWUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoYShiLGMpfHwhaGEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eWQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6a2E7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWthO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UmUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9SZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9SZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFVlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBWZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1rYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBXZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gWGUoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT16ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUNlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1WZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD1BZShjLGEubW9kZSxkKTtkLnJlZj1WZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuRGUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1CZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGM9QWUoYixhLm1vZGUsYyksYy5yZWY9VmUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcmM6cmV0dXJuIGI9RGUoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVWUoYil8fHpjKGIpKXJldHVybiBiPUJlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtXZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1zYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcmM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVWUoYyl8fHpjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtXZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09c2M/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVWUoZCl8fHpjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtXZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxsLGcsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9bCx1PWw9MCx0PW51bGw7bnVsbCE9PXEmJnU8Zy5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGdbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2w9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWcubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGcubGVuZ3RoO3UrKylpZihxPXAoZSxnW3VdLGgpKWw9ZihxLGwsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxnLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGdbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtsPWYodCxsLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsbCxnLGgpe3ZhciByPXpjKGcpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2c9ci5jYWxsKGcpO251bGw9PWc/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9bCx1PWw9MCx0PW51bGwsbj1nLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1nLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtsPWYoSCxsLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYobD1mKG4sbCx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xubD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGwpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXNjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBnPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYoZylzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBvYzphOnt2YXIgaz1mLmtleTtmb3IoZz1kO251bGwhPT1nOyl7aWYoZy5rZXk9PT1rKWlmKDEwPT09Zy50YWc/Zi50eXBlPT09c2M6Zy50eXBlPT09Zi50eXBlKXtjKGEsZy5zaWJsaW5nKTtkPWUoZyxmLnR5cGU9PT1zYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsbCk7ZC5yZWY9VmUoYSxnLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxnKTticmVha31lbHNlIGIoYSxnKTtnPWcuc2libGluZ31mLnR5cGU9PT1cbnNjPyhkPUJlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGwsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihsPUFlKGYsYS5tb2RlLGwpLGwucmVmPVZlKGEsZCxmKSxsW1wicmV0dXJuXCJdPWEsYT1sKX1yZXR1cm4gaChhKTtjYXNlIHJjOmE6e2ZvcihnPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1nKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZShmLGEubW9kZSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsbCksZFtcInJldHVyblwiXT1hLGE9ZCk6KGMoYSxkKSxkPUNlKGYsYS5tb2RlLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpLGgoYSk7aWYoVWUoZikpcmV0dXJuIHIoYSxkLGYsbCk7aWYoemMoZikpcmV0dXJuIFEoYSxkLGYsbCk7ZyYmV2UoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmw9YS50eXBlLEQoXCIxNTJcIixsLmRpc3BsYXlOYW1lfHxsLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBZZT1YZSghMCksWmU9WGUoITEpO1xuZnVuY3Rpb24gJGUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmUoYixudWxsLGMsZCk6WWUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnkoYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bmMuY3VycmVudD1iO3ZhciBsPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsbCxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ5KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3QoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdChhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgbD1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpJiYobC5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkpbC5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHM7aWYoIXEoKSYmZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7dmFyIGw9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZilsPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxcbnIoYSxiKTtsPTB9ZWxzZXt2YXIgaD1mLnZhbHVlO2lmKGg9PT1sJiYoMCE9PWh8fDEvaD09PTEvbCl8fGghPT1oJiZsIT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7bD0wfWVsc2UgaWYobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxsKToxMDczNzQxODIzLGx8PTAsMD09PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpfWVsc2UgeihiLGQsbCxjKX1iLnN0YXRlTm9kZT1sO0coYik7ZyhhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9EKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7XG5iLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgUT1hLnNob3VsZFNldFRleHRDb250ZW50LG49YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLHg9Yi5wdXNoSG9zdENvbnRleHQsWT1iLnB1c2hIb3N0Q29udGFpbmVyLEc9ZC5wdXNoUHJvdmlkZXIsUj1jLmdldE1hc2tlZENvbnRleHQsUz1jLmdldFVubWFza2VkQ29udGV4dCxxPWMuaGFzQ29udGV4dENoYW5nZWQsdT1jLnB1c2hDb250ZXh0UHJvdmlkZXIsdD1jLnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QseT1jLmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIsSD1lLmVudGVySHlkcmF0aW9uU3RhdGUsV2E9ZS5yZXNldEh5ZHJhdGlvblN0YXRlLENiPWUudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG5hPVRlKGMsZixoLGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFByb3BzPWJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgSmM9YS5hZG9wdENsYXNzSW5zdGFuY2UsS2M9YS5jYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLExjPWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxEYj1hLm1vdW50Q2xhc3NJbnN0YW5jZSxNYz1hLnJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSxFYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6cChiKTticmVhaztjYXNlIDI6dShiKTticmVhaztjYXNlIDQ6WShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6RyhiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9EKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsXG5lPWIucGVuZGluZ1Byb3BzLGY9UyhiKTtmPVIoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihlPUtjKGIsZCxlLGIubWVtb2l6ZWRTdGF0ZSksbnVsbCE9PWUmJnZvaWQgMCE9PWUmJihiLm1lbW9pemVkU3RhdGU9QSh7fSxiLm1lbW9pemVkU3RhdGUsZSkpKSxlPXUoYiksSmMoYixkKSxEYihiLGMpLGE9bChhLGIsITAsZSwhMSxjKSk6KGIudGFnPTEsZyhhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxcbmIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9UyhiKSxkPVIoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAyOmU9dShiKTtudWxsPT09YT9udWxsPT09Yi5zdGF0ZU5vZGU/KExjKGIsYi5wZW5kaW5nUHJvcHMpLERiKGIsYyksZD0hMCk6ZD1NYyhiLGMpOmQ9RWIoYSxiLGMpO2Y9ITE7dmFyIGg9Yi51cGRhdGVRdWV1ZTtudWxsIT09aCYmbnVsbCE9PWguY2FwdHVyZWRWYWx1ZXMmJihmPWQ9ITApO3JldHVybiBsKGEsYixkLGUsZixjKTtjYXNlIDM6YTppZihwKGIpLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCl7Zj1iLm1lbW9pemVkU3RhdGU7ZT1SZShhLGIsZCxudWxsLG51bGwsYyk7Yi5tZW1vaXplZFN0YXRlPWU7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcylkPW51bGw7ZWxzZSBpZihmPT09ZSl7V2EoKTthPXIoYSxiKTticmVhayBhfWVsc2UgZD1cbmUuZWxlbWVudDtmPWIuc3RhdGVOb2RlOyhudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZmLmh5ZHJhdGUmJkgoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9WmUoYixudWxsLGQsYykpOihXYSgpLGcoYSxiLGQpKTtiLm1lbW9pemVkU3RhdGU9ZTthPWIuY2hpbGR9ZWxzZSBXYSgpLGE9cihhLGIpO3JldHVybiBhO2Nhc2UgNTphOnt4KGIpO251bGw9PT1hJiZDYihiKTtlPWIudHlwZTtoPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIXEoKSYmaD09PWQpe2lmKGg9Yi5tb2RlJjEmJm4oZSxkKSliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWh8fDEwNzM3NDE4MjMhPT1jKXthPXIoYSxiKTticmVhayBhfX1oPWQuY2hpbGRyZW47UShlLGQpP2g9bnVsbDpmJiZRKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO3YoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJm4oZSxkKT8oYi5leHBpcmF0aW9uVGltZT1cbjEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooZyhhLGIsaCksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDYihiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6cmV0dXJuIGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lfHwoZT1iLm1lbW9pemVkUHJvcHMpLGQ9ZS5jaGlsZHJlbixiLnN0YXRlTm9kZT1udWxsPT09YT9aZShiLGIuc3RhdGVOb2RlLGQsYyk6WWUoYixhLnN0YXRlTm9kZSxkLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGIuc3RhdGVOb2RlO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD1ZZShiLG51bGwsZSxjKTpnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9XG5lLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDE0OnJldHVybiBjPWIudHlwZS5yZW5kZXIsYz1jKGIucGVuZGluZ1Byb3BzLGIucmVmKSxnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxiLmNoaWxkO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixxKCl8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMzpyZXR1cm4gQihhLGIsYyk7Y2FzZSAxMjphOntkPWIudHlwZTtmPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO3ZhciB0PWQuX2NoYW5nZWRCaXRzO2lmKHEoKXx8MCE9PXR8fGghPT1mKXtiLm1lbW9pemVkUHJvcHM9XG5mO3ZhciBrPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWt8fG51bGw9PT1rKWs9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1rO2lmKDAhPT0odCZrKSl6KGIsZCx0LGMpO2Vsc2UgaWYoaD09PWYpe2E9cihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKX1yZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx6PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdT12b2lkIDAsdD12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdT1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXooKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx5PXIoKTtIPWwoSCxlLHAsZCxjLHkpO3UoYSxiLEgsZSxwLGQsYyx5KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHk9Yi5jaGlsZDtudWxsIT09eTspe2lmKDU9PT15LnRhZ3x8Nj09PXkudGFnKWsocCx5LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09eS50YWcmJm51bGwhPT15LmNoaWxkKXt5LmNoaWxkW1wicmV0dXJuXCJdPXk7eT15LmNoaWxkO2NvbnRpbnVlfWlmKHk9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09eS5zaWJsaW5nOyl7aWYobnVsbD09PXlbXCJyZXR1cm5cIl18fHlbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7eT15W1wicmV0dXJuXCJdfXkuc2libGluZ1tcInJldHVyblwiXT15W1wicmV0dXJuXCJdO3k9eS5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl0KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eigpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVllKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBiZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkJjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpPZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe09lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBjZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZCYyhjKTtudWxsIT09YyYmQWMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJkFjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh0KXtiKGEsdCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZSYmSmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe2IoYSx0KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHo9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmU2UoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1TZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnooYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgbD1kLnZhbHVlLGc9ZC5zdGFjaztjZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2gobCx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWc/ZzpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGNmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBlZj17fTtcbmZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZWY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZWYpLGs9YShlZiksdj1hKGVmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtmKGssYSxhKTtmKGcsZWYsYSk7Yj1lKGIpO2goZyxhKTtmKGcsYixhKX0scHVzaEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPVxuYyh2LmN1cnJlbnQpLGU9YyhnLmN1cnJlbnQpO2I9ZChlLGEudHlwZSxiKTtlIT09YiYmKGYoayxhLGEpLGYoZyxiLGEpKX19fVxuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhLGIpe3ZhciBjPW5ldyB4ZSg1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjW1wicmV0dXJuXCJdPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gYj1mKGIsYS50eXBlLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPWgoYixhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGQoYSl7Zm9yKGE9YVtcInJldHVyblwiXTtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YVtcInJldHVyblwiXTtwPWF9dmFyIGU9YS5zaG91bGRTZXRUZXh0Q29udGVudDtcbmE9YS5oeWRyYXRpb247aWYoIWEpcmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe30sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc1XCIpfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzZcIil9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxoPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxnPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCx2PWEuaHlkcmF0ZUluc3RhbmNlLGw9YS5oeWRyYXRlVGV4dEluc3RhbmNlLHA9bnVsbCx6PW51bGwsQj0hMTtyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXt6PVxuayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtwPWE7cmV0dXJuIEI9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt6PXA9bnVsbDtCPSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZihCKXt2YXIgZD16O2lmKGQpe2lmKCFjKGEsZCkpe2Q9ZyhkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7Qj0hMTtwPWE7cmV0dXJufWIocCx6KX1wPWE7ej1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQj0hMSxwPWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXYoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGwoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG5wKXJldHVybiExO2lmKCFCKXJldHVybiBkKGEpLEI9ITAsITE7dmFyIGM9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz16O2M7KWIoYSxjKSxjPWcoYyk7ZChhKTt6PXA/ZyhhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhLGIsYyl7YT1hLnN0YXRlTm9kZTthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YjthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWN9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpEKFwiMTA4XCIsQWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBBKHt9LGIsYyl9dmFyIGU9YS5jcmVhdGVDdXJzb3IsZj1hLnB1c2gsaD1hLnBvcCxnPWUoa2EpLGs9ZSghMSksdj1rYTtyZXR1cm57Z2V0VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpP1xudjpnLmN1cnJlbnR9LGNhY2hlQ29udGV4dDpiLGdldE1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSxjKXt2YXIgZD1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFkKXJldHVybiBrYTt2YXIgZT1hLnN0YXRlTm9kZTtpZihlJiZlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1jKXJldHVybiBlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBmPXt9LGc7Zm9yKGcgaW4gZClmW2ddPWNbZ107ZSYmYihhLGMsZik7cmV0dXJuIGZ9LGhhc0NvbnRleHRDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIGsuY3VycmVudH0saXNDb250ZXh0Q29uc3VtZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlc30saXNDb250ZXh0UHJvdmlkZXI6Yyxwb3BDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7YyhhKSYmKGgoayxhKSxoKGcsYSkpfSxwb3BUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSl7aChrLFxuYSk7aChnLGEpfSxwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtudWxsIT1nLmN1cnNvcj9EKFwiMTY4XCIpOnZvaWQgMDtmKGcsYixhKTtmKGssYyxhKX0scHJvY2Vzc0NoaWxkQ29udGV4dDpkLHB1c2hDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7aWYoIWMoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxrYTt2PWcuY3VycmVudDtmKGcsYixhKTtmKGssay5jdXJyZW50LGEpO3JldHVybiEwfSxpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6RChcIjE2OVwiKTtpZihiKXt2YXIgZT1kKGEsdik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1lO2goayxhKTtoKGcsYSk7ZihnLGUsYSl9ZWxzZSBoKGssYSk7ZihrLGIsYSl9LGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe2ZvcigyIT09XG54ZChhKXx8MiE9PWEudGFnP0QoXCIxNzBcIik6dm9pZCAwOzMhPT1hLnRhZzspe2lmKGMoYSkpcmV0dXJuIGEuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0OyhhPWFbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfXJldHVybiBhLnN0YXRlTm9kZS5jb250ZXh0fX19XG5mdW5jdGlvbiBqZihhKXt2YXIgYj1hLmNyZWF0ZUN1cnNvcixjPWEucHVzaCxkPWEucG9wLGU9YihudWxsKSxmPWIobnVsbCksaD1iKDApO3JldHVybntwdXNoUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9fX1cbmZ1bmN0aW9uIGtmKCl7dmFyIGE9W10sYj0tMTtyZXR1cm57Y3JlYXRlQ3Vyc29yOmZ1bmN0aW9uKGEpe3JldHVybntjdXJyZW50OmF9fSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1ifSxwb3A6ZnVuY3Rpb24oYyl7MD5ifHwoYy5jdXJyZW50PWFbYl0sYVtiXT1udWxsLGItLSl9LHB1c2g6ZnVuY3Rpb24oYyxkKXtiKys7YVtiXT1jLmN1cnJlbnQ7Yy5jdXJyZW50PWR9LGNoZWNrVGhhdFN0YWNrSXNFbXB0eTpmdW5jdGlvbigpe30scmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2OmZ1bmN0aW9uKCl7fX19XG5mdW5jdGlvbiBsZihhKXtmdW5jdGlvbiBiKCl7aWYobnVsbCE9PUkpZm9yKHZhciBhPUlbXCJyZXR1cm5cIl07bnVsbCE9PWE7KUxjKGEpLGE9YVtcInJldHVyblwiXTtZYT1udWxsO1o9MDtJPW51bGw7TmM9ITF9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gbnVsbCE9PXlhJiZ5YS5oYXMoYSl9ZnVuY3Rpb24gZChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9Q2IoYixhLFopO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVp8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXtiOnN3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZj1lLnVwZGF0ZVF1ZXVlO2Y9bnVsbD09PWY/MDpmLmV4cGlyYXRpb25UaW1lO2JyZWFrIGI7ZGVmYXVsdDpmPTB9Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPVxuZy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle05jPSEwO2JyZWFrfX1lbHNle2E9S2MoYSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0yNTU5LGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1cbm51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGUoYSl7dmFyIGI9V2EoYS5hbHRlcm5hdGUsYSxaKTtudWxsPT09YiYmKGI9ZChhKSk7bmMuY3VycmVudD1udWxsO3JldHVybiBifWZ1bmN0aW9uIGYoYSxjLGYpe2NhP0QoXCIyNDNcIik6dm9pZCAwO2NhPSEwO2lmKGMhPT1afHxhIT09WWF8fG51bGw9PT1JKWIoKSxZYT1hLFo9YyxJPXplKFlhLmN1cnJlbnQsbnVsbCxaKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBnPSExO2Rve3RyeXtpZihmKWZvcig7bnVsbCE9PUkmJiFTKCk7KUk9ZShJKTtlbHNlIGZvcig7bnVsbCE9PUk7KUk9ZShJKX1jYXRjaChPYyl7aWYobnVsbD09PUkpe2c9ITA7cShPYyk7YnJlYWt9Zj1JO3ZhciBoPWZbXCJyZXR1cm5cIl07aWYobnVsbD09PWgpe2c9ITA7cShPYyk7YnJlYWt9SmMoaCxmLE9jKTtJPWQoZil9YnJlYWt9d2hpbGUoMSk7XG5jYT0hMTtpZihnfHxudWxsIT09SSlyZXR1cm4gbnVsbDtpZihOYylyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmN1cnJlbnQuYWx0ZXJuYXRlO0QoXCIyNjJcIil9ZnVuY3Rpb24gaChhLGIsYyxkKXthPXt2YWx1ZTpjLHNvdXJjZTphLHN0YWNrOkJjKGEpfTtQZShiLHtleHBpcmF0aW9uVGltZTpkLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOm51bGwsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6YSxuZXh0Om51bGx9KTt2KGIsZCl9ZnVuY3Rpb24gZyhhLGIpe2E6e2NhJiYhWmE/RChcIjI2M1wiKTp2b2lkIDA7Zm9yKHZhciBkPWFbXCJyZXR1cm5cIl07bnVsbCE9PWQ7KXtzd2l0Y2goZC50YWcpe2Nhc2UgMjp2YXIgZT1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkQ2F0Y2gmJiFjKGUpKXtoKGEsZCxiLFxuMSk7YT12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6aChhLGQsYiwxKTthPXZvaWQgMDticmVhayBhfWQ9ZFtcInJldHVyblwiXX0zPT09YS50YWcmJmgoYSxhLGIsMSk7YT12b2lkIDB9cmV0dXJuIGF9ZnVuY3Rpb24gayhhKXthPTAhPT1pYT9pYTpjYT9aYT8xOlo6YS5tb2RlJjE/emE/MTAqKCgobCgpKzE1KS8xMHwwKSsxKToyNSooKChsKCkrNTAwKS8yNXwwKSsxKToxO3phJiYoMD09PWRhfHxhPmRhKSYmKGRhPWEpO3JldHVybiBhfWZ1bmN0aW9uIHYoYSxjKXthOntmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWM7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5jKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWMpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGQ9XG5hLnN0YXRlTm9kZTshY2EmJjAhPT1aJiZjPFomJmIoKTtjYSYmIVphJiZZYT09PWR8fEIoZCxjKTtGYj54ZyYmRChcIjE4NVwiKX1lbHNle2M9dm9pZCAwO2JyZWFrIGF9YT1hW1wicmV0dXJuXCJdfWM9dm9pZCAwfXJldHVybiBjfWZ1bmN0aW9uIGwoKXt5ZT1JYygpLVBjO3JldHVybiB5Zz0oeWUvMTB8MCkrMn1mdW5jdGlvbiBwKGEsYixjLGQsZSl7dmFyIGY9aWE7aWE9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtpYT1mfX1mdW5jdGlvbiB6KGEpe2lmKDAhPT1HYil7aWYoYT5HYilyZXR1cm47bWcoUWMpfXZhciBiPUljKCktUGM7R2I9YTtRYz1sZyhRLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBCKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1LPyhsYT1LPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooSz1LLm5leHRTY2hlZHVsZWRSb290PWEsSy5uZXh0U2NoZWR1bGVkUm9vdD1sYSk7XG5lbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9VHx8KEo/SGImJihhYT1hLFA9MSxHKGEsMSwhMSkpOjE9PT1iP24oKTp6KGIpKX1mdW5jdGlvbiByKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PUspZm9yKHZhciBjPUssZD1sYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Sz9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGE9Sz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGEpbGE9ZT1kLm5leHRTY2hlZHVsZWRSb290LEsubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Syl7Sz1jO0submV4dFNjaGVkdWxlZFJvb3Q9bGE7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1cbmQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09SylicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPWFhO251bGwhPT1jJiZjPT09YiYmMT09PWE/RmIrKzpGYj0wO2FhPWI7UD1hfWZ1bmN0aW9uIFEoYSl7eCgwLCEwLGEpfWZ1bmN0aW9uIG4oKXt4KDEsITEsbnVsbCl9ZnVuY3Rpb24geChhLGIsYyl7JGE9YztyKCk7aWYoYilmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCkmJighSWJ8fGwoKT49UCk7KUcoYWEsUCwhSWIpLHIoKTtlbHNlIGZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKTspRyhhYSxQLCExKSxyKCk7bnVsbCE9PSRhJiYoR2I9MCxRYz0tMSk7MCE9PVAmJnooUCk7JGE9bnVsbDtJYj0hMTtZKCl9ZnVuY3Rpb24gWSgpe0ZiPTA7aWYobnVsbCE9PUFhKXt2YXIgYT1BYTtBYT1udWxsO2Zvcih2YXIgYj1cbjA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaCh3Zyl7QmF8fChCYT0hMCxKYj13Zyl9fX1pZihCYSl0aHJvdyBhPUpiLEpiPW51bGwsQmE9ITEsYTt9ZnVuY3Rpb24gRyhhLGIsYyl7VD9EKFwiMjQ1XCIpOnZvaWQgMDtUPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMCksbnVsbCE9PWMmJihTKCk/YS5maW5pc2hlZFdvcms9YzpSKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCExKSxudWxsIT09YyYmUihhLGMsYikpKTtUPSExfWZ1bmN0aW9uIFIoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09QWE/QWE9W2RdOkFhLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9XG4wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO1phPWNhPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9EKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0QoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9bCgpO25jLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGY9Yi5maXJzdEVmZmVjdH1lbHNlIGY9YjtlbHNlIGY9Yi5maXJzdEVmZmVjdDt6ZyhjLmNvbnRhaW5lckluZm8pO2Zvcih3PWY7bnVsbCE9PXc7KXt2YXIgaD0hMSxrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspdy5lZmZlY3RUYWcmMjA0OCYmRGIody5hbHRlcm5hdGUsdyksdz13Lm5leHRFZmZlY3R9Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT1cbncmJih3PXcubmV4dEVmZmVjdCkpfWZvcih3PWY7bnVsbCE9PXc7KXtoPSExO2s9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl7dmFyIHA9dy5lZmZlY3RUYWc7cCYxNiYmTWModyk7aWYocCYxMjgpe3ZhciBuPXcuYWx0ZXJuYXRlO251bGwhPT1uJiZrZyhuKX1zd2l0Y2gocCYxNCl7Y2FzZSAyOkViKHcpO3cuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6RWIodyk7dy5lZmZlY3RUYWcmPS0zO3dlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgNDp3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDg6Z2codyl9dz13Lm5leHRFZmZlY3R9fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9QWcoYy5jb250YWluZXJJbmZvKTtjLmN1cnJlbnQ9Yjtmb3Iodz1mO251bGwhPT13Oyl7cD0hMTtuPXZvaWQgMDt0cnl7Zm9yKGY9YyxoPWUsaz1kO251bGwhPT13Oyl7dmFyIHI9dy5lZmZlY3RUYWc7XG5yJjM2JiZoZyhmLHcuYWx0ZXJuYXRlLHcsaCxrKTtyJjI1NiYmaWcodyxxKTtyJjEyOCYmamcodyk7dmFyIHQ9dy5uZXh0RWZmZWN0O3cubmV4dEVmZmVjdD1udWxsO3c9dH19Y2F0Y2goYWIpe3A9ITAsbj1hYn1wJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LG4pLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1jYT1aYT0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSWUmJkllKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHlhPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiBTKCl7cmV0dXJuIG51bGw9PT0kYXx8JGEudGltZVJlbWFpbmluZygpPkJnPyExOkliPSEwfWZ1bmN0aW9uIHEoYSl7bnVsbD09PWFhP0QoXCIyNDZcIik6dm9pZCAwO2FhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7QmF8fChCYT0hMCxKYj1hKX12YXIgdT1rZigpLHQ9ZmYoYSx1KSx5PWhmKHUpO3U9amYodSk7dmFyIEg9Z2YoYSksXG5XYT0kZShhLHQseSx1LEgsdixrKS5iZWdpbldvcmssQ2I9YWYoYSx0LHksdSxIKS5jb21wbGV0ZVdvcms7dD1iZih0LHksdSx2LGMpO3ZhciBKYz10LnRocm93RXhjZXB0aW9uLEtjPXQudW53aW5kV29yayxMYz10LnVud2luZEludGVycnVwdGVkV29yazt0PWRmKGEsZyx2LGssZnVuY3Rpb24oYSl7bnVsbD09PXlhP3lhPW5ldyBTZXQoW2FdKTp5YS5hZGQoYSl9LGwpO3ZhciBEYj10LmNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyxNYz10LmNvbW1pdFJlc2V0VGV4dENvbnRlbnQsRWI9dC5jb21taXRQbGFjZW1lbnQsZ2c9dC5jb21taXREZWxldGlvbix3ZT10LmNvbW1pdFdvcmssaGc9dC5jb21taXRMaWZlQ3ljbGVzLGlnPXQuY29tbWl0RXJyb3JMb2dnaW5nLGpnPXQuY29tbWl0QXR0YWNoUmVmLGtnPXQuY29tbWl0RGV0YWNoUmVmLEljPWEubm93LGxnPWEuc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrLG1nPWEuY2FuY2VsRGVmZXJyZWRDYWxsYmFjayx6Zz1hLnByZXBhcmVGb3JDb21taXQsXG5BZz1hLnJlc2V0QWZ0ZXJDb21taXQsUGM9SWMoKSx5Zz0yLHllPVBjLFJjPTAsaWE9MCxjYT0hMSxJPW51bGwsWWE9bnVsbCxaPTAsdz1udWxsLFphPSExLE5jPSExLHlhPW51bGwsbGE9bnVsbCxLPW51bGwsR2I9MCxRYz0tMSxUPSExLGFhPW51bGwsUD0wLGRhPTAsSWI9ITEsQmE9ITEsSmI9bnVsbCwkYT1udWxsLEo9ITEsSGI9ITEsemE9ITEsQWE9bnVsbCx4Zz0xRTMsRmI9MCxCZz0xO3JldHVybntyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lOmwsY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcjprLHNjaGVkdWxlV29yazp2LHJlcXVlc3RXb3JrOkIsZmx1c2hSb290OmZ1bmN0aW9uKGEsYil7VD9EKFwiMjUzXCIpOnZvaWQgMDthYT1hO1A9YjtHKGEsYiwhMSk7bigpO1koKX0sYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KEo9Yyl8fFR8fG4oKX19LHVuYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXtpZihKJiYhSGIpe0hiPVxuITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7SGI9ITF9fXJldHVybiBhKGIpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtUP0QoXCIxODdcIik6dm9pZCAwO3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIHAoYSxiKX1maW5hbGx5e0o9YyxuKCl9fSxmbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9SjtKPSEwO3RyeXtwKGEpfWZpbmFsbHl7KEo9Yil8fFR8fHgoMSwhMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1pYTtpYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2lhPWJ9fSxzeW5jVXBkYXRlczpwLGludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyl7aWYoemEpcmV0dXJuIGEoYixjKTtKfHxUfHwwPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApO3ZhciBkPXphLGU9SjtKPXphPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7emE9ZCwoSj1lKXx8VHx8bigpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtUfHxcbjA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCl9LGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246ZnVuY3Rpb24oKXt2YXIgYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTthPD1SYyYmKGE9UmMrMSk7cmV0dXJuIFJjPWF9LGxlZ2FjeUNvbnRleHQ6eX19XG5mdW5jdGlvbiBtZihhKXtmdW5jdGlvbiBiKGEsYixjLGQsZSxoKXtkPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgbD1nKGMpO2M9ayhjKT92KGMsbCk6bH1lbHNlIGM9a2E7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1oO1BlKGQse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOntlbGVtZW50OmF9LGNhbGxiYWNrOnZvaWQgMD09PWI/bnVsbDpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7ZihkLGUpO3JldHVybiBlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1sZihhKTt2YXIgZD1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yayxoPWEubGVnYWN5Q29udGV4dCxnPWguZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQsaz1oLmlzQ29udGV4dFByb3ZpZGVyLHY9XG5oLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGYsaCl7dmFyIGc9Yy5jdXJyZW50LGs9ZCgpO2c9ZShnKTtyZXR1cm4gYihhLGMsZixrLGcsaCl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxjLGUsZixnKXt2YXIgaD1kKCk7cmV0dXJuIGIoYSxjLGUsaCxmLGcpfSxmbHVzaFJvb3Q6YS5mbHVzaFJvb3QsXG5yZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sXG5maW5kSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0QoXCIxODhcIik6RChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1CZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1DZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEhlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX19fVxudmFyIG5mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bWZ9KSxvZj1uZiYmbWZ8fG5mLHBmPW9mW1wiZGVmYXVsdFwiXT9vZltcImRlZmF1bHRcIl06b2Y7ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpyYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcmY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxzZj12b2lkIDA7c2Y9cmY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciB0Zj12b2lkIDAsdWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2t8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2spe3ZhciB2Zj1udWxsLHdmPSExLHhmPS0xLHlmPSExLHpmPTAsQWY9MzMsQmY9MzMsQ2Y9dm9pZCAwO0NmPXJmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIERmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09RGYpe3dmPSExO2E9c2YoKTtpZigwPj16Zi1hKWlmKC0xIT09XG54ZiYmeGY8PWEpQ2YuZGlkVGltZW91dD0hMDtlbHNle3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJufWVsc2UgQ2YuZGlkVGltZW91dD0hMTt4Zj0tMTthPXZmO3ZmPW51bGw7bnVsbCE9PWEmJmEoQ2YpfX0sITEpO3ZhciBFZj1mdW5jdGlvbihhKXt5Zj0hMTt2YXIgYj1hLXpmK0JmO2I8QmYmJkFmPEJmPyg4PmImJihiPTgpLEJmPWI8QWY/QWY6Yik6QWY9Yjt6Zj1hK0JmO3dmfHwod2Y9ITAsd2luZG93LnBvc3RNZXNzYWdlKERmLFwiKlwiKSl9O3RmPWZ1bmN0aW9uKGEsYil7dmY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHhmPXNmKCkrYi50aW1lb3V0KTt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybiAwfTt1Zj1mdW5jdGlvbigpe3ZmPW51bGw7d2Y9ITE7eGY9LTF9fWVsc2UgdGY9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdWY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHRmPVxuZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KX0sdWY9ZnVuY3Rpb24oYSl7Y2xlYXJUaW1lb3V0KGEpfTtmdW5jdGlvbiBGZihhKXt2YXIgYj1cIlwiO2VhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2YoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIZihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIEpmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiOTFcIik6dm9pZCAwO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkQoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIExmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIE1mKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBOZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBPZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFBmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9PZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBRZj12b2lkIDAsUmY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TmYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UWY9UWZ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UWYuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVFmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFNmKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgVGY9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sVWY9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFRmKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1VmLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7VGZbYl09VGZbYV19KX0pO1xuZnVuY3Rpb24gVmYoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8VGYuaGFzT3duUHJvcGVydHkoZSkmJlRmW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFdmPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBYZihhLGIsYyl7YiYmKFdmW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/RChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpEKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9EKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBZZihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1rZShhKTtiPXZhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9aZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhaZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFpkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaWMoXCJjYW5jZWxcIiwhMCkmJlpkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaWMoXCJjbG9zZVwiLCEwKSYmWmQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTpmZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGZlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PU5mLmh0bWwmJihkPU9mKGEpKTtkPT09TmYuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJnKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIGNnKGEsYixjLGQpe3ZhciBlPVlmKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtmPVZjKGEsYyk7VyhcInRvcEludmFsaWRcIixcblwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLGMpO2Y9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpO2Y9SmYoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31YZihiLGYsWmYpO3ZhciBoPWYsZztmb3IoZyBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZykpe3ZhciBrPWhbZ107XCJzdHlsZVwiPT09Zz9WZihhLGssWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmUmYoYSxrKSk6XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmU2YoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJlxuU2YoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJih1YS5oYXNPd25Qcm9wZXJ0eShnKT9udWxsIT1rJiYkZihkLGcpOm51bGwhPWsmJlVjKGEsZyxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP0hmKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZIZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfX1cbmZ1bmN0aW9uIGRnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1WYyhhLGMpO2Q9VmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPUdmKGEsYyk7ZD1HZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPUpmKGEsYyk7ZD1KZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfVhmKGIsZCxaZik7Yj1hPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGc9Y1thXTtmb3IoYiBpbiBnKWcuaGFzT3duUHJvcGVydHkoYikmJihofHxcbihoPXt9KSxoW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07Zz1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1nJiYobnVsbCE9a3x8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09YSlpZihnKXtmb3IoYiBpbiBnKSFnLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoaHx8KGg9e30pLGhbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZnW2JdIT09a1tiXSYmKGh8fChoPXt9KSxoW2JdPWtbYl0pfWVsc2UgaHx8KGZ8fChmPVtdKSxmLnB1c2goYSxoKSksXG5oPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1rJiZnIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2c9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiYkZihlLGEpLGZ8fGc9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWgmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGVnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJlljKGEsZSk7WWYoYyxkKTtkPVlmKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgaD1iW2ZdLGc9YltmKzFdO1wic3R5bGVcIj09PWg/VmYoYSxnLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oP1JmKGEsZyk6XCJjaGlsZHJlblwiPT09aD9TZihhLGcpOlVjKGEsaCxnLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/SGYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xuSGYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOkhmKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIGZnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxcbmMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyksVyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKSwkZihlLFwib25DaGFuZ2VcIil9WGYoYixjLFpmKTtkPW51bGw7Zm9yKHZhciBoIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShoKSYmKGY9Y1toXSxcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2YgZj9hLnRleHRDb250ZW50IT09ZiYmKGQ9W1wiY2hpbGRyZW5cIixmXSk6XCJudW1iZXJcIj09PXR5cGVvZiBmJiZhLnRleHRDb250ZW50IT09XCJcIitmJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZl0pOnVhLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mJiYkZihlLGgpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiZcbihhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gbmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIG9nPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6YWcsY3JlYXRlVGV4dE5vZGU6Ymcsc2V0SW5pdGlhbFByb3BlcnRpZXM6Y2csZGlmZlByb3BlcnRpZXM6ZGcsdXBkYXRlUHJvcGVydGllczplZyxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOmZnLGRpZmZIeWRyYXRlZFRleHQ6bmcsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPVxuYy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1YYShkKTtlP3ZvaWQgMDpEKFwiOTBcIik7bWMoZCk7WmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIZihhLCEhYy5tdWx0aXBsZSxiLCExKX19fSk7VGIuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChvZyk7dmFyIHBnPW51bGwscWc9bnVsbDtcbmZ1bmN0aW9uIHJnKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPVguY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9cmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6RChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IHNnO1gudXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5yZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5yZy5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6RChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9EKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO1guZmx1c2hSb290KGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O3JnLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBzZygpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfXNnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5zZy5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiB0ZyhhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PVguY3JlYXRlQ29udGFpbmVyKGEsYixjKX10Zy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IHNnO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtYLnVwZGF0ZUNvbnRhaW5lcihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xudGcucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IHNnO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtYLnVwZGF0ZUNvbnRhaW5lcihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O3RnLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBzZztjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WC51cGRhdGVDb250YWluZXIoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbnRnLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyByZyh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIHVnKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHZnKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbnZhciBYPXBmKHtnZXRSb290SG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlVHlwZTtzd2l0Y2goYil7Y2FzZSA5OmNhc2UgMTE6YT0oYT1hLmRvY3VtZW50RWxlbWVudCk/YS5uYW1lc3BhY2VVUkk6UGYobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmI9OD09PWI/YS5wYXJlbnROb2RlOmEsYT1iLm5hbWVzcGFjZVVSSXx8bnVsbCxiPWIudGFnTmFtZSxhPVBmKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGYoYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXtwZz1WZDt2YXIgYT1mYSgpO2lmKG5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5pZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEIpe2I9bnVsbDticmVhayBhfXZhciBmPTAsaD0tMSxnPS0xLGs9MCx2PTAsbD1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB6Ozspe2whPT1ifHwwIT09ZCYmMyE9PWwubm9kZVR5cGV8fChoPWYrZCk7bCE9PWV8fDAhPT1jJiYzIT09bC5ub2RlVHlwZXx8KGc9ZitjKTszPT09bC5ub2RlVHlwZSYmKGYrPWwubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh6PWwuZmlyc3RDaGlsZCkpYnJlYWs7cD1sO2w9en1mb3IoOzspe2lmKGw9PT1hKWJyZWFrIGI7cD09PWImJisraz09PWQmJihoPWYpO3A9PT1lJiYrK3Y9PT1jJiYoZz1mKTtpZihudWxsIT09KHo9bC5uZXh0U2libGluZykpYnJlYWs7bD1wO3A9bC5wYXJlbnROb2RlfWw9en1iPS0xPT09aHx8LTE9PT1nP251bGw6XG57c3RhcnQ6aCxlbmQ6Z319ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07V2QoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9cWcsYj1mYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmphKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW21iKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cbmQmJihlPWQsZD1hLGE9ZSk7ZT1tZShjLGEpO3ZhciBmPW1lKGMsZCk7aWYoZSYmZiYmKDEhPT1iLnJhbmdlQ291bnR8fGIuYW5jaG9yTm9kZSE9PWUubm9kZXx8Yi5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8Yi5mb2N1c05vZGUhPT1mLm5vZGV8fGIuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkpe3ZhciBoPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7aC5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpO2IucmVtb3ZlQWxsUmFuZ2VzKCk7YT5kPyhiLmFkZFJhbmdlKGgpLGIuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihoLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLGIuYWRkUmFuZ2UoaCkpfX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LFxuYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH1xZz1udWxsO1dkKHBnKTtwZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YWcoYSxiLGMsZCk7YVtGXT1lO2FbVGFdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe2NnKGEsYixjLGQpO3JldHVybiB2ZyhiLGMpfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGRnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPWJnKGEsYik7YVtGXT1kO3JldHVybiBhfSxub3c6c2YsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEsYixjKXt2ZyhiLGMpJiZhLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2FbVGFdPWU7ZWcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtTZihhLFwiXCIpfSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0sXG5pbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPVxuYS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbRl09ZjthW1RhXT1jO3JldHVybiBmZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW0ZdPWM7cmV0dXJuIG5nKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazp0ZixjYW5jZWxEZWZlcnJlZENhbGxiYWNrOnVmfSksQ2c9WDthYz1DZy5iYXRjaGVkVXBkYXRlcztiYz1DZy5pbnRlcmFjdGl2ZVVwZGF0ZXM7Y2M9Q2cuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiBEZyhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHRnKGEsITEsYil9XG5mdW5jdGlvbiBFZyhhLGIsYyxkLGUpe3VnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1EZyhjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19WC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBYLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDt1ZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gcWYoYSxiLG51bGwsYyl9XG52YXIgR2c9e2NyZWF0ZVBvcnRhbDpGZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6WC5maW5kSG9zdEluc3RhbmNlKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dWcoYSk/dm9pZCAwOkQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtFZyhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1cbm51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpSYSxFdmVudFBsdWdpblJlZ2lzdHJ5OkNhLEV2ZW50UHJvcGFnYXRvcnM6a2IsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OiRiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpiYixSZWFjdERPTUV2ZW50TGlzdGVuZXI6JGR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHRnKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07XG5YLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSx0PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHk9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHo9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEE9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTpcbjYwMTEyLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxjPTA7YzxiO2MrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX12YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07XG5mdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QyhcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO20oSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTChhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbD0wO2w8ZjtsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpJLmN1cnJlbnR9fVxuZnVuY3Rpb24gTShhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBOPS9cXC8rL2csTz1bXTtmdW5jdGlvbiBQKGEsYixlLGMpe2lmKE8ubGVuZ3RoKXt2YXIgZD1PLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUShhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk8ubGVuZ3RoJiZPLnB1c2goYSl9XG5mdW5jdGlvbiBSKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitTKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1MoZCxoKTtnKz1SKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrUyhkLGgrKyksZys9UihkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxDKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBTKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBUKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFUoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihNKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIik7Yj1QKGIsZyxjLGQpO251bGw9PWF8fFIoYSxcIlwiLFUsYik7UShiKX1cbnZhciBXPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVAobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UihhLFwiXCIsVCxiKTtRKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlIoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtNKGEpP3ZvaWQgMDpDKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eSxcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2NoYW5nZWRCaXRzOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp4LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6eixjcmVhdGVFbGVtZW50OkwsY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9DKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SS5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGs9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmXG4oaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUwuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpNLHZlcnNpb246XCIxNi4zLjJcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SSxhc3NpZ246bX19LFg9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpXfSksXG5ZPVgmJld8fFg7bW9kdWxlLmV4cG9ydHM9WVtcImRlZmF1bHRcIl0/WVtcImRlZmF1bHRcIl06WTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCAnLi9mYXZpY29uLmljbyc7XG5cbmltcG9ydCAnLi4vc3R5bGVzL2luZGV4LnNjc3MnO1xuaW1wb3J0ICcuLi9zdHlsZXMvZnJhbmtsaW4tc2l0ZS5zY3NzJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gJG1ldGFkYXRhLnNldDtcblxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcbiIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpIHtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=