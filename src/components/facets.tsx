import { FC, ReactNode, HTMLAttributes } from 'react';
import { Link, useLocation } from 'react-router-dom';
import cn from 'classnames';
import {
  parse as qsParse,
  stringify as qsStringify,
  ParsedQuery,
} from 'query-string';

import ExpandableList from './expandable-list';

import { formatLargeNumber } from '../utils';

import '../styles/components/facets.scss';

type FacetValue = { label?: string; value: string; count: number };

export type Facet = {
  label: string;
  name: string;
  allowMultipleSelection?: boolean;
  values?: FacetValue[];
};

// To hold facets, record of sets
type CustomQueryValue = Record<string, Set<string>>;
// The modified query object, with our custom facet object
type CustomParsedQuery = ParsedQuery<string | CustomQueryValue>;

/**
 * Takes a search string and parse it, handle facets specifically, keeps them
 * as sets of values
 */
export const parse = (
  string: string,
  queryStringKey = 'facets'
): CustomParsedQuery => {
  const parsed = qsParse(string);
  let queryStringFacet = parsed[queryStringKey];
  if (!queryStringFacet) {
    return parsed;
  }
  if (Array.isArray(queryStringFacet)) {
    queryStringFacet = queryStringFacet.join(',');
  }
  const facets = queryStringFacet
    .split(',')
    .map((stringTuple) => stringTuple.split(':'));
  // change variable name and assert another type of TS (ok to mutate here)
  const customParsed: CustomParsedQuery = parsed;
  customParsed[queryStringKey] = {};
  const field = customParsed[queryStringKey] as CustomQueryValue;
  // eslint-disable-next-line no-restricted-syntax
  for (const [name, value] of facets) {
    if (!field[name]) {
      field[name] = new Set();
    }
    field[name].add(value);
  }
  return customParsed;
};

/**
 * Takes a parsed search object (as generated by the previous "parse" function)
 * and generate a search string
 */
export const stringify = (
  query: CustomParsedQuery,
  queryStringKey = 'facets'
): string => {
  const { [queryStringKey]: facets = {}, ...rest } = query;
  const facetString = Object.entries(facets as CustomQueryValue)
    .map(([name, values]) =>
      Array.from(values).map((value) => `${name}:${value}`)
    )
    .flat()
    .join(',');
  if (!facetString) {
    return qsStringify(rest);
  }
  return qsStringify({ ...rest, [queryStringKey]: facetString });
};

type Props = {
  /**
   * The facet data to be displayed
   */
  data: Facet[];
  /**
   * Extra components to be added in the "action" area, map of <facet name, component>
   */
  extraActionsFor?: Map<string, ReactNode>;
  /**
   * Key with which to add the facets in the querystring (defaults to "facets")
   */
  queryStringKey?: string;
};

const Facets: FC<Props & HTMLAttributes<HTMLDivElement>> = ({
  data,
  extraActionsFor,
  queryStringKey = 'facets',
  className,
  ...props
}) => {
  const location = useLocation();

  if (!(data && data.length)) {
    return null;
  }

  const facetsToShow = data.filter(
    (facet) => facet.values && facet.values.length
  );

  const search = parse(location.search, queryStringKey);

  return (
    <div className={cn(className, 'facets')} {...props}>
      <ul className="no-bullet">
        {facetsToShow.map((facet) => {
          if (!facet.values) {
            return null;
          }
          return (
            <li key={facet.name}>
              <div className="facet-name">{facet.label || facet.name}</div>
              <ExpandableList extraActions={extraActionsFor?.get(facet.name)}>
                {facet.values.map(({ value, label, count }) => {
                  const queryField = search[queryStringKey] as
                    | CustomQueryValue
                    | undefined;
                  const isActive = queryField?.[facet.name]?.has(value);

                  const facetSet = new Set(
                    facet.allowMultipleSelection && queryField
                      ? queryField[facet.name]
                      : null
                  );
                  facetSet[isActive ? 'delete' : 'add'](value);

                  const to = {
                    ...location,
                    search: stringify(
                      {
                        ...search,
                        [queryStringKey]: {
                          ...queryField,
                          [facet.name]: facetSet,
                        },
                      },
                      queryStringKey
                    ),
                  };

                  return (
                    <Link
                      key={`${facet.name}_${value}`}
                      to={to}
                      className={isActive ? 'facet-active' : undefined}
                      replace
                    >
                      {`${label || value} (${formatLargeNumber(count)})`}
                    </Link>
                  );
                })}
              </ExpandableList>
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default Facets;
